$date
	Fri Feb 25 00:19:59 2022
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module tb_regFile_hier $end
$var wire 1 ! read1Data [15] $end
$var wire 1 " read1Data [14] $end
$var wire 1 # read1Data [13] $end
$var wire 1 $ read1Data [12] $end
$var wire 1 % read1Data [11] $end
$var wire 1 & read1Data [10] $end
$var wire 1 ' read1Data [9] $end
$var wire 1 ( read1Data [8] $end
$var wire 1 ) read1Data [7] $end
$var wire 1 * read1Data [6] $end
$var wire 1 + read1Data [5] $end
$var wire 1 , read1Data [4] $end
$var wire 1 - read1Data [3] $end
$var wire 1 . read1Data [2] $end
$var wire 1 / read1Data [1] $end
$var wire 1 0 read1Data [0] $end
$var wire 1 1 read2Data [15] $end
$var wire 1 2 read2Data [14] $end
$var wire 1 3 read2Data [13] $end
$var wire 1 4 read2Data [12] $end
$var wire 1 5 read2Data [11] $end
$var wire 1 6 read2Data [10] $end
$var wire 1 7 read2Data [9] $end
$var wire 1 8 read2Data [8] $end
$var wire 1 9 read2Data [7] $end
$var wire 1 : read2Data [6] $end
$var wire 1 ; read2Data [5] $end
$var wire 1 < read2Data [4] $end
$var wire 1 = read2Data [3] $end
$var wire 1 > read2Data [2] $end
$var wire 1 ? read2Data [1] $end
$var wire 1 @ read2Data [0] $end
$var reg 3 A read1RegSel [2:0] $end
$var reg 3 B read2RegSel [2:0] $end
$var reg 1 C writeEn $end
$var reg 16 D writeData [15:0] $end
$var reg 3 E writeRegSel [2:0] $end
$var integer 32 F cycle_count $end
$var wire 1 G clk $end
$var wire 1 H rst $end
$var reg 1 I fail $end
$var reg 16 J ref_r1data [15:0] $end
$var reg 16 K ref_r2data [15:0] $end

$scope module DUT $end
$var wire 1 L read1RegSel [2] $end
$var wire 1 M read1RegSel [1] $end
$var wire 1 N read1RegSel [0] $end
$var wire 1 O read2RegSel [2] $end
$var wire 1 P read2RegSel [1] $end
$var wire 1 Q read2RegSel [0] $end
$var wire 1 R writeRegSel [2] $end
$var wire 1 S writeRegSel [1] $end
$var wire 1 T writeRegSel [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 e writeEn $end
$var wire 1 ! read1Data [15] $end
$var wire 1 " read1Data [14] $end
$var wire 1 # read1Data [13] $end
$var wire 1 $ read1Data [12] $end
$var wire 1 % read1Data [11] $end
$var wire 1 & read1Data [10] $end
$var wire 1 ' read1Data [9] $end
$var wire 1 ( read1Data [8] $end
$var wire 1 ) read1Data [7] $end
$var wire 1 * read1Data [6] $end
$var wire 1 + read1Data [5] $end
$var wire 1 , read1Data [4] $end
$var wire 1 - read1Data [3] $end
$var wire 1 . read1Data [2] $end
$var wire 1 / read1Data [1] $end
$var wire 1 0 read1Data [0] $end
$var wire 1 1 read2Data [15] $end
$var wire 1 2 read2Data [14] $end
$var wire 1 3 read2Data [13] $end
$var wire 1 4 read2Data [12] $end
$var wire 1 5 read2Data [11] $end
$var wire 1 6 read2Data [10] $end
$var wire 1 7 read2Data [9] $end
$var wire 1 8 read2Data [8] $end
$var wire 1 9 read2Data [7] $end
$var wire 1 : read2Data [6] $end
$var wire 1 ; read2Data [5] $end
$var wire 1 < read2Data [4] $end
$var wire 1 = read2Data [3] $end
$var wire 1 > read2Data [2] $end
$var wire 1 ? read2Data [1] $end
$var wire 1 @ read2Data [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 h err $end

$scope module clk_generator $end
$var reg 1 i clk $end
$var reg 1 j rst $end
$var wire 1 h err $end
$var integer 32 k cycle_count $end
$upscope $end

$scope module rf0 $end
$var parameter 32 l NUM_REGISTERS $end
$var parameter 32 m REG_SIZE $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 L read1RegSel [2] $end
$var wire 1 M read1RegSel [1] $end
$var wire 1 N read1RegSel [0] $end
$var wire 1 O read2RegSel [2] $end
$var wire 1 P read2RegSel [1] $end
$var wire 1 Q read2RegSel [0] $end
$var wire 1 R writeRegSel [2] $end
$var wire 1 S writeRegSel [1] $end
$var wire 1 T writeRegSel [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 e writeEn $end
$var wire 1 ! read1Data [15] $end
$var wire 1 " read1Data [14] $end
$var wire 1 # read1Data [13] $end
$var wire 1 $ read1Data [12] $end
$var wire 1 % read1Data [11] $end
$var wire 1 & read1Data [10] $end
$var wire 1 ' read1Data [9] $end
$var wire 1 ( read1Data [8] $end
$var wire 1 ) read1Data [7] $end
$var wire 1 * read1Data [6] $end
$var wire 1 + read1Data [5] $end
$var wire 1 , read1Data [4] $end
$var wire 1 - read1Data [3] $end
$var wire 1 . read1Data [2] $end
$var wire 1 / read1Data [1] $end
$var wire 1 0 read1Data [0] $end
$var wire 1 1 read2Data [15] $end
$var wire 1 2 read2Data [14] $end
$var wire 1 3 read2Data [13] $end
$var wire 1 4 read2Data [12] $end
$var wire 1 5 read2Data [11] $end
$var wire 1 6 read2Data [10] $end
$var wire 1 7 read2Data [9] $end
$var wire 1 8 read2Data [8] $end
$var wire 1 9 read2Data [7] $end
$var wire 1 : read2Data [6] $end
$var wire 1 ; read2Data [5] $end
$var wire 1 < read2Data [4] $end
$var wire 1 = read2Data [3] $end
$var wire 1 > read2Data [2] $end
$var wire 1 ? read2Data [1] $end
$var wire 1 @ read2Data [0] $end
$var wire 1 h err $end
$var wire 1 n regOut0 [15] $end
$var wire 1 o regOut0 [14] $end
$var wire 1 p regOut0 [13] $end
$var wire 1 q regOut0 [12] $end
$var wire 1 r regOut0 [11] $end
$var wire 1 s regOut0 [10] $end
$var wire 1 t regOut0 [9] $end
$var wire 1 u regOut0 [8] $end
$var wire 1 v regOut0 [7] $end
$var wire 1 w regOut0 [6] $end
$var wire 1 x regOut0 [5] $end
$var wire 1 y regOut0 [4] $end
$var wire 1 z regOut0 [3] $end
$var wire 1 { regOut0 [2] $end
$var wire 1 | regOut0 [1] $end
$var wire 1 } regOut0 [0] $end
$var wire 1 ~ regOut1 [15] $end
$var wire 1 !! regOut1 [14] $end
$var wire 1 "! regOut1 [13] $end
$var wire 1 #! regOut1 [12] $end
$var wire 1 $! regOut1 [11] $end
$var wire 1 %! regOut1 [10] $end
$var wire 1 &! regOut1 [9] $end
$var wire 1 '! regOut1 [8] $end
$var wire 1 (! regOut1 [7] $end
$var wire 1 )! regOut1 [6] $end
$var wire 1 *! regOut1 [5] $end
$var wire 1 +! regOut1 [4] $end
$var wire 1 ,! regOut1 [3] $end
$var wire 1 -! regOut1 [2] $end
$var wire 1 .! regOut1 [1] $end
$var wire 1 /! regOut1 [0] $end
$var wire 1 0! regOut2 [15] $end
$var wire 1 1! regOut2 [14] $end
$var wire 1 2! regOut2 [13] $end
$var wire 1 3! regOut2 [12] $end
$var wire 1 4! regOut2 [11] $end
$var wire 1 5! regOut2 [10] $end
$var wire 1 6! regOut2 [9] $end
$var wire 1 7! regOut2 [8] $end
$var wire 1 8! regOut2 [7] $end
$var wire 1 9! regOut2 [6] $end
$var wire 1 :! regOut2 [5] $end
$var wire 1 ;! regOut2 [4] $end
$var wire 1 <! regOut2 [3] $end
$var wire 1 =! regOut2 [2] $end
$var wire 1 >! regOut2 [1] $end
$var wire 1 ?! regOut2 [0] $end
$var wire 1 @! regOut3 [15] $end
$var wire 1 A! regOut3 [14] $end
$var wire 1 B! regOut3 [13] $end
$var wire 1 C! regOut3 [12] $end
$var wire 1 D! regOut3 [11] $end
$var wire 1 E! regOut3 [10] $end
$var wire 1 F! regOut3 [9] $end
$var wire 1 G! regOut3 [8] $end
$var wire 1 H! regOut3 [7] $end
$var wire 1 I! regOut3 [6] $end
$var wire 1 J! regOut3 [5] $end
$var wire 1 K! regOut3 [4] $end
$var wire 1 L! regOut3 [3] $end
$var wire 1 M! regOut3 [2] $end
$var wire 1 N! regOut3 [1] $end
$var wire 1 O! regOut3 [0] $end
$var wire 1 P! regOut4 [15] $end
$var wire 1 Q! regOut4 [14] $end
$var wire 1 R! regOut4 [13] $end
$var wire 1 S! regOut4 [12] $end
$var wire 1 T! regOut4 [11] $end
$var wire 1 U! regOut4 [10] $end
$var wire 1 V! regOut4 [9] $end
$var wire 1 W! regOut4 [8] $end
$var wire 1 X! regOut4 [7] $end
$var wire 1 Y! regOut4 [6] $end
$var wire 1 Z! regOut4 [5] $end
$var wire 1 [! regOut4 [4] $end
$var wire 1 \! regOut4 [3] $end
$var wire 1 ]! regOut4 [2] $end
$var wire 1 ^! regOut4 [1] $end
$var wire 1 _! regOut4 [0] $end
$var wire 1 `! regOut5 [15] $end
$var wire 1 a! regOut5 [14] $end
$var wire 1 b! regOut5 [13] $end
$var wire 1 c! regOut5 [12] $end
$var wire 1 d! regOut5 [11] $end
$var wire 1 e! regOut5 [10] $end
$var wire 1 f! regOut5 [9] $end
$var wire 1 g! regOut5 [8] $end
$var wire 1 h! regOut5 [7] $end
$var wire 1 i! regOut5 [6] $end
$var wire 1 j! regOut5 [5] $end
$var wire 1 k! regOut5 [4] $end
$var wire 1 l! regOut5 [3] $end
$var wire 1 m! regOut5 [2] $end
$var wire 1 n! regOut5 [1] $end
$var wire 1 o! regOut5 [0] $end
$var wire 1 p! regOut6 [15] $end
$var wire 1 q! regOut6 [14] $end
$var wire 1 r! regOut6 [13] $end
$var wire 1 s! regOut6 [12] $end
$var wire 1 t! regOut6 [11] $end
$var wire 1 u! regOut6 [10] $end
$var wire 1 v! regOut6 [9] $end
$var wire 1 w! regOut6 [8] $end
$var wire 1 x! regOut6 [7] $end
$var wire 1 y! regOut6 [6] $end
$var wire 1 z! regOut6 [5] $end
$var wire 1 {! regOut6 [4] $end
$var wire 1 |! regOut6 [3] $end
$var wire 1 }! regOut6 [2] $end
$var wire 1 ~! regOut6 [1] $end
$var wire 1 !" regOut6 [0] $end
$var wire 1 "" regOut7 [15] $end
$var wire 1 #" regOut7 [14] $end
$var wire 1 $" regOut7 [13] $end
$var wire 1 %" regOut7 [12] $end
$var wire 1 &" regOut7 [11] $end
$var wire 1 '" regOut7 [10] $end
$var wire 1 (" regOut7 [9] $end
$var wire 1 )" regOut7 [8] $end
$var wire 1 *" regOut7 [7] $end
$var wire 1 +" regOut7 [6] $end
$var wire 1 ," regOut7 [5] $end
$var wire 1 -" regOut7 [4] $end
$var wire 1 ." regOut7 [3] $end
$var wire 1 /" regOut7 [2] $end
$var wire 1 0" regOut7 [1] $end
$var wire 1 1" regOut7 [0] $end
$var wire 1 2" decoderOut [7] $end
$var wire 1 3" decoderOut [6] $end
$var wire 1 4" decoderOut [5] $end
$var wire 1 5" decoderOut [4] $end
$var wire 1 6" decoderOut [3] $end
$var wire 1 7" decoderOut [2] $end
$var wire 1 8" decoderOut [1] $end
$var wire 1 9" decoderOut [0] $end

$scope module decoder $end
$var wire 1 2" out [7] $end
$var wire 1 3" out [6] $end
$var wire 1 4" out [5] $end
$var wire 1 5" out [4] $end
$var wire 1 6" out [3] $end
$var wire 1 7" out [2] $end
$var wire 1 8" out [1] $end
$var wire 1 9" out [0] $end
$var wire 1 R in [2] $end
$var wire 1 S in [1] $end
$var wire 1 T in [0] $end

$scope module decoder1 $end
$var wire 1 6" out [3] $end
$var wire 1 7" out [2] $end
$var wire 1 8" out [1] $end
$var wire 1 9" out [0] $end
$var wire 1 S in [1] $end
$var wire 1 T in [0] $end
$var wire 1 :" en $end
$upscope $end

$scope module decoder2 $end
$var wire 1 2" out [3] $end
$var wire 1 3" out [2] $end
$var wire 1 4" out [1] $end
$var wire 1 5" out [0] $end
$var wire 1 S in [1] $end
$var wire 1 T in [0] $end
$var wire 1 R en $end
$upscope $end
$upscope $end

$scope module reg0 $end
$var parameter 32 ;" REG_SIZE $end
$var wire 1 n readData [15] $end
$var wire 1 o readData [14] $end
$var wire 1 p readData [13] $end
$var wire 1 q readData [12] $end
$var wire 1 r readData [11] $end
$var wire 1 s readData [10] $end
$var wire 1 t readData [9] $end
$var wire 1 u readData [8] $end
$var wire 1 v readData [7] $end
$var wire 1 w readData [6] $end
$var wire 1 x readData [5] $end
$var wire 1 y readData [4] $end
$var wire 1 z readData [3] $end
$var wire 1 { readData [2] $end
$var wire 1 | readData [1] $end
$var wire 1 } readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 <" writeEn $end
$var wire 1 =" inputData [15] $end
$var wire 1 >" inputData [14] $end
$var wire 1 ?" inputData [13] $end
$var wire 1 @" inputData [12] $end
$var wire 1 A" inputData [11] $end
$var wire 1 B" inputData [10] $end
$var wire 1 C" inputData [9] $end
$var wire 1 D" inputData [8] $end
$var wire 1 E" inputData [7] $end
$var wire 1 F" inputData [6] $end
$var wire 1 G" inputData [5] $end
$var wire 1 H" inputData [4] $end
$var wire 1 I" inputData [3] $end
$var wire 1 J" inputData [2] $end
$var wire 1 K" inputData [1] $end
$var wire 1 L" inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 n q $end
$var wire 1 =" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 M" state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 o q $end
$var wire 1 >" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 N" state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 p q $end
$var wire 1 ?" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 O" state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 q q $end
$var wire 1 @" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 P" state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 r q $end
$var wire 1 A" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 Q" state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 s q $end
$var wire 1 B" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 R" state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 t q $end
$var wire 1 C" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 S" state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 u q $end
$var wire 1 D" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 T" state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 v q $end
$var wire 1 E" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 U" state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 w q $end
$var wire 1 F" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 V" state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 x q $end
$var wire 1 G" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 W" state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 y q $end
$var wire 1 H" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 X" state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 z q $end
$var wire 1 I" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 Y" state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 { q $end
$var wire 1 J" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 Z" state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 | q $end
$var wire 1 K" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 [" state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 } q $end
$var wire 1 L" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 \" state $end
$upscope $end
$upscope $end

$scope module reg1 $end
$var parameter 32 ]" REG_SIZE $end
$var wire 1 ~ readData [15] $end
$var wire 1 !! readData [14] $end
$var wire 1 "! readData [13] $end
$var wire 1 #! readData [12] $end
$var wire 1 $! readData [11] $end
$var wire 1 %! readData [10] $end
$var wire 1 &! readData [9] $end
$var wire 1 '! readData [8] $end
$var wire 1 (! readData [7] $end
$var wire 1 )! readData [6] $end
$var wire 1 *! readData [5] $end
$var wire 1 +! readData [4] $end
$var wire 1 ,! readData [3] $end
$var wire 1 -! readData [2] $end
$var wire 1 .! readData [1] $end
$var wire 1 /! readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 ^" writeEn $end
$var wire 1 _" inputData [15] $end
$var wire 1 `" inputData [14] $end
$var wire 1 a" inputData [13] $end
$var wire 1 b" inputData [12] $end
$var wire 1 c" inputData [11] $end
$var wire 1 d" inputData [10] $end
$var wire 1 e" inputData [9] $end
$var wire 1 f" inputData [8] $end
$var wire 1 g" inputData [7] $end
$var wire 1 h" inputData [6] $end
$var wire 1 i" inputData [5] $end
$var wire 1 j" inputData [4] $end
$var wire 1 k" inputData [3] $end
$var wire 1 l" inputData [2] $end
$var wire 1 m" inputData [1] $end
$var wire 1 n" inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 ~ q $end
$var wire 1 _" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 o" state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 !! q $end
$var wire 1 `" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 p" state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 "! q $end
$var wire 1 a" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 q" state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 #! q $end
$var wire 1 b" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 r" state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 $! q $end
$var wire 1 c" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 s" state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 %! q $end
$var wire 1 d" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 t" state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 &! q $end
$var wire 1 e" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 u" state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 '! q $end
$var wire 1 f" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 v" state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 (! q $end
$var wire 1 g" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 w" state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 )! q $end
$var wire 1 h" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 x" state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 *! q $end
$var wire 1 i" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 y" state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 +! q $end
$var wire 1 j" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 z" state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 ,! q $end
$var wire 1 k" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 {" state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 -! q $end
$var wire 1 l" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 |" state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 .! q $end
$var wire 1 m" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 }" state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 /! q $end
$var wire 1 n" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 ~" state $end
$upscope $end
$upscope $end

$scope module reg2 $end
$var parameter 32 !# REG_SIZE $end
$var wire 1 0! readData [15] $end
$var wire 1 1! readData [14] $end
$var wire 1 2! readData [13] $end
$var wire 1 3! readData [12] $end
$var wire 1 4! readData [11] $end
$var wire 1 5! readData [10] $end
$var wire 1 6! readData [9] $end
$var wire 1 7! readData [8] $end
$var wire 1 8! readData [7] $end
$var wire 1 9! readData [6] $end
$var wire 1 :! readData [5] $end
$var wire 1 ;! readData [4] $end
$var wire 1 <! readData [3] $end
$var wire 1 =! readData [2] $end
$var wire 1 >! readData [1] $end
$var wire 1 ?! readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 "# writeEn $end
$var wire 1 ## inputData [15] $end
$var wire 1 $# inputData [14] $end
$var wire 1 %# inputData [13] $end
$var wire 1 &# inputData [12] $end
$var wire 1 '# inputData [11] $end
$var wire 1 (# inputData [10] $end
$var wire 1 )# inputData [9] $end
$var wire 1 *# inputData [8] $end
$var wire 1 +# inputData [7] $end
$var wire 1 ,# inputData [6] $end
$var wire 1 -# inputData [5] $end
$var wire 1 .# inputData [4] $end
$var wire 1 /# inputData [3] $end
$var wire 1 0# inputData [2] $end
$var wire 1 1# inputData [1] $end
$var wire 1 2# inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 0! q $end
$var wire 1 ## d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 3# state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 1! q $end
$var wire 1 $# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 4# state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 2! q $end
$var wire 1 %# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 5# state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 3! q $end
$var wire 1 &# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 6# state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 4! q $end
$var wire 1 '# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 7# state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 5! q $end
$var wire 1 (# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 8# state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 6! q $end
$var wire 1 )# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 9# state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 7! q $end
$var wire 1 *# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 :# state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 8! q $end
$var wire 1 +# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 ;# state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 9! q $end
$var wire 1 ,# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 <# state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 :! q $end
$var wire 1 -# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 =# state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 ;! q $end
$var wire 1 .# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 ># state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 <! q $end
$var wire 1 /# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 ?# state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 =! q $end
$var wire 1 0# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 @# state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 >! q $end
$var wire 1 1# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 A# state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 ?! q $end
$var wire 1 2# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 B# state $end
$upscope $end
$upscope $end

$scope module reg3 $end
$var parameter 32 C# REG_SIZE $end
$var wire 1 @! readData [15] $end
$var wire 1 A! readData [14] $end
$var wire 1 B! readData [13] $end
$var wire 1 C! readData [12] $end
$var wire 1 D! readData [11] $end
$var wire 1 E! readData [10] $end
$var wire 1 F! readData [9] $end
$var wire 1 G! readData [8] $end
$var wire 1 H! readData [7] $end
$var wire 1 I! readData [6] $end
$var wire 1 J! readData [5] $end
$var wire 1 K! readData [4] $end
$var wire 1 L! readData [3] $end
$var wire 1 M! readData [2] $end
$var wire 1 N! readData [1] $end
$var wire 1 O! readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 D# writeEn $end
$var wire 1 E# inputData [15] $end
$var wire 1 F# inputData [14] $end
$var wire 1 G# inputData [13] $end
$var wire 1 H# inputData [12] $end
$var wire 1 I# inputData [11] $end
$var wire 1 J# inputData [10] $end
$var wire 1 K# inputData [9] $end
$var wire 1 L# inputData [8] $end
$var wire 1 M# inputData [7] $end
$var wire 1 N# inputData [6] $end
$var wire 1 O# inputData [5] $end
$var wire 1 P# inputData [4] $end
$var wire 1 Q# inputData [3] $end
$var wire 1 R# inputData [2] $end
$var wire 1 S# inputData [1] $end
$var wire 1 T# inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 @! q $end
$var wire 1 E# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 U# state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 A! q $end
$var wire 1 F# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 V# state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 B! q $end
$var wire 1 G# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 W# state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 C! q $end
$var wire 1 H# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 X# state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 D! q $end
$var wire 1 I# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 Y# state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 E! q $end
$var wire 1 J# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 Z# state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 F! q $end
$var wire 1 K# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 [# state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 G! q $end
$var wire 1 L# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 \# state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 H! q $end
$var wire 1 M# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 ]# state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 I! q $end
$var wire 1 N# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 ^# state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 J! q $end
$var wire 1 O# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 _# state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 K! q $end
$var wire 1 P# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 `# state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 L! q $end
$var wire 1 Q# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 a# state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 M! q $end
$var wire 1 R# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 b# state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 N! q $end
$var wire 1 S# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 c# state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 O! q $end
$var wire 1 T# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 d# state $end
$upscope $end
$upscope $end

$scope module reg4 $end
$var parameter 32 e# REG_SIZE $end
$var wire 1 P! readData [15] $end
$var wire 1 Q! readData [14] $end
$var wire 1 R! readData [13] $end
$var wire 1 S! readData [12] $end
$var wire 1 T! readData [11] $end
$var wire 1 U! readData [10] $end
$var wire 1 V! readData [9] $end
$var wire 1 W! readData [8] $end
$var wire 1 X! readData [7] $end
$var wire 1 Y! readData [6] $end
$var wire 1 Z! readData [5] $end
$var wire 1 [! readData [4] $end
$var wire 1 \! readData [3] $end
$var wire 1 ]! readData [2] $end
$var wire 1 ^! readData [1] $end
$var wire 1 _! readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 f# writeEn $end
$var wire 1 g# inputData [15] $end
$var wire 1 h# inputData [14] $end
$var wire 1 i# inputData [13] $end
$var wire 1 j# inputData [12] $end
$var wire 1 k# inputData [11] $end
$var wire 1 l# inputData [10] $end
$var wire 1 m# inputData [9] $end
$var wire 1 n# inputData [8] $end
$var wire 1 o# inputData [7] $end
$var wire 1 p# inputData [6] $end
$var wire 1 q# inputData [5] $end
$var wire 1 r# inputData [4] $end
$var wire 1 s# inputData [3] $end
$var wire 1 t# inputData [2] $end
$var wire 1 u# inputData [1] $end
$var wire 1 v# inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 P! q $end
$var wire 1 g# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 w# state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 Q! q $end
$var wire 1 h# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 x# state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 R! q $end
$var wire 1 i# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 y# state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 S! q $end
$var wire 1 j# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 z# state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 T! q $end
$var wire 1 k# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 {# state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 U! q $end
$var wire 1 l# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 |# state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 V! q $end
$var wire 1 m# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 }# state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 W! q $end
$var wire 1 n# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 ~# state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 X! q $end
$var wire 1 o# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 !$ state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 Y! q $end
$var wire 1 p# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 "$ state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 Z! q $end
$var wire 1 q# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 #$ state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 [! q $end
$var wire 1 r# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 $$ state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 \! q $end
$var wire 1 s# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 %$ state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 ]! q $end
$var wire 1 t# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 &$ state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 ^! q $end
$var wire 1 u# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 '$ state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 _! q $end
$var wire 1 v# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 ($ state $end
$upscope $end
$upscope $end

$scope module reg5 $end
$var parameter 32 )$ REG_SIZE $end
$var wire 1 `! readData [15] $end
$var wire 1 a! readData [14] $end
$var wire 1 b! readData [13] $end
$var wire 1 c! readData [12] $end
$var wire 1 d! readData [11] $end
$var wire 1 e! readData [10] $end
$var wire 1 f! readData [9] $end
$var wire 1 g! readData [8] $end
$var wire 1 h! readData [7] $end
$var wire 1 i! readData [6] $end
$var wire 1 j! readData [5] $end
$var wire 1 k! readData [4] $end
$var wire 1 l! readData [3] $end
$var wire 1 m! readData [2] $end
$var wire 1 n! readData [1] $end
$var wire 1 o! readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 *$ writeEn $end
$var wire 1 +$ inputData [15] $end
$var wire 1 ,$ inputData [14] $end
$var wire 1 -$ inputData [13] $end
$var wire 1 .$ inputData [12] $end
$var wire 1 /$ inputData [11] $end
$var wire 1 0$ inputData [10] $end
$var wire 1 1$ inputData [9] $end
$var wire 1 2$ inputData [8] $end
$var wire 1 3$ inputData [7] $end
$var wire 1 4$ inputData [6] $end
$var wire 1 5$ inputData [5] $end
$var wire 1 6$ inputData [4] $end
$var wire 1 7$ inputData [3] $end
$var wire 1 8$ inputData [2] $end
$var wire 1 9$ inputData [1] $end
$var wire 1 :$ inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 `! q $end
$var wire 1 +$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 ;$ state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 a! q $end
$var wire 1 ,$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 <$ state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 b! q $end
$var wire 1 -$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 =$ state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 c! q $end
$var wire 1 .$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 >$ state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 d! q $end
$var wire 1 /$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 ?$ state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 e! q $end
$var wire 1 0$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 @$ state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 f! q $end
$var wire 1 1$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 A$ state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 g! q $end
$var wire 1 2$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 B$ state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 h! q $end
$var wire 1 3$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 C$ state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 i! q $end
$var wire 1 4$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 D$ state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 j! q $end
$var wire 1 5$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 E$ state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 k! q $end
$var wire 1 6$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 F$ state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 l! q $end
$var wire 1 7$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 G$ state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 m! q $end
$var wire 1 8$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 H$ state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 n! q $end
$var wire 1 9$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 I$ state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 o! q $end
$var wire 1 :$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 J$ state $end
$upscope $end
$upscope $end

$scope module reg6 $end
$var parameter 32 K$ REG_SIZE $end
$var wire 1 p! readData [15] $end
$var wire 1 q! readData [14] $end
$var wire 1 r! readData [13] $end
$var wire 1 s! readData [12] $end
$var wire 1 t! readData [11] $end
$var wire 1 u! readData [10] $end
$var wire 1 v! readData [9] $end
$var wire 1 w! readData [8] $end
$var wire 1 x! readData [7] $end
$var wire 1 y! readData [6] $end
$var wire 1 z! readData [5] $end
$var wire 1 {! readData [4] $end
$var wire 1 |! readData [3] $end
$var wire 1 }! readData [2] $end
$var wire 1 ~! readData [1] $end
$var wire 1 !" readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 L$ writeEn $end
$var wire 1 M$ inputData [15] $end
$var wire 1 N$ inputData [14] $end
$var wire 1 O$ inputData [13] $end
$var wire 1 P$ inputData [12] $end
$var wire 1 Q$ inputData [11] $end
$var wire 1 R$ inputData [10] $end
$var wire 1 S$ inputData [9] $end
$var wire 1 T$ inputData [8] $end
$var wire 1 U$ inputData [7] $end
$var wire 1 V$ inputData [6] $end
$var wire 1 W$ inputData [5] $end
$var wire 1 X$ inputData [4] $end
$var wire 1 Y$ inputData [3] $end
$var wire 1 Z$ inputData [2] $end
$var wire 1 [$ inputData [1] $end
$var wire 1 \$ inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 p! q $end
$var wire 1 M$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 ]$ state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 q! q $end
$var wire 1 N$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 ^$ state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 r! q $end
$var wire 1 O$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 _$ state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 s! q $end
$var wire 1 P$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 `$ state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 t! q $end
$var wire 1 Q$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 a$ state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 u! q $end
$var wire 1 R$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 b$ state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 v! q $end
$var wire 1 S$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 c$ state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 w! q $end
$var wire 1 T$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 d$ state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 x! q $end
$var wire 1 U$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 e$ state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 y! q $end
$var wire 1 V$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 f$ state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 z! q $end
$var wire 1 W$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 g$ state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 {! q $end
$var wire 1 X$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 h$ state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 |! q $end
$var wire 1 Y$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 i$ state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 }! q $end
$var wire 1 Z$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 j$ state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 ~! q $end
$var wire 1 [$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 k$ state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 !" q $end
$var wire 1 \$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 l$ state $end
$upscope $end
$upscope $end

$scope module reg7 $end
$var parameter 32 m$ REG_SIZE $end
$var wire 1 "" readData [15] $end
$var wire 1 #" readData [14] $end
$var wire 1 $" readData [13] $end
$var wire 1 %" readData [12] $end
$var wire 1 &" readData [11] $end
$var wire 1 '" readData [10] $end
$var wire 1 (" readData [9] $end
$var wire 1 )" readData [8] $end
$var wire 1 *" readData [7] $end
$var wire 1 +" readData [6] $end
$var wire 1 ," readData [5] $end
$var wire 1 -" readData [4] $end
$var wire 1 ." readData [3] $end
$var wire 1 /" readData [2] $end
$var wire 1 0" readData [1] $end
$var wire 1 1" readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 n$ writeEn $end
$var wire 1 o$ inputData [15] $end
$var wire 1 p$ inputData [14] $end
$var wire 1 q$ inputData [13] $end
$var wire 1 r$ inputData [12] $end
$var wire 1 s$ inputData [11] $end
$var wire 1 t$ inputData [10] $end
$var wire 1 u$ inputData [9] $end
$var wire 1 v$ inputData [8] $end
$var wire 1 w$ inputData [7] $end
$var wire 1 x$ inputData [6] $end
$var wire 1 y$ inputData [5] $end
$var wire 1 z$ inputData [4] $end
$var wire 1 {$ inputData [3] $end
$var wire 1 |$ inputData [2] $end
$var wire 1 }$ inputData [1] $end
$var wire 1 ~$ inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 "" q $end
$var wire 1 o$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 !% state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 #" q $end
$var wire 1 p$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 "% state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 $" q $end
$var wire 1 q$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 #% state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 %" q $end
$var wire 1 r$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 $% state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 &" q $end
$var wire 1 s$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 %% state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 '" q $end
$var wire 1 t$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 &% state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 (" q $end
$var wire 1 u$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 '% state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 )" q $end
$var wire 1 v$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 (% state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 *" q $end
$var wire 1 w$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 )% state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 +" q $end
$var wire 1 x$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 *% state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 ," q $end
$var wire 1 y$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 +% state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 -" q $end
$var wire 1 z$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 ,% state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 ." q $end
$var wire 1 {$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 -% state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 /" q $end
$var wire 1 |$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 .% state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 0" q $end
$var wire 1 }$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 /% state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 1" q $end
$var wire 1 ~$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var reg 1 0% state $end
$upscope $end
$upscope $end

$scope module mux1 $end
$var parameter 32 1% OPERAND_WIDTH $end
$var wire 1 ! out [15] $end
$var wire 1 " out [14] $end
$var wire 1 # out [13] $end
$var wire 1 $ out [12] $end
$var wire 1 % out [11] $end
$var wire 1 & out [10] $end
$var wire 1 ' out [9] $end
$var wire 1 ( out [8] $end
$var wire 1 ) out [7] $end
$var wire 1 * out [6] $end
$var wire 1 + out [5] $end
$var wire 1 , out [4] $end
$var wire 1 - out [3] $end
$var wire 1 . out [2] $end
$var wire 1 / out [1] $end
$var wire 1 0 out [0] $end
$var wire 1 n inA [15] $end
$var wire 1 o inA [14] $end
$var wire 1 p inA [13] $end
$var wire 1 q inA [12] $end
$var wire 1 r inA [11] $end
$var wire 1 s inA [10] $end
$var wire 1 t inA [9] $end
$var wire 1 u inA [8] $end
$var wire 1 v inA [7] $end
$var wire 1 w inA [6] $end
$var wire 1 x inA [5] $end
$var wire 1 y inA [4] $end
$var wire 1 z inA [3] $end
$var wire 1 { inA [2] $end
$var wire 1 | inA [1] $end
$var wire 1 } inA [0] $end
$var wire 1 ~ inB [15] $end
$var wire 1 !! inB [14] $end
$var wire 1 "! inB [13] $end
$var wire 1 #! inB [12] $end
$var wire 1 $! inB [11] $end
$var wire 1 %! inB [10] $end
$var wire 1 &! inB [9] $end
$var wire 1 '! inB [8] $end
$var wire 1 (! inB [7] $end
$var wire 1 )! inB [6] $end
$var wire 1 *! inB [5] $end
$var wire 1 +! inB [4] $end
$var wire 1 ,! inB [3] $end
$var wire 1 -! inB [2] $end
$var wire 1 .! inB [1] $end
$var wire 1 /! inB [0] $end
$var wire 1 0! inC [15] $end
$var wire 1 1! inC [14] $end
$var wire 1 2! inC [13] $end
$var wire 1 3! inC [12] $end
$var wire 1 4! inC [11] $end
$var wire 1 5! inC [10] $end
$var wire 1 6! inC [9] $end
$var wire 1 7! inC [8] $end
$var wire 1 8! inC [7] $end
$var wire 1 9! inC [6] $end
$var wire 1 :! inC [5] $end
$var wire 1 ;! inC [4] $end
$var wire 1 <! inC [3] $end
$var wire 1 =! inC [2] $end
$var wire 1 >! inC [1] $end
$var wire 1 ?! inC [0] $end
$var wire 1 @! inD [15] $end
$var wire 1 A! inD [14] $end
$var wire 1 B! inD [13] $end
$var wire 1 C! inD [12] $end
$var wire 1 D! inD [11] $end
$var wire 1 E! inD [10] $end
$var wire 1 F! inD [9] $end
$var wire 1 G! inD [8] $end
$var wire 1 H! inD [7] $end
$var wire 1 I! inD [6] $end
$var wire 1 J! inD [5] $end
$var wire 1 K! inD [4] $end
$var wire 1 L! inD [3] $end
$var wire 1 M! inD [2] $end
$var wire 1 N! inD [1] $end
$var wire 1 O! inD [0] $end
$var wire 1 P! inE [15] $end
$var wire 1 Q! inE [14] $end
$var wire 1 R! inE [13] $end
$var wire 1 S! inE [12] $end
$var wire 1 T! inE [11] $end
$var wire 1 U! inE [10] $end
$var wire 1 V! inE [9] $end
$var wire 1 W! inE [8] $end
$var wire 1 X! inE [7] $end
$var wire 1 Y! inE [6] $end
$var wire 1 Z! inE [5] $end
$var wire 1 [! inE [4] $end
$var wire 1 \! inE [3] $end
$var wire 1 ]! inE [2] $end
$var wire 1 ^! inE [1] $end
$var wire 1 _! inE [0] $end
$var wire 1 `! inF [15] $end
$var wire 1 a! inF [14] $end
$var wire 1 b! inF [13] $end
$var wire 1 c! inF [12] $end
$var wire 1 d! inF [11] $end
$var wire 1 e! inF [10] $end
$var wire 1 f! inF [9] $end
$var wire 1 g! inF [8] $end
$var wire 1 h! inF [7] $end
$var wire 1 i! inF [6] $end
$var wire 1 j! inF [5] $end
$var wire 1 k! inF [4] $end
$var wire 1 l! inF [3] $end
$var wire 1 m! inF [2] $end
$var wire 1 n! inF [1] $end
$var wire 1 o! inF [0] $end
$var wire 1 p! inG [15] $end
$var wire 1 q! inG [14] $end
$var wire 1 r! inG [13] $end
$var wire 1 s! inG [12] $end
$var wire 1 t! inG [11] $end
$var wire 1 u! inG [10] $end
$var wire 1 v! inG [9] $end
$var wire 1 w! inG [8] $end
$var wire 1 x! inG [7] $end
$var wire 1 y! inG [6] $end
$var wire 1 z! inG [5] $end
$var wire 1 {! inG [4] $end
$var wire 1 |! inG [3] $end
$var wire 1 }! inG [2] $end
$var wire 1 ~! inG [1] $end
$var wire 1 !" inG [0] $end
$var wire 1 "" inH [15] $end
$var wire 1 #" inH [14] $end
$var wire 1 $" inH [13] $end
$var wire 1 %" inH [12] $end
$var wire 1 &" inH [11] $end
$var wire 1 '" inH [10] $end
$var wire 1 (" inH [9] $end
$var wire 1 )" inH [8] $end
$var wire 1 *" inH [7] $end
$var wire 1 +" inH [6] $end
$var wire 1 ," inH [5] $end
$var wire 1 -" inH [4] $end
$var wire 1 ." inH [3] $end
$var wire 1 /" inH [2] $end
$var wire 1 0" inH [1] $end
$var wire 1 1" inH [0] $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end

$scope module mux[15] $end
$var wire 1 ! out $end
$var wire 1 n inA $end
$var wire 1 ~ inB $end
$var wire 1 0! inC $end
$var wire 1 @! inD $end
$var wire 1 P! inE $end
$var wire 1 `! inF $end
$var wire 1 p! inG $end
$var wire 1 "" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 2% outA $end
$var wire 1 3% outB $end

$scope module muxA $end
$var wire 1 2% out $end
$var wire 1 n inA $end
$var wire 1 ~ inB $end
$var wire 1 0! inC $end
$var wire 1 @! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 4% w1 $end
$var wire 1 5% w2 $end

$scope module mux_ab $end
$var wire 1 4% out $end
$var wire 1 n inA $end
$var wire 1 ~ inB $end
$var wire 1 N s $end
$var wire 1 6% wA $end
$var wire 1 7% wnotS $end
$var wire 1 8% wB $end

$scope module notA $end
$var wire 1 7% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 6% out $end
$var wire 1 n in1 $end
$var wire 1 7% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 8% out $end
$var wire 1 ~ in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 4% out $end
$var wire 1 6% in1 $end
$var wire 1 8% in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 5% out $end
$var wire 1 0! inA $end
$var wire 1 @! inB $end
$var wire 1 N s $end
$var wire 1 9% wA $end
$var wire 1 :% wnotS $end
$var wire 1 ;% wB $end

$scope module notA $end
$var wire 1 :% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 9% out $end
$var wire 1 0! in1 $end
$var wire 1 :% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ;% out $end
$var wire 1 @! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 5% out $end
$var wire 1 9% in1 $end
$var wire 1 ;% in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 2% out $end
$var wire 1 4% inA $end
$var wire 1 5% inB $end
$var wire 1 M s $end
$var wire 1 <% wA $end
$var wire 1 =% wnotS $end
$var wire 1 >% wB $end

$scope module notA $end
$var wire 1 =% out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 <% out $end
$var wire 1 4% in1 $end
$var wire 1 =% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 >% out $end
$var wire 1 5% in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 2% out $end
$var wire 1 <% in1 $end
$var wire 1 >% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 3% out $end
$var wire 1 P! inA $end
$var wire 1 `! inB $end
$var wire 1 p! inC $end
$var wire 1 "" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 ?% w1 $end
$var wire 1 @% w2 $end

$scope module mux_ab $end
$var wire 1 ?% out $end
$var wire 1 P! inA $end
$var wire 1 `! inB $end
$var wire 1 N s $end
$var wire 1 A% wA $end
$var wire 1 B% wnotS $end
$var wire 1 C% wB $end

$scope module notA $end
$var wire 1 B% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 A% out $end
$var wire 1 P! in1 $end
$var wire 1 B% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 C% out $end
$var wire 1 `! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 ?% out $end
$var wire 1 A% in1 $end
$var wire 1 C% in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 @% out $end
$var wire 1 p! inA $end
$var wire 1 "" inB $end
$var wire 1 N s $end
$var wire 1 D% wA $end
$var wire 1 E% wnotS $end
$var wire 1 F% wB $end

$scope module notA $end
$var wire 1 E% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 D% out $end
$var wire 1 p! in1 $end
$var wire 1 E% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 F% out $end
$var wire 1 "" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 @% out $end
$var wire 1 D% in1 $end
$var wire 1 F% in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 3% out $end
$var wire 1 ?% inA $end
$var wire 1 @% inB $end
$var wire 1 M s $end
$var wire 1 G% wA $end
$var wire 1 H% wnotS $end
$var wire 1 I% wB $end

$scope module notA $end
$var wire 1 H% out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 G% out $end
$var wire 1 ?% in1 $end
$var wire 1 H% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 I% out $end
$var wire 1 @% in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 3% out $end
$var wire 1 G% in1 $end
$var wire 1 I% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 ! out $end
$var wire 1 2% inA $end
$var wire 1 3% inB $end
$var wire 1 L s $end
$var wire 1 J% wA $end
$var wire 1 K% wnotS $end
$var wire 1 L% wB $end

$scope module notA $end
$var wire 1 K% out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 J% out $end
$var wire 1 2% in1 $end
$var wire 1 K% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 L% out $end
$var wire 1 3% in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 ! out $end
$var wire 1 J% in1 $end
$var wire 1 L% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[14] $end
$var wire 1 " out $end
$var wire 1 o inA $end
$var wire 1 !! inB $end
$var wire 1 1! inC $end
$var wire 1 A! inD $end
$var wire 1 Q! inE $end
$var wire 1 a! inF $end
$var wire 1 q! inG $end
$var wire 1 #" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 M% outA $end
$var wire 1 N% outB $end

$scope module muxA $end
$var wire 1 M% out $end
$var wire 1 o inA $end
$var wire 1 !! inB $end
$var wire 1 1! inC $end
$var wire 1 A! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 O% w1 $end
$var wire 1 P% w2 $end

$scope module mux_ab $end
$var wire 1 O% out $end
$var wire 1 o inA $end
$var wire 1 !! inB $end
$var wire 1 N s $end
$var wire 1 Q% wA $end
$var wire 1 R% wnotS $end
$var wire 1 S% wB $end

$scope module notA $end
$var wire 1 R% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 Q% out $end
$var wire 1 o in1 $end
$var wire 1 R% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 S% out $end
$var wire 1 !! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 O% out $end
$var wire 1 Q% in1 $end
$var wire 1 S% in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 P% out $end
$var wire 1 1! inA $end
$var wire 1 A! inB $end
$var wire 1 N s $end
$var wire 1 T% wA $end
$var wire 1 U% wnotS $end
$var wire 1 V% wB $end

$scope module notA $end
$var wire 1 U% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 T% out $end
$var wire 1 1! in1 $end
$var wire 1 U% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 V% out $end
$var wire 1 A! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 P% out $end
$var wire 1 T% in1 $end
$var wire 1 V% in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 M% out $end
$var wire 1 O% inA $end
$var wire 1 P% inB $end
$var wire 1 M s $end
$var wire 1 W% wA $end
$var wire 1 X% wnotS $end
$var wire 1 Y% wB $end

$scope module notA $end
$var wire 1 X% out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 W% out $end
$var wire 1 O% in1 $end
$var wire 1 X% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 Y% out $end
$var wire 1 P% in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 M% out $end
$var wire 1 W% in1 $end
$var wire 1 Y% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 N% out $end
$var wire 1 Q! inA $end
$var wire 1 a! inB $end
$var wire 1 q! inC $end
$var wire 1 #" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 Z% w1 $end
$var wire 1 [% w2 $end

$scope module mux_ab $end
$var wire 1 Z% out $end
$var wire 1 Q! inA $end
$var wire 1 a! inB $end
$var wire 1 N s $end
$var wire 1 \% wA $end
$var wire 1 ]% wnotS $end
$var wire 1 ^% wB $end

$scope module notA $end
$var wire 1 ]% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 \% out $end
$var wire 1 Q! in1 $end
$var wire 1 ]% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ^% out $end
$var wire 1 a! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 Z% out $end
$var wire 1 \% in1 $end
$var wire 1 ^% in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 [% out $end
$var wire 1 q! inA $end
$var wire 1 #" inB $end
$var wire 1 N s $end
$var wire 1 _% wA $end
$var wire 1 `% wnotS $end
$var wire 1 a% wB $end

$scope module notA $end
$var wire 1 `% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 _% out $end
$var wire 1 q! in1 $end
$var wire 1 `% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 a% out $end
$var wire 1 #" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 [% out $end
$var wire 1 _% in1 $end
$var wire 1 a% in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 N% out $end
$var wire 1 Z% inA $end
$var wire 1 [% inB $end
$var wire 1 M s $end
$var wire 1 b% wA $end
$var wire 1 c% wnotS $end
$var wire 1 d% wB $end

$scope module notA $end
$var wire 1 c% out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 b% out $end
$var wire 1 Z% in1 $end
$var wire 1 c% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 d% out $end
$var wire 1 [% in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 N% out $end
$var wire 1 b% in1 $end
$var wire 1 d% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 " out $end
$var wire 1 M% inA $end
$var wire 1 N% inB $end
$var wire 1 L s $end
$var wire 1 e% wA $end
$var wire 1 f% wnotS $end
$var wire 1 g% wB $end

$scope module notA $end
$var wire 1 f% out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 e% out $end
$var wire 1 M% in1 $end
$var wire 1 f% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 g% out $end
$var wire 1 N% in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 " out $end
$var wire 1 e% in1 $end
$var wire 1 g% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[13] $end
$var wire 1 # out $end
$var wire 1 p inA $end
$var wire 1 "! inB $end
$var wire 1 2! inC $end
$var wire 1 B! inD $end
$var wire 1 R! inE $end
$var wire 1 b! inF $end
$var wire 1 r! inG $end
$var wire 1 $" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 h% outA $end
$var wire 1 i% outB $end

$scope module muxA $end
$var wire 1 h% out $end
$var wire 1 p inA $end
$var wire 1 "! inB $end
$var wire 1 2! inC $end
$var wire 1 B! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 j% w1 $end
$var wire 1 k% w2 $end

$scope module mux_ab $end
$var wire 1 j% out $end
$var wire 1 p inA $end
$var wire 1 "! inB $end
$var wire 1 N s $end
$var wire 1 l% wA $end
$var wire 1 m% wnotS $end
$var wire 1 n% wB $end

$scope module notA $end
$var wire 1 m% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 l% out $end
$var wire 1 p in1 $end
$var wire 1 m% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 n% out $end
$var wire 1 "! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 j% out $end
$var wire 1 l% in1 $end
$var wire 1 n% in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 k% out $end
$var wire 1 2! inA $end
$var wire 1 B! inB $end
$var wire 1 N s $end
$var wire 1 o% wA $end
$var wire 1 p% wnotS $end
$var wire 1 q% wB $end

$scope module notA $end
$var wire 1 p% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 o% out $end
$var wire 1 2! in1 $end
$var wire 1 p% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 q% out $end
$var wire 1 B! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 k% out $end
$var wire 1 o% in1 $end
$var wire 1 q% in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 h% out $end
$var wire 1 j% inA $end
$var wire 1 k% inB $end
$var wire 1 M s $end
$var wire 1 r% wA $end
$var wire 1 s% wnotS $end
$var wire 1 t% wB $end

$scope module notA $end
$var wire 1 s% out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 r% out $end
$var wire 1 j% in1 $end
$var wire 1 s% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 t% out $end
$var wire 1 k% in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 h% out $end
$var wire 1 r% in1 $end
$var wire 1 t% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 i% out $end
$var wire 1 R! inA $end
$var wire 1 b! inB $end
$var wire 1 r! inC $end
$var wire 1 $" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 u% w1 $end
$var wire 1 v% w2 $end

$scope module mux_ab $end
$var wire 1 u% out $end
$var wire 1 R! inA $end
$var wire 1 b! inB $end
$var wire 1 N s $end
$var wire 1 w% wA $end
$var wire 1 x% wnotS $end
$var wire 1 y% wB $end

$scope module notA $end
$var wire 1 x% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 w% out $end
$var wire 1 R! in1 $end
$var wire 1 x% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 y% out $end
$var wire 1 b! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 u% out $end
$var wire 1 w% in1 $end
$var wire 1 y% in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 v% out $end
$var wire 1 r! inA $end
$var wire 1 $" inB $end
$var wire 1 N s $end
$var wire 1 z% wA $end
$var wire 1 {% wnotS $end
$var wire 1 |% wB $end

$scope module notA $end
$var wire 1 {% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 z% out $end
$var wire 1 r! in1 $end
$var wire 1 {% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 |% out $end
$var wire 1 $" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 v% out $end
$var wire 1 z% in1 $end
$var wire 1 |% in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 i% out $end
$var wire 1 u% inA $end
$var wire 1 v% inB $end
$var wire 1 M s $end
$var wire 1 }% wA $end
$var wire 1 ~% wnotS $end
$var wire 1 !& wB $end

$scope module notA $end
$var wire 1 ~% out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 }% out $end
$var wire 1 u% in1 $end
$var wire 1 ~% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 !& out $end
$var wire 1 v% in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 i% out $end
$var wire 1 }% in1 $end
$var wire 1 !& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 # out $end
$var wire 1 h% inA $end
$var wire 1 i% inB $end
$var wire 1 L s $end
$var wire 1 "& wA $end
$var wire 1 #& wnotS $end
$var wire 1 $& wB $end

$scope module notA $end
$var wire 1 #& out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 "& out $end
$var wire 1 h% in1 $end
$var wire 1 #& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 $& out $end
$var wire 1 i% in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 # out $end
$var wire 1 "& in1 $end
$var wire 1 $& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[12] $end
$var wire 1 $ out $end
$var wire 1 q inA $end
$var wire 1 #! inB $end
$var wire 1 3! inC $end
$var wire 1 C! inD $end
$var wire 1 S! inE $end
$var wire 1 c! inF $end
$var wire 1 s! inG $end
$var wire 1 %" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 %& outA $end
$var wire 1 && outB $end

$scope module muxA $end
$var wire 1 %& out $end
$var wire 1 q inA $end
$var wire 1 #! inB $end
$var wire 1 3! inC $end
$var wire 1 C! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 '& w1 $end
$var wire 1 (& w2 $end

$scope module mux_ab $end
$var wire 1 '& out $end
$var wire 1 q inA $end
$var wire 1 #! inB $end
$var wire 1 N s $end
$var wire 1 )& wA $end
$var wire 1 *& wnotS $end
$var wire 1 +& wB $end

$scope module notA $end
$var wire 1 *& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 )& out $end
$var wire 1 q in1 $end
$var wire 1 *& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 +& out $end
$var wire 1 #! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 '& out $end
$var wire 1 )& in1 $end
$var wire 1 +& in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 (& out $end
$var wire 1 3! inA $end
$var wire 1 C! inB $end
$var wire 1 N s $end
$var wire 1 ,& wA $end
$var wire 1 -& wnotS $end
$var wire 1 .& wB $end

$scope module notA $end
$var wire 1 -& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ,& out $end
$var wire 1 3! in1 $end
$var wire 1 -& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 .& out $end
$var wire 1 C! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 (& out $end
$var wire 1 ,& in1 $end
$var wire 1 .& in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 %& out $end
$var wire 1 '& inA $end
$var wire 1 (& inB $end
$var wire 1 M s $end
$var wire 1 /& wA $end
$var wire 1 0& wnotS $end
$var wire 1 1& wB $end

$scope module notA $end
$var wire 1 0& out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 /& out $end
$var wire 1 '& in1 $end
$var wire 1 0& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 1& out $end
$var wire 1 (& in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 %& out $end
$var wire 1 /& in1 $end
$var wire 1 1& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 && out $end
$var wire 1 S! inA $end
$var wire 1 c! inB $end
$var wire 1 s! inC $end
$var wire 1 %" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 2& w1 $end
$var wire 1 3& w2 $end

$scope module mux_ab $end
$var wire 1 2& out $end
$var wire 1 S! inA $end
$var wire 1 c! inB $end
$var wire 1 N s $end
$var wire 1 4& wA $end
$var wire 1 5& wnotS $end
$var wire 1 6& wB $end

$scope module notA $end
$var wire 1 5& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 4& out $end
$var wire 1 S! in1 $end
$var wire 1 5& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 6& out $end
$var wire 1 c! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 2& out $end
$var wire 1 4& in1 $end
$var wire 1 6& in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 3& out $end
$var wire 1 s! inA $end
$var wire 1 %" inB $end
$var wire 1 N s $end
$var wire 1 7& wA $end
$var wire 1 8& wnotS $end
$var wire 1 9& wB $end

$scope module notA $end
$var wire 1 8& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 7& out $end
$var wire 1 s! in1 $end
$var wire 1 8& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 9& out $end
$var wire 1 %" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 3& out $end
$var wire 1 7& in1 $end
$var wire 1 9& in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 && out $end
$var wire 1 2& inA $end
$var wire 1 3& inB $end
$var wire 1 M s $end
$var wire 1 :& wA $end
$var wire 1 ;& wnotS $end
$var wire 1 <& wB $end

$scope module notA $end
$var wire 1 ;& out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 :& out $end
$var wire 1 2& in1 $end
$var wire 1 ;& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 <& out $end
$var wire 1 3& in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 && out $end
$var wire 1 :& in1 $end
$var wire 1 <& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 $ out $end
$var wire 1 %& inA $end
$var wire 1 && inB $end
$var wire 1 L s $end
$var wire 1 =& wA $end
$var wire 1 >& wnotS $end
$var wire 1 ?& wB $end

$scope module notA $end
$var wire 1 >& out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 =& out $end
$var wire 1 %& in1 $end
$var wire 1 >& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ?& out $end
$var wire 1 && in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 $ out $end
$var wire 1 =& in1 $end
$var wire 1 ?& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[11] $end
$var wire 1 % out $end
$var wire 1 r inA $end
$var wire 1 $! inB $end
$var wire 1 4! inC $end
$var wire 1 D! inD $end
$var wire 1 T! inE $end
$var wire 1 d! inF $end
$var wire 1 t! inG $end
$var wire 1 &" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 @& outA $end
$var wire 1 A& outB $end

$scope module muxA $end
$var wire 1 @& out $end
$var wire 1 r inA $end
$var wire 1 $! inB $end
$var wire 1 4! inC $end
$var wire 1 D! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 B& w1 $end
$var wire 1 C& w2 $end

$scope module mux_ab $end
$var wire 1 B& out $end
$var wire 1 r inA $end
$var wire 1 $! inB $end
$var wire 1 N s $end
$var wire 1 D& wA $end
$var wire 1 E& wnotS $end
$var wire 1 F& wB $end

$scope module notA $end
$var wire 1 E& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 D& out $end
$var wire 1 r in1 $end
$var wire 1 E& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 F& out $end
$var wire 1 $! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 B& out $end
$var wire 1 D& in1 $end
$var wire 1 F& in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 C& out $end
$var wire 1 4! inA $end
$var wire 1 D! inB $end
$var wire 1 N s $end
$var wire 1 G& wA $end
$var wire 1 H& wnotS $end
$var wire 1 I& wB $end

$scope module notA $end
$var wire 1 H& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 G& out $end
$var wire 1 4! in1 $end
$var wire 1 H& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 I& out $end
$var wire 1 D! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 C& out $end
$var wire 1 G& in1 $end
$var wire 1 I& in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 @& out $end
$var wire 1 B& inA $end
$var wire 1 C& inB $end
$var wire 1 M s $end
$var wire 1 J& wA $end
$var wire 1 K& wnotS $end
$var wire 1 L& wB $end

$scope module notA $end
$var wire 1 K& out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 J& out $end
$var wire 1 B& in1 $end
$var wire 1 K& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 L& out $end
$var wire 1 C& in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 @& out $end
$var wire 1 J& in1 $end
$var wire 1 L& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 A& out $end
$var wire 1 T! inA $end
$var wire 1 d! inB $end
$var wire 1 t! inC $end
$var wire 1 &" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 M& w1 $end
$var wire 1 N& w2 $end

$scope module mux_ab $end
$var wire 1 M& out $end
$var wire 1 T! inA $end
$var wire 1 d! inB $end
$var wire 1 N s $end
$var wire 1 O& wA $end
$var wire 1 P& wnotS $end
$var wire 1 Q& wB $end

$scope module notA $end
$var wire 1 P& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 O& out $end
$var wire 1 T! in1 $end
$var wire 1 P& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 Q& out $end
$var wire 1 d! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 M& out $end
$var wire 1 O& in1 $end
$var wire 1 Q& in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 N& out $end
$var wire 1 t! inA $end
$var wire 1 &" inB $end
$var wire 1 N s $end
$var wire 1 R& wA $end
$var wire 1 S& wnotS $end
$var wire 1 T& wB $end

$scope module notA $end
$var wire 1 S& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 R& out $end
$var wire 1 t! in1 $end
$var wire 1 S& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 T& out $end
$var wire 1 &" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 N& out $end
$var wire 1 R& in1 $end
$var wire 1 T& in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 A& out $end
$var wire 1 M& inA $end
$var wire 1 N& inB $end
$var wire 1 M s $end
$var wire 1 U& wA $end
$var wire 1 V& wnotS $end
$var wire 1 W& wB $end

$scope module notA $end
$var wire 1 V& out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 U& out $end
$var wire 1 M& in1 $end
$var wire 1 V& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 W& out $end
$var wire 1 N& in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 A& out $end
$var wire 1 U& in1 $end
$var wire 1 W& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 % out $end
$var wire 1 @& inA $end
$var wire 1 A& inB $end
$var wire 1 L s $end
$var wire 1 X& wA $end
$var wire 1 Y& wnotS $end
$var wire 1 Z& wB $end

$scope module notA $end
$var wire 1 Y& out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 X& out $end
$var wire 1 @& in1 $end
$var wire 1 Y& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 Z& out $end
$var wire 1 A& in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 % out $end
$var wire 1 X& in1 $end
$var wire 1 Z& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[10] $end
$var wire 1 & out $end
$var wire 1 s inA $end
$var wire 1 %! inB $end
$var wire 1 5! inC $end
$var wire 1 E! inD $end
$var wire 1 U! inE $end
$var wire 1 e! inF $end
$var wire 1 u! inG $end
$var wire 1 '" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 [& outA $end
$var wire 1 \& outB $end

$scope module muxA $end
$var wire 1 [& out $end
$var wire 1 s inA $end
$var wire 1 %! inB $end
$var wire 1 5! inC $end
$var wire 1 E! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 ]& w1 $end
$var wire 1 ^& w2 $end

$scope module mux_ab $end
$var wire 1 ]& out $end
$var wire 1 s inA $end
$var wire 1 %! inB $end
$var wire 1 N s $end
$var wire 1 _& wA $end
$var wire 1 `& wnotS $end
$var wire 1 a& wB $end

$scope module notA $end
$var wire 1 `& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 _& out $end
$var wire 1 s in1 $end
$var wire 1 `& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 a& out $end
$var wire 1 %! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 ]& out $end
$var wire 1 _& in1 $end
$var wire 1 a& in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 ^& out $end
$var wire 1 5! inA $end
$var wire 1 E! inB $end
$var wire 1 N s $end
$var wire 1 b& wA $end
$var wire 1 c& wnotS $end
$var wire 1 d& wB $end

$scope module notA $end
$var wire 1 c& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 b& out $end
$var wire 1 5! in1 $end
$var wire 1 c& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 d& out $end
$var wire 1 E! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 ^& out $end
$var wire 1 b& in1 $end
$var wire 1 d& in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 [& out $end
$var wire 1 ]& inA $end
$var wire 1 ^& inB $end
$var wire 1 M s $end
$var wire 1 e& wA $end
$var wire 1 f& wnotS $end
$var wire 1 g& wB $end

$scope module notA $end
$var wire 1 f& out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 e& out $end
$var wire 1 ]& in1 $end
$var wire 1 f& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 g& out $end
$var wire 1 ^& in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 [& out $end
$var wire 1 e& in1 $end
$var wire 1 g& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 \& out $end
$var wire 1 U! inA $end
$var wire 1 e! inB $end
$var wire 1 u! inC $end
$var wire 1 '" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 h& w1 $end
$var wire 1 i& w2 $end

$scope module mux_ab $end
$var wire 1 h& out $end
$var wire 1 U! inA $end
$var wire 1 e! inB $end
$var wire 1 N s $end
$var wire 1 j& wA $end
$var wire 1 k& wnotS $end
$var wire 1 l& wB $end

$scope module notA $end
$var wire 1 k& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 j& out $end
$var wire 1 U! in1 $end
$var wire 1 k& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 l& out $end
$var wire 1 e! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 h& out $end
$var wire 1 j& in1 $end
$var wire 1 l& in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 i& out $end
$var wire 1 u! inA $end
$var wire 1 '" inB $end
$var wire 1 N s $end
$var wire 1 m& wA $end
$var wire 1 n& wnotS $end
$var wire 1 o& wB $end

$scope module notA $end
$var wire 1 n& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 m& out $end
$var wire 1 u! in1 $end
$var wire 1 n& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 o& out $end
$var wire 1 '" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 i& out $end
$var wire 1 m& in1 $end
$var wire 1 o& in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 \& out $end
$var wire 1 h& inA $end
$var wire 1 i& inB $end
$var wire 1 M s $end
$var wire 1 p& wA $end
$var wire 1 q& wnotS $end
$var wire 1 r& wB $end

$scope module notA $end
$var wire 1 q& out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 p& out $end
$var wire 1 h& in1 $end
$var wire 1 q& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 r& out $end
$var wire 1 i& in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 \& out $end
$var wire 1 p& in1 $end
$var wire 1 r& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 & out $end
$var wire 1 [& inA $end
$var wire 1 \& inB $end
$var wire 1 L s $end
$var wire 1 s& wA $end
$var wire 1 t& wnotS $end
$var wire 1 u& wB $end

$scope module notA $end
$var wire 1 t& out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 s& out $end
$var wire 1 [& in1 $end
$var wire 1 t& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 u& out $end
$var wire 1 \& in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 & out $end
$var wire 1 s& in1 $end
$var wire 1 u& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[9] $end
$var wire 1 ' out $end
$var wire 1 t inA $end
$var wire 1 &! inB $end
$var wire 1 6! inC $end
$var wire 1 F! inD $end
$var wire 1 V! inE $end
$var wire 1 f! inF $end
$var wire 1 v! inG $end
$var wire 1 (" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 v& outA $end
$var wire 1 w& outB $end

$scope module muxA $end
$var wire 1 v& out $end
$var wire 1 t inA $end
$var wire 1 &! inB $end
$var wire 1 6! inC $end
$var wire 1 F! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 x& w1 $end
$var wire 1 y& w2 $end

$scope module mux_ab $end
$var wire 1 x& out $end
$var wire 1 t inA $end
$var wire 1 &! inB $end
$var wire 1 N s $end
$var wire 1 z& wA $end
$var wire 1 {& wnotS $end
$var wire 1 |& wB $end

$scope module notA $end
$var wire 1 {& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 z& out $end
$var wire 1 t in1 $end
$var wire 1 {& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 |& out $end
$var wire 1 &! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 x& out $end
$var wire 1 z& in1 $end
$var wire 1 |& in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 y& out $end
$var wire 1 6! inA $end
$var wire 1 F! inB $end
$var wire 1 N s $end
$var wire 1 }& wA $end
$var wire 1 ~& wnotS $end
$var wire 1 !' wB $end

$scope module notA $end
$var wire 1 ~& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 }& out $end
$var wire 1 6! in1 $end
$var wire 1 ~& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 !' out $end
$var wire 1 F! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 y& out $end
$var wire 1 }& in1 $end
$var wire 1 !' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 v& out $end
$var wire 1 x& inA $end
$var wire 1 y& inB $end
$var wire 1 M s $end
$var wire 1 "' wA $end
$var wire 1 #' wnotS $end
$var wire 1 $' wB $end

$scope module notA $end
$var wire 1 #' out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 "' out $end
$var wire 1 x& in1 $end
$var wire 1 #' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 $' out $end
$var wire 1 y& in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 v& out $end
$var wire 1 "' in1 $end
$var wire 1 $' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 w& out $end
$var wire 1 V! inA $end
$var wire 1 f! inB $end
$var wire 1 v! inC $end
$var wire 1 (" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 %' w1 $end
$var wire 1 &' w2 $end

$scope module mux_ab $end
$var wire 1 %' out $end
$var wire 1 V! inA $end
$var wire 1 f! inB $end
$var wire 1 N s $end
$var wire 1 '' wA $end
$var wire 1 (' wnotS $end
$var wire 1 )' wB $end

$scope module notA $end
$var wire 1 (' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 '' out $end
$var wire 1 V! in1 $end
$var wire 1 (' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 )' out $end
$var wire 1 f! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 %' out $end
$var wire 1 '' in1 $end
$var wire 1 )' in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 &' out $end
$var wire 1 v! inA $end
$var wire 1 (" inB $end
$var wire 1 N s $end
$var wire 1 *' wA $end
$var wire 1 +' wnotS $end
$var wire 1 ,' wB $end

$scope module notA $end
$var wire 1 +' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 *' out $end
$var wire 1 v! in1 $end
$var wire 1 +' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ,' out $end
$var wire 1 (" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 &' out $end
$var wire 1 *' in1 $end
$var wire 1 ,' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 w& out $end
$var wire 1 %' inA $end
$var wire 1 &' inB $end
$var wire 1 M s $end
$var wire 1 -' wA $end
$var wire 1 .' wnotS $end
$var wire 1 /' wB $end

$scope module notA $end
$var wire 1 .' out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 -' out $end
$var wire 1 %' in1 $end
$var wire 1 .' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 /' out $end
$var wire 1 &' in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 w& out $end
$var wire 1 -' in1 $end
$var wire 1 /' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 ' out $end
$var wire 1 v& inA $end
$var wire 1 w& inB $end
$var wire 1 L s $end
$var wire 1 0' wA $end
$var wire 1 1' wnotS $end
$var wire 1 2' wB $end

$scope module notA $end
$var wire 1 1' out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 0' out $end
$var wire 1 v& in1 $end
$var wire 1 1' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 2' out $end
$var wire 1 w& in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 ' out $end
$var wire 1 0' in1 $end
$var wire 1 2' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[8] $end
$var wire 1 ( out $end
$var wire 1 u inA $end
$var wire 1 '! inB $end
$var wire 1 7! inC $end
$var wire 1 G! inD $end
$var wire 1 W! inE $end
$var wire 1 g! inF $end
$var wire 1 w! inG $end
$var wire 1 )" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 3' outA $end
$var wire 1 4' outB $end

$scope module muxA $end
$var wire 1 3' out $end
$var wire 1 u inA $end
$var wire 1 '! inB $end
$var wire 1 7! inC $end
$var wire 1 G! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 5' w1 $end
$var wire 1 6' w2 $end

$scope module mux_ab $end
$var wire 1 5' out $end
$var wire 1 u inA $end
$var wire 1 '! inB $end
$var wire 1 N s $end
$var wire 1 7' wA $end
$var wire 1 8' wnotS $end
$var wire 1 9' wB $end

$scope module notA $end
$var wire 1 8' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 7' out $end
$var wire 1 u in1 $end
$var wire 1 8' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 9' out $end
$var wire 1 '! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 5' out $end
$var wire 1 7' in1 $end
$var wire 1 9' in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 6' out $end
$var wire 1 7! inA $end
$var wire 1 G! inB $end
$var wire 1 N s $end
$var wire 1 :' wA $end
$var wire 1 ;' wnotS $end
$var wire 1 <' wB $end

$scope module notA $end
$var wire 1 ;' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 :' out $end
$var wire 1 7! in1 $end
$var wire 1 ;' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 <' out $end
$var wire 1 G! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 6' out $end
$var wire 1 :' in1 $end
$var wire 1 <' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 3' out $end
$var wire 1 5' inA $end
$var wire 1 6' inB $end
$var wire 1 M s $end
$var wire 1 =' wA $end
$var wire 1 >' wnotS $end
$var wire 1 ?' wB $end

$scope module notA $end
$var wire 1 >' out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 =' out $end
$var wire 1 5' in1 $end
$var wire 1 >' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ?' out $end
$var wire 1 6' in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 3' out $end
$var wire 1 =' in1 $end
$var wire 1 ?' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 4' out $end
$var wire 1 W! inA $end
$var wire 1 g! inB $end
$var wire 1 w! inC $end
$var wire 1 )" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 @' w1 $end
$var wire 1 A' w2 $end

$scope module mux_ab $end
$var wire 1 @' out $end
$var wire 1 W! inA $end
$var wire 1 g! inB $end
$var wire 1 N s $end
$var wire 1 B' wA $end
$var wire 1 C' wnotS $end
$var wire 1 D' wB $end

$scope module notA $end
$var wire 1 C' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 B' out $end
$var wire 1 W! in1 $end
$var wire 1 C' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 D' out $end
$var wire 1 g! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 @' out $end
$var wire 1 B' in1 $end
$var wire 1 D' in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 A' out $end
$var wire 1 w! inA $end
$var wire 1 )" inB $end
$var wire 1 N s $end
$var wire 1 E' wA $end
$var wire 1 F' wnotS $end
$var wire 1 G' wB $end

$scope module notA $end
$var wire 1 F' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 E' out $end
$var wire 1 w! in1 $end
$var wire 1 F' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 G' out $end
$var wire 1 )" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 A' out $end
$var wire 1 E' in1 $end
$var wire 1 G' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 4' out $end
$var wire 1 @' inA $end
$var wire 1 A' inB $end
$var wire 1 M s $end
$var wire 1 H' wA $end
$var wire 1 I' wnotS $end
$var wire 1 J' wB $end

$scope module notA $end
$var wire 1 I' out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 H' out $end
$var wire 1 @' in1 $end
$var wire 1 I' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 J' out $end
$var wire 1 A' in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 4' out $end
$var wire 1 H' in1 $end
$var wire 1 J' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 ( out $end
$var wire 1 3' inA $end
$var wire 1 4' inB $end
$var wire 1 L s $end
$var wire 1 K' wA $end
$var wire 1 L' wnotS $end
$var wire 1 M' wB $end

$scope module notA $end
$var wire 1 L' out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 K' out $end
$var wire 1 3' in1 $end
$var wire 1 L' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 M' out $end
$var wire 1 4' in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 ( out $end
$var wire 1 K' in1 $end
$var wire 1 M' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[7] $end
$var wire 1 ) out $end
$var wire 1 v inA $end
$var wire 1 (! inB $end
$var wire 1 8! inC $end
$var wire 1 H! inD $end
$var wire 1 X! inE $end
$var wire 1 h! inF $end
$var wire 1 x! inG $end
$var wire 1 *" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 N' outA $end
$var wire 1 O' outB $end

$scope module muxA $end
$var wire 1 N' out $end
$var wire 1 v inA $end
$var wire 1 (! inB $end
$var wire 1 8! inC $end
$var wire 1 H! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 P' w1 $end
$var wire 1 Q' w2 $end

$scope module mux_ab $end
$var wire 1 P' out $end
$var wire 1 v inA $end
$var wire 1 (! inB $end
$var wire 1 N s $end
$var wire 1 R' wA $end
$var wire 1 S' wnotS $end
$var wire 1 T' wB $end

$scope module notA $end
$var wire 1 S' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 R' out $end
$var wire 1 v in1 $end
$var wire 1 S' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 T' out $end
$var wire 1 (! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 P' out $end
$var wire 1 R' in1 $end
$var wire 1 T' in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 Q' out $end
$var wire 1 8! inA $end
$var wire 1 H! inB $end
$var wire 1 N s $end
$var wire 1 U' wA $end
$var wire 1 V' wnotS $end
$var wire 1 W' wB $end

$scope module notA $end
$var wire 1 V' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 U' out $end
$var wire 1 8! in1 $end
$var wire 1 V' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 W' out $end
$var wire 1 H! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 Q' out $end
$var wire 1 U' in1 $end
$var wire 1 W' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 N' out $end
$var wire 1 P' inA $end
$var wire 1 Q' inB $end
$var wire 1 M s $end
$var wire 1 X' wA $end
$var wire 1 Y' wnotS $end
$var wire 1 Z' wB $end

$scope module notA $end
$var wire 1 Y' out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 X' out $end
$var wire 1 P' in1 $end
$var wire 1 Y' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 Z' out $end
$var wire 1 Q' in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 N' out $end
$var wire 1 X' in1 $end
$var wire 1 Z' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 O' out $end
$var wire 1 X! inA $end
$var wire 1 h! inB $end
$var wire 1 x! inC $end
$var wire 1 *" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 [' w1 $end
$var wire 1 \' w2 $end

$scope module mux_ab $end
$var wire 1 [' out $end
$var wire 1 X! inA $end
$var wire 1 h! inB $end
$var wire 1 N s $end
$var wire 1 ]' wA $end
$var wire 1 ^' wnotS $end
$var wire 1 _' wB $end

$scope module notA $end
$var wire 1 ^' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ]' out $end
$var wire 1 X! in1 $end
$var wire 1 ^' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 _' out $end
$var wire 1 h! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 [' out $end
$var wire 1 ]' in1 $end
$var wire 1 _' in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 \' out $end
$var wire 1 x! inA $end
$var wire 1 *" inB $end
$var wire 1 N s $end
$var wire 1 `' wA $end
$var wire 1 a' wnotS $end
$var wire 1 b' wB $end

$scope module notA $end
$var wire 1 a' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 `' out $end
$var wire 1 x! in1 $end
$var wire 1 a' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 b' out $end
$var wire 1 *" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 \' out $end
$var wire 1 `' in1 $end
$var wire 1 b' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 O' out $end
$var wire 1 [' inA $end
$var wire 1 \' inB $end
$var wire 1 M s $end
$var wire 1 c' wA $end
$var wire 1 d' wnotS $end
$var wire 1 e' wB $end

$scope module notA $end
$var wire 1 d' out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 c' out $end
$var wire 1 [' in1 $end
$var wire 1 d' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 e' out $end
$var wire 1 \' in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 O' out $end
$var wire 1 c' in1 $end
$var wire 1 e' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 ) out $end
$var wire 1 N' inA $end
$var wire 1 O' inB $end
$var wire 1 L s $end
$var wire 1 f' wA $end
$var wire 1 g' wnotS $end
$var wire 1 h' wB $end

$scope module notA $end
$var wire 1 g' out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 f' out $end
$var wire 1 N' in1 $end
$var wire 1 g' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 h' out $end
$var wire 1 O' in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 ) out $end
$var wire 1 f' in1 $end
$var wire 1 h' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[6] $end
$var wire 1 * out $end
$var wire 1 w inA $end
$var wire 1 )! inB $end
$var wire 1 9! inC $end
$var wire 1 I! inD $end
$var wire 1 Y! inE $end
$var wire 1 i! inF $end
$var wire 1 y! inG $end
$var wire 1 +" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 i' outA $end
$var wire 1 j' outB $end

$scope module muxA $end
$var wire 1 i' out $end
$var wire 1 w inA $end
$var wire 1 )! inB $end
$var wire 1 9! inC $end
$var wire 1 I! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 k' w1 $end
$var wire 1 l' w2 $end

$scope module mux_ab $end
$var wire 1 k' out $end
$var wire 1 w inA $end
$var wire 1 )! inB $end
$var wire 1 N s $end
$var wire 1 m' wA $end
$var wire 1 n' wnotS $end
$var wire 1 o' wB $end

$scope module notA $end
$var wire 1 n' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 m' out $end
$var wire 1 w in1 $end
$var wire 1 n' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 o' out $end
$var wire 1 )! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 k' out $end
$var wire 1 m' in1 $end
$var wire 1 o' in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 l' out $end
$var wire 1 9! inA $end
$var wire 1 I! inB $end
$var wire 1 N s $end
$var wire 1 p' wA $end
$var wire 1 q' wnotS $end
$var wire 1 r' wB $end

$scope module notA $end
$var wire 1 q' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 p' out $end
$var wire 1 9! in1 $end
$var wire 1 q' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 r' out $end
$var wire 1 I! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 l' out $end
$var wire 1 p' in1 $end
$var wire 1 r' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 i' out $end
$var wire 1 k' inA $end
$var wire 1 l' inB $end
$var wire 1 M s $end
$var wire 1 s' wA $end
$var wire 1 t' wnotS $end
$var wire 1 u' wB $end

$scope module notA $end
$var wire 1 t' out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 s' out $end
$var wire 1 k' in1 $end
$var wire 1 t' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 u' out $end
$var wire 1 l' in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 i' out $end
$var wire 1 s' in1 $end
$var wire 1 u' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 j' out $end
$var wire 1 Y! inA $end
$var wire 1 i! inB $end
$var wire 1 y! inC $end
$var wire 1 +" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 v' w1 $end
$var wire 1 w' w2 $end

$scope module mux_ab $end
$var wire 1 v' out $end
$var wire 1 Y! inA $end
$var wire 1 i! inB $end
$var wire 1 N s $end
$var wire 1 x' wA $end
$var wire 1 y' wnotS $end
$var wire 1 z' wB $end

$scope module notA $end
$var wire 1 y' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 x' out $end
$var wire 1 Y! in1 $end
$var wire 1 y' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 z' out $end
$var wire 1 i! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 v' out $end
$var wire 1 x' in1 $end
$var wire 1 z' in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 w' out $end
$var wire 1 y! inA $end
$var wire 1 +" inB $end
$var wire 1 N s $end
$var wire 1 {' wA $end
$var wire 1 |' wnotS $end
$var wire 1 }' wB $end

$scope module notA $end
$var wire 1 |' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 {' out $end
$var wire 1 y! in1 $end
$var wire 1 |' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 }' out $end
$var wire 1 +" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 w' out $end
$var wire 1 {' in1 $end
$var wire 1 }' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 j' out $end
$var wire 1 v' inA $end
$var wire 1 w' inB $end
$var wire 1 M s $end
$var wire 1 ~' wA $end
$var wire 1 !( wnotS $end
$var wire 1 "( wB $end

$scope module notA $end
$var wire 1 !( out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ~' out $end
$var wire 1 v' in1 $end
$var wire 1 !( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 "( out $end
$var wire 1 w' in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 j' out $end
$var wire 1 ~' in1 $end
$var wire 1 "( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 * out $end
$var wire 1 i' inA $end
$var wire 1 j' inB $end
$var wire 1 L s $end
$var wire 1 #( wA $end
$var wire 1 $( wnotS $end
$var wire 1 %( wB $end

$scope module notA $end
$var wire 1 $( out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 #( out $end
$var wire 1 i' in1 $end
$var wire 1 $( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 %( out $end
$var wire 1 j' in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 * out $end
$var wire 1 #( in1 $end
$var wire 1 %( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[5] $end
$var wire 1 + out $end
$var wire 1 x inA $end
$var wire 1 *! inB $end
$var wire 1 :! inC $end
$var wire 1 J! inD $end
$var wire 1 Z! inE $end
$var wire 1 j! inF $end
$var wire 1 z! inG $end
$var wire 1 ," inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 &( outA $end
$var wire 1 '( outB $end

$scope module muxA $end
$var wire 1 &( out $end
$var wire 1 x inA $end
$var wire 1 *! inB $end
$var wire 1 :! inC $end
$var wire 1 J! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 (( w1 $end
$var wire 1 )( w2 $end

$scope module mux_ab $end
$var wire 1 (( out $end
$var wire 1 x inA $end
$var wire 1 *! inB $end
$var wire 1 N s $end
$var wire 1 *( wA $end
$var wire 1 +( wnotS $end
$var wire 1 ,( wB $end

$scope module notA $end
$var wire 1 +( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 *( out $end
$var wire 1 x in1 $end
$var wire 1 +( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ,( out $end
$var wire 1 *! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 (( out $end
$var wire 1 *( in1 $end
$var wire 1 ,( in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 )( out $end
$var wire 1 :! inA $end
$var wire 1 J! inB $end
$var wire 1 N s $end
$var wire 1 -( wA $end
$var wire 1 .( wnotS $end
$var wire 1 /( wB $end

$scope module notA $end
$var wire 1 .( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 -( out $end
$var wire 1 :! in1 $end
$var wire 1 .( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 /( out $end
$var wire 1 J! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 )( out $end
$var wire 1 -( in1 $end
$var wire 1 /( in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 &( out $end
$var wire 1 (( inA $end
$var wire 1 )( inB $end
$var wire 1 M s $end
$var wire 1 0( wA $end
$var wire 1 1( wnotS $end
$var wire 1 2( wB $end

$scope module notA $end
$var wire 1 1( out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 0( out $end
$var wire 1 (( in1 $end
$var wire 1 1( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 2( out $end
$var wire 1 )( in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 &( out $end
$var wire 1 0( in1 $end
$var wire 1 2( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 '( out $end
$var wire 1 Z! inA $end
$var wire 1 j! inB $end
$var wire 1 z! inC $end
$var wire 1 ," inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 3( w1 $end
$var wire 1 4( w2 $end

$scope module mux_ab $end
$var wire 1 3( out $end
$var wire 1 Z! inA $end
$var wire 1 j! inB $end
$var wire 1 N s $end
$var wire 1 5( wA $end
$var wire 1 6( wnotS $end
$var wire 1 7( wB $end

$scope module notA $end
$var wire 1 6( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 5( out $end
$var wire 1 Z! in1 $end
$var wire 1 6( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 7( out $end
$var wire 1 j! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 3( out $end
$var wire 1 5( in1 $end
$var wire 1 7( in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 4( out $end
$var wire 1 z! inA $end
$var wire 1 ," inB $end
$var wire 1 N s $end
$var wire 1 8( wA $end
$var wire 1 9( wnotS $end
$var wire 1 :( wB $end

$scope module notA $end
$var wire 1 9( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 8( out $end
$var wire 1 z! in1 $end
$var wire 1 9( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 :( out $end
$var wire 1 ," in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 4( out $end
$var wire 1 8( in1 $end
$var wire 1 :( in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 '( out $end
$var wire 1 3( inA $end
$var wire 1 4( inB $end
$var wire 1 M s $end
$var wire 1 ;( wA $end
$var wire 1 <( wnotS $end
$var wire 1 =( wB $end

$scope module notA $end
$var wire 1 <( out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ;( out $end
$var wire 1 3( in1 $end
$var wire 1 <( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 =( out $end
$var wire 1 4( in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 '( out $end
$var wire 1 ;( in1 $end
$var wire 1 =( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 + out $end
$var wire 1 &( inA $end
$var wire 1 '( inB $end
$var wire 1 L s $end
$var wire 1 >( wA $end
$var wire 1 ?( wnotS $end
$var wire 1 @( wB $end

$scope module notA $end
$var wire 1 ?( out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 >( out $end
$var wire 1 &( in1 $end
$var wire 1 ?( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 @( out $end
$var wire 1 '( in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 + out $end
$var wire 1 >( in1 $end
$var wire 1 @( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[4] $end
$var wire 1 , out $end
$var wire 1 y inA $end
$var wire 1 +! inB $end
$var wire 1 ;! inC $end
$var wire 1 K! inD $end
$var wire 1 [! inE $end
$var wire 1 k! inF $end
$var wire 1 {! inG $end
$var wire 1 -" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 A( outA $end
$var wire 1 B( outB $end

$scope module muxA $end
$var wire 1 A( out $end
$var wire 1 y inA $end
$var wire 1 +! inB $end
$var wire 1 ;! inC $end
$var wire 1 K! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 C( w1 $end
$var wire 1 D( w2 $end

$scope module mux_ab $end
$var wire 1 C( out $end
$var wire 1 y inA $end
$var wire 1 +! inB $end
$var wire 1 N s $end
$var wire 1 E( wA $end
$var wire 1 F( wnotS $end
$var wire 1 G( wB $end

$scope module notA $end
$var wire 1 F( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 E( out $end
$var wire 1 y in1 $end
$var wire 1 F( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 G( out $end
$var wire 1 +! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 C( out $end
$var wire 1 E( in1 $end
$var wire 1 G( in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 D( out $end
$var wire 1 ;! inA $end
$var wire 1 K! inB $end
$var wire 1 N s $end
$var wire 1 H( wA $end
$var wire 1 I( wnotS $end
$var wire 1 J( wB $end

$scope module notA $end
$var wire 1 I( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 H( out $end
$var wire 1 ;! in1 $end
$var wire 1 I( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 J( out $end
$var wire 1 K! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 D( out $end
$var wire 1 H( in1 $end
$var wire 1 J( in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 A( out $end
$var wire 1 C( inA $end
$var wire 1 D( inB $end
$var wire 1 M s $end
$var wire 1 K( wA $end
$var wire 1 L( wnotS $end
$var wire 1 M( wB $end

$scope module notA $end
$var wire 1 L( out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 K( out $end
$var wire 1 C( in1 $end
$var wire 1 L( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 M( out $end
$var wire 1 D( in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 A( out $end
$var wire 1 K( in1 $end
$var wire 1 M( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 B( out $end
$var wire 1 [! inA $end
$var wire 1 k! inB $end
$var wire 1 {! inC $end
$var wire 1 -" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 N( w1 $end
$var wire 1 O( w2 $end

$scope module mux_ab $end
$var wire 1 N( out $end
$var wire 1 [! inA $end
$var wire 1 k! inB $end
$var wire 1 N s $end
$var wire 1 P( wA $end
$var wire 1 Q( wnotS $end
$var wire 1 R( wB $end

$scope module notA $end
$var wire 1 Q( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 P( out $end
$var wire 1 [! in1 $end
$var wire 1 Q( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 R( out $end
$var wire 1 k! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 N( out $end
$var wire 1 P( in1 $end
$var wire 1 R( in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 O( out $end
$var wire 1 {! inA $end
$var wire 1 -" inB $end
$var wire 1 N s $end
$var wire 1 S( wA $end
$var wire 1 T( wnotS $end
$var wire 1 U( wB $end

$scope module notA $end
$var wire 1 T( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 S( out $end
$var wire 1 {! in1 $end
$var wire 1 T( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 U( out $end
$var wire 1 -" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 O( out $end
$var wire 1 S( in1 $end
$var wire 1 U( in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 B( out $end
$var wire 1 N( inA $end
$var wire 1 O( inB $end
$var wire 1 M s $end
$var wire 1 V( wA $end
$var wire 1 W( wnotS $end
$var wire 1 X( wB $end

$scope module notA $end
$var wire 1 W( out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 V( out $end
$var wire 1 N( in1 $end
$var wire 1 W( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 X( out $end
$var wire 1 O( in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 B( out $end
$var wire 1 V( in1 $end
$var wire 1 X( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 , out $end
$var wire 1 A( inA $end
$var wire 1 B( inB $end
$var wire 1 L s $end
$var wire 1 Y( wA $end
$var wire 1 Z( wnotS $end
$var wire 1 [( wB $end

$scope module notA $end
$var wire 1 Z( out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 Y( out $end
$var wire 1 A( in1 $end
$var wire 1 Z( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 [( out $end
$var wire 1 B( in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 , out $end
$var wire 1 Y( in1 $end
$var wire 1 [( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[3] $end
$var wire 1 - out $end
$var wire 1 z inA $end
$var wire 1 ,! inB $end
$var wire 1 <! inC $end
$var wire 1 L! inD $end
$var wire 1 \! inE $end
$var wire 1 l! inF $end
$var wire 1 |! inG $end
$var wire 1 ." inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 \( outA $end
$var wire 1 ]( outB $end

$scope module muxA $end
$var wire 1 \( out $end
$var wire 1 z inA $end
$var wire 1 ,! inB $end
$var wire 1 <! inC $end
$var wire 1 L! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 ^( w1 $end
$var wire 1 _( w2 $end

$scope module mux_ab $end
$var wire 1 ^( out $end
$var wire 1 z inA $end
$var wire 1 ,! inB $end
$var wire 1 N s $end
$var wire 1 `( wA $end
$var wire 1 a( wnotS $end
$var wire 1 b( wB $end

$scope module notA $end
$var wire 1 a( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 `( out $end
$var wire 1 z in1 $end
$var wire 1 a( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 b( out $end
$var wire 1 ,! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 ^( out $end
$var wire 1 `( in1 $end
$var wire 1 b( in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 _( out $end
$var wire 1 <! inA $end
$var wire 1 L! inB $end
$var wire 1 N s $end
$var wire 1 c( wA $end
$var wire 1 d( wnotS $end
$var wire 1 e( wB $end

$scope module notA $end
$var wire 1 d( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 c( out $end
$var wire 1 <! in1 $end
$var wire 1 d( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 e( out $end
$var wire 1 L! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 _( out $end
$var wire 1 c( in1 $end
$var wire 1 e( in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 \( out $end
$var wire 1 ^( inA $end
$var wire 1 _( inB $end
$var wire 1 M s $end
$var wire 1 f( wA $end
$var wire 1 g( wnotS $end
$var wire 1 h( wB $end

$scope module notA $end
$var wire 1 g( out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 f( out $end
$var wire 1 ^( in1 $end
$var wire 1 g( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 h( out $end
$var wire 1 _( in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 \( out $end
$var wire 1 f( in1 $end
$var wire 1 h( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 ]( out $end
$var wire 1 \! inA $end
$var wire 1 l! inB $end
$var wire 1 |! inC $end
$var wire 1 ." inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 i( w1 $end
$var wire 1 j( w2 $end

$scope module mux_ab $end
$var wire 1 i( out $end
$var wire 1 \! inA $end
$var wire 1 l! inB $end
$var wire 1 N s $end
$var wire 1 k( wA $end
$var wire 1 l( wnotS $end
$var wire 1 m( wB $end

$scope module notA $end
$var wire 1 l( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 k( out $end
$var wire 1 \! in1 $end
$var wire 1 l( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 m( out $end
$var wire 1 l! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 i( out $end
$var wire 1 k( in1 $end
$var wire 1 m( in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 j( out $end
$var wire 1 |! inA $end
$var wire 1 ." inB $end
$var wire 1 N s $end
$var wire 1 n( wA $end
$var wire 1 o( wnotS $end
$var wire 1 p( wB $end

$scope module notA $end
$var wire 1 o( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 n( out $end
$var wire 1 |! in1 $end
$var wire 1 o( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 p( out $end
$var wire 1 ." in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 j( out $end
$var wire 1 n( in1 $end
$var wire 1 p( in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 ]( out $end
$var wire 1 i( inA $end
$var wire 1 j( inB $end
$var wire 1 M s $end
$var wire 1 q( wA $end
$var wire 1 r( wnotS $end
$var wire 1 s( wB $end

$scope module notA $end
$var wire 1 r( out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 q( out $end
$var wire 1 i( in1 $end
$var wire 1 r( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 s( out $end
$var wire 1 j( in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 ]( out $end
$var wire 1 q( in1 $end
$var wire 1 s( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 - out $end
$var wire 1 \( inA $end
$var wire 1 ]( inB $end
$var wire 1 L s $end
$var wire 1 t( wA $end
$var wire 1 u( wnotS $end
$var wire 1 v( wB $end

$scope module notA $end
$var wire 1 u( out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 t( out $end
$var wire 1 \( in1 $end
$var wire 1 u( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 v( out $end
$var wire 1 ]( in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 - out $end
$var wire 1 t( in1 $end
$var wire 1 v( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[2] $end
$var wire 1 . out $end
$var wire 1 { inA $end
$var wire 1 -! inB $end
$var wire 1 =! inC $end
$var wire 1 M! inD $end
$var wire 1 ]! inE $end
$var wire 1 m! inF $end
$var wire 1 }! inG $end
$var wire 1 /" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 w( outA $end
$var wire 1 x( outB $end

$scope module muxA $end
$var wire 1 w( out $end
$var wire 1 { inA $end
$var wire 1 -! inB $end
$var wire 1 =! inC $end
$var wire 1 M! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 y( w1 $end
$var wire 1 z( w2 $end

$scope module mux_ab $end
$var wire 1 y( out $end
$var wire 1 { inA $end
$var wire 1 -! inB $end
$var wire 1 N s $end
$var wire 1 {( wA $end
$var wire 1 |( wnotS $end
$var wire 1 }( wB $end

$scope module notA $end
$var wire 1 |( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 {( out $end
$var wire 1 { in1 $end
$var wire 1 |( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 }( out $end
$var wire 1 -! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 y( out $end
$var wire 1 {( in1 $end
$var wire 1 }( in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 z( out $end
$var wire 1 =! inA $end
$var wire 1 M! inB $end
$var wire 1 N s $end
$var wire 1 ~( wA $end
$var wire 1 !) wnotS $end
$var wire 1 ") wB $end

$scope module notA $end
$var wire 1 !) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ~( out $end
$var wire 1 =! in1 $end
$var wire 1 !) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ") out $end
$var wire 1 M! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 z( out $end
$var wire 1 ~( in1 $end
$var wire 1 ") in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 w( out $end
$var wire 1 y( inA $end
$var wire 1 z( inB $end
$var wire 1 M s $end
$var wire 1 #) wA $end
$var wire 1 $) wnotS $end
$var wire 1 %) wB $end

$scope module notA $end
$var wire 1 $) out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 #) out $end
$var wire 1 y( in1 $end
$var wire 1 $) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 %) out $end
$var wire 1 z( in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 w( out $end
$var wire 1 #) in1 $end
$var wire 1 %) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 x( out $end
$var wire 1 ]! inA $end
$var wire 1 m! inB $end
$var wire 1 }! inC $end
$var wire 1 /" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 &) w1 $end
$var wire 1 ') w2 $end

$scope module mux_ab $end
$var wire 1 &) out $end
$var wire 1 ]! inA $end
$var wire 1 m! inB $end
$var wire 1 N s $end
$var wire 1 () wA $end
$var wire 1 )) wnotS $end
$var wire 1 *) wB $end

$scope module notA $end
$var wire 1 )) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 () out $end
$var wire 1 ]! in1 $end
$var wire 1 )) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 *) out $end
$var wire 1 m! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 &) out $end
$var wire 1 () in1 $end
$var wire 1 *) in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 ') out $end
$var wire 1 }! inA $end
$var wire 1 /" inB $end
$var wire 1 N s $end
$var wire 1 +) wA $end
$var wire 1 ,) wnotS $end
$var wire 1 -) wB $end

$scope module notA $end
$var wire 1 ,) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 +) out $end
$var wire 1 }! in1 $end
$var wire 1 ,) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 -) out $end
$var wire 1 /" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 ') out $end
$var wire 1 +) in1 $end
$var wire 1 -) in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 x( out $end
$var wire 1 &) inA $end
$var wire 1 ') inB $end
$var wire 1 M s $end
$var wire 1 .) wA $end
$var wire 1 /) wnotS $end
$var wire 1 0) wB $end

$scope module notA $end
$var wire 1 /) out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 .) out $end
$var wire 1 &) in1 $end
$var wire 1 /) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 0) out $end
$var wire 1 ') in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 x( out $end
$var wire 1 .) in1 $end
$var wire 1 0) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 . out $end
$var wire 1 w( inA $end
$var wire 1 x( inB $end
$var wire 1 L s $end
$var wire 1 1) wA $end
$var wire 1 2) wnotS $end
$var wire 1 3) wB $end

$scope module notA $end
$var wire 1 2) out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 1) out $end
$var wire 1 w( in1 $end
$var wire 1 2) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 3) out $end
$var wire 1 x( in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 . out $end
$var wire 1 1) in1 $end
$var wire 1 3) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[1] $end
$var wire 1 / out $end
$var wire 1 | inA $end
$var wire 1 .! inB $end
$var wire 1 >! inC $end
$var wire 1 N! inD $end
$var wire 1 ^! inE $end
$var wire 1 n! inF $end
$var wire 1 ~! inG $end
$var wire 1 0" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 4) outA $end
$var wire 1 5) outB $end

$scope module muxA $end
$var wire 1 4) out $end
$var wire 1 | inA $end
$var wire 1 .! inB $end
$var wire 1 >! inC $end
$var wire 1 N! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 6) w1 $end
$var wire 1 7) w2 $end

$scope module mux_ab $end
$var wire 1 6) out $end
$var wire 1 | inA $end
$var wire 1 .! inB $end
$var wire 1 N s $end
$var wire 1 8) wA $end
$var wire 1 9) wnotS $end
$var wire 1 :) wB $end

$scope module notA $end
$var wire 1 9) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 8) out $end
$var wire 1 | in1 $end
$var wire 1 9) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 :) out $end
$var wire 1 .! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 6) out $end
$var wire 1 8) in1 $end
$var wire 1 :) in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 7) out $end
$var wire 1 >! inA $end
$var wire 1 N! inB $end
$var wire 1 N s $end
$var wire 1 ;) wA $end
$var wire 1 <) wnotS $end
$var wire 1 =) wB $end

$scope module notA $end
$var wire 1 <) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ;) out $end
$var wire 1 >! in1 $end
$var wire 1 <) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 =) out $end
$var wire 1 N! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 7) out $end
$var wire 1 ;) in1 $end
$var wire 1 =) in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 4) out $end
$var wire 1 6) inA $end
$var wire 1 7) inB $end
$var wire 1 M s $end
$var wire 1 >) wA $end
$var wire 1 ?) wnotS $end
$var wire 1 @) wB $end

$scope module notA $end
$var wire 1 ?) out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 >) out $end
$var wire 1 6) in1 $end
$var wire 1 ?) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 @) out $end
$var wire 1 7) in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 4) out $end
$var wire 1 >) in1 $end
$var wire 1 @) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 5) out $end
$var wire 1 ^! inA $end
$var wire 1 n! inB $end
$var wire 1 ~! inC $end
$var wire 1 0" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 A) w1 $end
$var wire 1 B) w2 $end

$scope module mux_ab $end
$var wire 1 A) out $end
$var wire 1 ^! inA $end
$var wire 1 n! inB $end
$var wire 1 N s $end
$var wire 1 C) wA $end
$var wire 1 D) wnotS $end
$var wire 1 E) wB $end

$scope module notA $end
$var wire 1 D) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 C) out $end
$var wire 1 ^! in1 $end
$var wire 1 D) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 E) out $end
$var wire 1 n! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 A) out $end
$var wire 1 C) in1 $end
$var wire 1 E) in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 B) out $end
$var wire 1 ~! inA $end
$var wire 1 0" inB $end
$var wire 1 N s $end
$var wire 1 F) wA $end
$var wire 1 G) wnotS $end
$var wire 1 H) wB $end

$scope module notA $end
$var wire 1 G) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 F) out $end
$var wire 1 ~! in1 $end
$var wire 1 G) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 H) out $end
$var wire 1 0" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 B) out $end
$var wire 1 F) in1 $end
$var wire 1 H) in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 5) out $end
$var wire 1 A) inA $end
$var wire 1 B) inB $end
$var wire 1 M s $end
$var wire 1 I) wA $end
$var wire 1 J) wnotS $end
$var wire 1 K) wB $end

$scope module notA $end
$var wire 1 J) out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 I) out $end
$var wire 1 A) in1 $end
$var wire 1 J) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 K) out $end
$var wire 1 B) in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 5) out $end
$var wire 1 I) in1 $end
$var wire 1 K) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 / out $end
$var wire 1 4) inA $end
$var wire 1 5) inB $end
$var wire 1 L s $end
$var wire 1 L) wA $end
$var wire 1 M) wnotS $end
$var wire 1 N) wB $end

$scope module notA $end
$var wire 1 M) out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 L) out $end
$var wire 1 4) in1 $end
$var wire 1 M) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 N) out $end
$var wire 1 5) in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 / out $end
$var wire 1 L) in1 $end
$var wire 1 N) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[0] $end
$var wire 1 0 out $end
$var wire 1 } inA $end
$var wire 1 /! inB $end
$var wire 1 ?! inC $end
$var wire 1 O! inD $end
$var wire 1 _! inE $end
$var wire 1 o! inF $end
$var wire 1 !" inG $end
$var wire 1 1" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 O) outA $end
$var wire 1 P) outB $end

$scope module muxA $end
$var wire 1 O) out $end
$var wire 1 } inA $end
$var wire 1 /! inB $end
$var wire 1 ?! inC $end
$var wire 1 O! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 Q) w1 $end
$var wire 1 R) w2 $end

$scope module mux_ab $end
$var wire 1 Q) out $end
$var wire 1 } inA $end
$var wire 1 /! inB $end
$var wire 1 N s $end
$var wire 1 S) wA $end
$var wire 1 T) wnotS $end
$var wire 1 U) wB $end

$scope module notA $end
$var wire 1 T) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 S) out $end
$var wire 1 } in1 $end
$var wire 1 T) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 U) out $end
$var wire 1 /! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 Q) out $end
$var wire 1 S) in1 $end
$var wire 1 U) in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 R) out $end
$var wire 1 ?! inA $end
$var wire 1 O! inB $end
$var wire 1 N s $end
$var wire 1 V) wA $end
$var wire 1 W) wnotS $end
$var wire 1 X) wB $end

$scope module notA $end
$var wire 1 W) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 V) out $end
$var wire 1 ?! in1 $end
$var wire 1 W) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 X) out $end
$var wire 1 O! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 R) out $end
$var wire 1 V) in1 $end
$var wire 1 X) in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 O) out $end
$var wire 1 Q) inA $end
$var wire 1 R) inB $end
$var wire 1 M s $end
$var wire 1 Y) wA $end
$var wire 1 Z) wnotS $end
$var wire 1 [) wB $end

$scope module notA $end
$var wire 1 Z) out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 Y) out $end
$var wire 1 Q) in1 $end
$var wire 1 Z) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 [) out $end
$var wire 1 R) in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 O) out $end
$var wire 1 Y) in1 $end
$var wire 1 [) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 P) out $end
$var wire 1 _! inA $end
$var wire 1 o! inB $end
$var wire 1 !" inC $end
$var wire 1 1" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 \) w1 $end
$var wire 1 ]) w2 $end

$scope module mux_ab $end
$var wire 1 \) out $end
$var wire 1 _! inA $end
$var wire 1 o! inB $end
$var wire 1 N s $end
$var wire 1 ^) wA $end
$var wire 1 _) wnotS $end
$var wire 1 `) wB $end

$scope module notA $end
$var wire 1 _) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ^) out $end
$var wire 1 _! in1 $end
$var wire 1 _) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 `) out $end
$var wire 1 o! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 \) out $end
$var wire 1 ^) in1 $end
$var wire 1 `) in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 ]) out $end
$var wire 1 !" inA $end
$var wire 1 1" inB $end
$var wire 1 N s $end
$var wire 1 a) wA $end
$var wire 1 b) wnotS $end
$var wire 1 c) wB $end

$scope module notA $end
$var wire 1 b) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 a) out $end
$var wire 1 !" in1 $end
$var wire 1 b) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 c) out $end
$var wire 1 1" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 ]) out $end
$var wire 1 a) in1 $end
$var wire 1 c) in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 P) out $end
$var wire 1 \) inA $end
$var wire 1 ]) inB $end
$var wire 1 M s $end
$var wire 1 d) wA $end
$var wire 1 e) wnotS $end
$var wire 1 f) wB $end

$scope module notA $end
$var wire 1 e) out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 d) out $end
$var wire 1 \) in1 $end
$var wire 1 e) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 f) out $end
$var wire 1 ]) in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 P) out $end
$var wire 1 d) in1 $end
$var wire 1 f) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 0 out $end
$var wire 1 O) inA $end
$var wire 1 P) inB $end
$var wire 1 L s $end
$var wire 1 g) wA $end
$var wire 1 h) wnotS $end
$var wire 1 i) wB $end

$scope module notA $end
$var wire 1 h) out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 g) out $end
$var wire 1 O) in1 $end
$var wire 1 h) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 i) out $end
$var wire 1 P) in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 0 out $end
$var wire 1 g) in1 $end
$var wire 1 i) in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux2 $end
$var parameter 32 j) OPERAND_WIDTH $end
$var wire 1 1 out [15] $end
$var wire 1 2 out [14] $end
$var wire 1 3 out [13] $end
$var wire 1 4 out [12] $end
$var wire 1 5 out [11] $end
$var wire 1 6 out [10] $end
$var wire 1 7 out [9] $end
$var wire 1 8 out [8] $end
$var wire 1 9 out [7] $end
$var wire 1 : out [6] $end
$var wire 1 ; out [5] $end
$var wire 1 < out [4] $end
$var wire 1 = out [3] $end
$var wire 1 > out [2] $end
$var wire 1 ? out [1] $end
$var wire 1 @ out [0] $end
$var wire 1 n inA [15] $end
$var wire 1 o inA [14] $end
$var wire 1 p inA [13] $end
$var wire 1 q inA [12] $end
$var wire 1 r inA [11] $end
$var wire 1 s inA [10] $end
$var wire 1 t inA [9] $end
$var wire 1 u inA [8] $end
$var wire 1 v inA [7] $end
$var wire 1 w inA [6] $end
$var wire 1 x inA [5] $end
$var wire 1 y inA [4] $end
$var wire 1 z inA [3] $end
$var wire 1 { inA [2] $end
$var wire 1 | inA [1] $end
$var wire 1 } inA [0] $end
$var wire 1 ~ inB [15] $end
$var wire 1 !! inB [14] $end
$var wire 1 "! inB [13] $end
$var wire 1 #! inB [12] $end
$var wire 1 $! inB [11] $end
$var wire 1 %! inB [10] $end
$var wire 1 &! inB [9] $end
$var wire 1 '! inB [8] $end
$var wire 1 (! inB [7] $end
$var wire 1 )! inB [6] $end
$var wire 1 *! inB [5] $end
$var wire 1 +! inB [4] $end
$var wire 1 ,! inB [3] $end
$var wire 1 -! inB [2] $end
$var wire 1 .! inB [1] $end
$var wire 1 /! inB [0] $end
$var wire 1 0! inC [15] $end
$var wire 1 1! inC [14] $end
$var wire 1 2! inC [13] $end
$var wire 1 3! inC [12] $end
$var wire 1 4! inC [11] $end
$var wire 1 5! inC [10] $end
$var wire 1 6! inC [9] $end
$var wire 1 7! inC [8] $end
$var wire 1 8! inC [7] $end
$var wire 1 9! inC [6] $end
$var wire 1 :! inC [5] $end
$var wire 1 ;! inC [4] $end
$var wire 1 <! inC [3] $end
$var wire 1 =! inC [2] $end
$var wire 1 >! inC [1] $end
$var wire 1 ?! inC [0] $end
$var wire 1 @! inD [15] $end
$var wire 1 A! inD [14] $end
$var wire 1 B! inD [13] $end
$var wire 1 C! inD [12] $end
$var wire 1 D! inD [11] $end
$var wire 1 E! inD [10] $end
$var wire 1 F! inD [9] $end
$var wire 1 G! inD [8] $end
$var wire 1 H! inD [7] $end
$var wire 1 I! inD [6] $end
$var wire 1 J! inD [5] $end
$var wire 1 K! inD [4] $end
$var wire 1 L! inD [3] $end
$var wire 1 M! inD [2] $end
$var wire 1 N! inD [1] $end
$var wire 1 O! inD [0] $end
$var wire 1 P! inE [15] $end
$var wire 1 Q! inE [14] $end
$var wire 1 R! inE [13] $end
$var wire 1 S! inE [12] $end
$var wire 1 T! inE [11] $end
$var wire 1 U! inE [10] $end
$var wire 1 V! inE [9] $end
$var wire 1 W! inE [8] $end
$var wire 1 X! inE [7] $end
$var wire 1 Y! inE [6] $end
$var wire 1 Z! inE [5] $end
$var wire 1 [! inE [4] $end
$var wire 1 \! inE [3] $end
$var wire 1 ]! inE [2] $end
$var wire 1 ^! inE [1] $end
$var wire 1 _! inE [0] $end
$var wire 1 `! inF [15] $end
$var wire 1 a! inF [14] $end
$var wire 1 b! inF [13] $end
$var wire 1 c! inF [12] $end
$var wire 1 d! inF [11] $end
$var wire 1 e! inF [10] $end
$var wire 1 f! inF [9] $end
$var wire 1 g! inF [8] $end
$var wire 1 h! inF [7] $end
$var wire 1 i! inF [6] $end
$var wire 1 j! inF [5] $end
$var wire 1 k! inF [4] $end
$var wire 1 l! inF [3] $end
$var wire 1 m! inF [2] $end
$var wire 1 n! inF [1] $end
$var wire 1 o! inF [0] $end
$var wire 1 p! inG [15] $end
$var wire 1 q! inG [14] $end
$var wire 1 r! inG [13] $end
$var wire 1 s! inG [12] $end
$var wire 1 t! inG [11] $end
$var wire 1 u! inG [10] $end
$var wire 1 v! inG [9] $end
$var wire 1 w! inG [8] $end
$var wire 1 x! inG [7] $end
$var wire 1 y! inG [6] $end
$var wire 1 z! inG [5] $end
$var wire 1 {! inG [4] $end
$var wire 1 |! inG [3] $end
$var wire 1 }! inG [2] $end
$var wire 1 ~! inG [1] $end
$var wire 1 !" inG [0] $end
$var wire 1 "" inH [15] $end
$var wire 1 #" inH [14] $end
$var wire 1 $" inH [13] $end
$var wire 1 %" inH [12] $end
$var wire 1 &" inH [11] $end
$var wire 1 '" inH [10] $end
$var wire 1 (" inH [9] $end
$var wire 1 )" inH [8] $end
$var wire 1 *" inH [7] $end
$var wire 1 +" inH [6] $end
$var wire 1 ," inH [5] $end
$var wire 1 -" inH [4] $end
$var wire 1 ." inH [3] $end
$var wire 1 /" inH [2] $end
$var wire 1 0" inH [1] $end
$var wire 1 1" inH [0] $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end

$scope module mux[15] $end
$var wire 1 1 out $end
$var wire 1 n inA $end
$var wire 1 ~ inB $end
$var wire 1 0! inC $end
$var wire 1 @! inD $end
$var wire 1 P! inE $end
$var wire 1 `! inF $end
$var wire 1 p! inG $end
$var wire 1 "" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 k) outA $end
$var wire 1 l) outB $end

$scope module muxA $end
$var wire 1 k) out $end
$var wire 1 n inA $end
$var wire 1 ~ inB $end
$var wire 1 0! inC $end
$var wire 1 @! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 m) w1 $end
$var wire 1 n) w2 $end

$scope module mux_ab $end
$var wire 1 m) out $end
$var wire 1 n inA $end
$var wire 1 ~ inB $end
$var wire 1 Q s $end
$var wire 1 o) wA $end
$var wire 1 p) wnotS $end
$var wire 1 q) wB $end

$scope module notA $end
$var wire 1 p) out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 o) out $end
$var wire 1 n in1 $end
$var wire 1 p) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 q) out $end
$var wire 1 ~ in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 m) out $end
$var wire 1 o) in1 $end
$var wire 1 q) in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 n) out $end
$var wire 1 0! inA $end
$var wire 1 @! inB $end
$var wire 1 Q s $end
$var wire 1 r) wA $end
$var wire 1 s) wnotS $end
$var wire 1 t) wB $end

$scope module notA $end
$var wire 1 s) out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 r) out $end
$var wire 1 0! in1 $end
$var wire 1 s) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 t) out $end
$var wire 1 @! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 n) out $end
$var wire 1 r) in1 $end
$var wire 1 t) in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 k) out $end
$var wire 1 m) inA $end
$var wire 1 n) inB $end
$var wire 1 P s $end
$var wire 1 u) wA $end
$var wire 1 v) wnotS $end
$var wire 1 w) wB $end

$scope module notA $end
$var wire 1 v) out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 u) out $end
$var wire 1 m) in1 $end
$var wire 1 v) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 w) out $end
$var wire 1 n) in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 k) out $end
$var wire 1 u) in1 $end
$var wire 1 w) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 l) out $end
$var wire 1 P! inA $end
$var wire 1 `! inB $end
$var wire 1 p! inC $end
$var wire 1 "" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 x) w1 $end
$var wire 1 y) w2 $end

$scope module mux_ab $end
$var wire 1 x) out $end
$var wire 1 P! inA $end
$var wire 1 `! inB $end
$var wire 1 Q s $end
$var wire 1 z) wA $end
$var wire 1 {) wnotS $end
$var wire 1 |) wB $end

$scope module notA $end
$var wire 1 {) out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 z) out $end
$var wire 1 P! in1 $end
$var wire 1 {) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 |) out $end
$var wire 1 `! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 x) out $end
$var wire 1 z) in1 $end
$var wire 1 |) in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 y) out $end
$var wire 1 p! inA $end
$var wire 1 "" inB $end
$var wire 1 Q s $end
$var wire 1 }) wA $end
$var wire 1 ~) wnotS $end
$var wire 1 !* wB $end

$scope module notA $end
$var wire 1 ~) out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 }) out $end
$var wire 1 p! in1 $end
$var wire 1 ~) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 !* out $end
$var wire 1 "" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 y) out $end
$var wire 1 }) in1 $end
$var wire 1 !* in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 l) out $end
$var wire 1 x) inA $end
$var wire 1 y) inB $end
$var wire 1 P s $end
$var wire 1 "* wA $end
$var wire 1 #* wnotS $end
$var wire 1 $* wB $end

$scope module notA $end
$var wire 1 #* out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 "* out $end
$var wire 1 x) in1 $end
$var wire 1 #* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 $* out $end
$var wire 1 y) in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 l) out $end
$var wire 1 "* in1 $end
$var wire 1 $* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 1 out $end
$var wire 1 k) inA $end
$var wire 1 l) inB $end
$var wire 1 O s $end
$var wire 1 %* wA $end
$var wire 1 &* wnotS $end
$var wire 1 '* wB $end

$scope module notA $end
$var wire 1 &* out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 %* out $end
$var wire 1 k) in1 $end
$var wire 1 &* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 '* out $end
$var wire 1 l) in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 1 out $end
$var wire 1 %* in1 $end
$var wire 1 '* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[14] $end
$var wire 1 2 out $end
$var wire 1 o inA $end
$var wire 1 !! inB $end
$var wire 1 1! inC $end
$var wire 1 A! inD $end
$var wire 1 Q! inE $end
$var wire 1 a! inF $end
$var wire 1 q! inG $end
$var wire 1 #" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 (* outA $end
$var wire 1 )* outB $end

$scope module muxA $end
$var wire 1 (* out $end
$var wire 1 o inA $end
$var wire 1 !! inB $end
$var wire 1 1! inC $end
$var wire 1 A! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 ** w1 $end
$var wire 1 +* w2 $end

$scope module mux_ab $end
$var wire 1 ** out $end
$var wire 1 o inA $end
$var wire 1 !! inB $end
$var wire 1 Q s $end
$var wire 1 ,* wA $end
$var wire 1 -* wnotS $end
$var wire 1 .* wB $end

$scope module notA $end
$var wire 1 -* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ,* out $end
$var wire 1 o in1 $end
$var wire 1 -* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 .* out $end
$var wire 1 !! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 ** out $end
$var wire 1 ,* in1 $end
$var wire 1 .* in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 +* out $end
$var wire 1 1! inA $end
$var wire 1 A! inB $end
$var wire 1 Q s $end
$var wire 1 /* wA $end
$var wire 1 0* wnotS $end
$var wire 1 1* wB $end

$scope module notA $end
$var wire 1 0* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 /* out $end
$var wire 1 1! in1 $end
$var wire 1 0* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 1* out $end
$var wire 1 A! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 +* out $end
$var wire 1 /* in1 $end
$var wire 1 1* in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 (* out $end
$var wire 1 ** inA $end
$var wire 1 +* inB $end
$var wire 1 P s $end
$var wire 1 2* wA $end
$var wire 1 3* wnotS $end
$var wire 1 4* wB $end

$scope module notA $end
$var wire 1 3* out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 2* out $end
$var wire 1 ** in1 $end
$var wire 1 3* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 4* out $end
$var wire 1 +* in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 (* out $end
$var wire 1 2* in1 $end
$var wire 1 4* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 )* out $end
$var wire 1 Q! inA $end
$var wire 1 a! inB $end
$var wire 1 q! inC $end
$var wire 1 #" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 5* w1 $end
$var wire 1 6* w2 $end

$scope module mux_ab $end
$var wire 1 5* out $end
$var wire 1 Q! inA $end
$var wire 1 a! inB $end
$var wire 1 Q s $end
$var wire 1 7* wA $end
$var wire 1 8* wnotS $end
$var wire 1 9* wB $end

$scope module notA $end
$var wire 1 8* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 7* out $end
$var wire 1 Q! in1 $end
$var wire 1 8* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 9* out $end
$var wire 1 a! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 5* out $end
$var wire 1 7* in1 $end
$var wire 1 9* in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 6* out $end
$var wire 1 q! inA $end
$var wire 1 #" inB $end
$var wire 1 Q s $end
$var wire 1 :* wA $end
$var wire 1 ;* wnotS $end
$var wire 1 <* wB $end

$scope module notA $end
$var wire 1 ;* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 :* out $end
$var wire 1 q! in1 $end
$var wire 1 ;* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 <* out $end
$var wire 1 #" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 6* out $end
$var wire 1 :* in1 $end
$var wire 1 <* in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 )* out $end
$var wire 1 5* inA $end
$var wire 1 6* inB $end
$var wire 1 P s $end
$var wire 1 =* wA $end
$var wire 1 >* wnotS $end
$var wire 1 ?* wB $end

$scope module notA $end
$var wire 1 >* out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 =* out $end
$var wire 1 5* in1 $end
$var wire 1 >* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ?* out $end
$var wire 1 6* in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 )* out $end
$var wire 1 =* in1 $end
$var wire 1 ?* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 2 out $end
$var wire 1 (* inA $end
$var wire 1 )* inB $end
$var wire 1 O s $end
$var wire 1 @* wA $end
$var wire 1 A* wnotS $end
$var wire 1 B* wB $end

$scope module notA $end
$var wire 1 A* out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 @* out $end
$var wire 1 (* in1 $end
$var wire 1 A* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 B* out $end
$var wire 1 )* in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 2 out $end
$var wire 1 @* in1 $end
$var wire 1 B* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[13] $end
$var wire 1 3 out $end
$var wire 1 p inA $end
$var wire 1 "! inB $end
$var wire 1 2! inC $end
$var wire 1 B! inD $end
$var wire 1 R! inE $end
$var wire 1 b! inF $end
$var wire 1 r! inG $end
$var wire 1 $" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 C* outA $end
$var wire 1 D* outB $end

$scope module muxA $end
$var wire 1 C* out $end
$var wire 1 p inA $end
$var wire 1 "! inB $end
$var wire 1 2! inC $end
$var wire 1 B! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 E* w1 $end
$var wire 1 F* w2 $end

$scope module mux_ab $end
$var wire 1 E* out $end
$var wire 1 p inA $end
$var wire 1 "! inB $end
$var wire 1 Q s $end
$var wire 1 G* wA $end
$var wire 1 H* wnotS $end
$var wire 1 I* wB $end

$scope module notA $end
$var wire 1 H* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 G* out $end
$var wire 1 p in1 $end
$var wire 1 H* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 I* out $end
$var wire 1 "! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 E* out $end
$var wire 1 G* in1 $end
$var wire 1 I* in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 F* out $end
$var wire 1 2! inA $end
$var wire 1 B! inB $end
$var wire 1 Q s $end
$var wire 1 J* wA $end
$var wire 1 K* wnotS $end
$var wire 1 L* wB $end

$scope module notA $end
$var wire 1 K* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 J* out $end
$var wire 1 2! in1 $end
$var wire 1 K* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 L* out $end
$var wire 1 B! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 F* out $end
$var wire 1 J* in1 $end
$var wire 1 L* in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 C* out $end
$var wire 1 E* inA $end
$var wire 1 F* inB $end
$var wire 1 P s $end
$var wire 1 M* wA $end
$var wire 1 N* wnotS $end
$var wire 1 O* wB $end

$scope module notA $end
$var wire 1 N* out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 M* out $end
$var wire 1 E* in1 $end
$var wire 1 N* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 O* out $end
$var wire 1 F* in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 C* out $end
$var wire 1 M* in1 $end
$var wire 1 O* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 D* out $end
$var wire 1 R! inA $end
$var wire 1 b! inB $end
$var wire 1 r! inC $end
$var wire 1 $" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 P* w1 $end
$var wire 1 Q* w2 $end

$scope module mux_ab $end
$var wire 1 P* out $end
$var wire 1 R! inA $end
$var wire 1 b! inB $end
$var wire 1 Q s $end
$var wire 1 R* wA $end
$var wire 1 S* wnotS $end
$var wire 1 T* wB $end

$scope module notA $end
$var wire 1 S* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 R* out $end
$var wire 1 R! in1 $end
$var wire 1 S* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 T* out $end
$var wire 1 b! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 P* out $end
$var wire 1 R* in1 $end
$var wire 1 T* in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 Q* out $end
$var wire 1 r! inA $end
$var wire 1 $" inB $end
$var wire 1 Q s $end
$var wire 1 U* wA $end
$var wire 1 V* wnotS $end
$var wire 1 W* wB $end

$scope module notA $end
$var wire 1 V* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 U* out $end
$var wire 1 r! in1 $end
$var wire 1 V* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 W* out $end
$var wire 1 $" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 Q* out $end
$var wire 1 U* in1 $end
$var wire 1 W* in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 D* out $end
$var wire 1 P* inA $end
$var wire 1 Q* inB $end
$var wire 1 P s $end
$var wire 1 X* wA $end
$var wire 1 Y* wnotS $end
$var wire 1 Z* wB $end

$scope module notA $end
$var wire 1 Y* out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 X* out $end
$var wire 1 P* in1 $end
$var wire 1 Y* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 Z* out $end
$var wire 1 Q* in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 D* out $end
$var wire 1 X* in1 $end
$var wire 1 Z* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 3 out $end
$var wire 1 C* inA $end
$var wire 1 D* inB $end
$var wire 1 O s $end
$var wire 1 [* wA $end
$var wire 1 \* wnotS $end
$var wire 1 ]* wB $end

$scope module notA $end
$var wire 1 \* out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 [* out $end
$var wire 1 C* in1 $end
$var wire 1 \* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ]* out $end
$var wire 1 D* in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 3 out $end
$var wire 1 [* in1 $end
$var wire 1 ]* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[12] $end
$var wire 1 4 out $end
$var wire 1 q inA $end
$var wire 1 #! inB $end
$var wire 1 3! inC $end
$var wire 1 C! inD $end
$var wire 1 S! inE $end
$var wire 1 c! inF $end
$var wire 1 s! inG $end
$var wire 1 %" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 ^* outA $end
$var wire 1 _* outB $end

$scope module muxA $end
$var wire 1 ^* out $end
$var wire 1 q inA $end
$var wire 1 #! inB $end
$var wire 1 3! inC $end
$var wire 1 C! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 `* w1 $end
$var wire 1 a* w2 $end

$scope module mux_ab $end
$var wire 1 `* out $end
$var wire 1 q inA $end
$var wire 1 #! inB $end
$var wire 1 Q s $end
$var wire 1 b* wA $end
$var wire 1 c* wnotS $end
$var wire 1 d* wB $end

$scope module notA $end
$var wire 1 c* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 b* out $end
$var wire 1 q in1 $end
$var wire 1 c* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 d* out $end
$var wire 1 #! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 `* out $end
$var wire 1 b* in1 $end
$var wire 1 d* in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 a* out $end
$var wire 1 3! inA $end
$var wire 1 C! inB $end
$var wire 1 Q s $end
$var wire 1 e* wA $end
$var wire 1 f* wnotS $end
$var wire 1 g* wB $end

$scope module notA $end
$var wire 1 f* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 e* out $end
$var wire 1 3! in1 $end
$var wire 1 f* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 g* out $end
$var wire 1 C! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 a* out $end
$var wire 1 e* in1 $end
$var wire 1 g* in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 ^* out $end
$var wire 1 `* inA $end
$var wire 1 a* inB $end
$var wire 1 P s $end
$var wire 1 h* wA $end
$var wire 1 i* wnotS $end
$var wire 1 j* wB $end

$scope module notA $end
$var wire 1 i* out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 h* out $end
$var wire 1 `* in1 $end
$var wire 1 i* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 j* out $end
$var wire 1 a* in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 ^* out $end
$var wire 1 h* in1 $end
$var wire 1 j* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 _* out $end
$var wire 1 S! inA $end
$var wire 1 c! inB $end
$var wire 1 s! inC $end
$var wire 1 %" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 k* w1 $end
$var wire 1 l* w2 $end

$scope module mux_ab $end
$var wire 1 k* out $end
$var wire 1 S! inA $end
$var wire 1 c! inB $end
$var wire 1 Q s $end
$var wire 1 m* wA $end
$var wire 1 n* wnotS $end
$var wire 1 o* wB $end

$scope module notA $end
$var wire 1 n* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 m* out $end
$var wire 1 S! in1 $end
$var wire 1 n* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 o* out $end
$var wire 1 c! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 k* out $end
$var wire 1 m* in1 $end
$var wire 1 o* in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 l* out $end
$var wire 1 s! inA $end
$var wire 1 %" inB $end
$var wire 1 Q s $end
$var wire 1 p* wA $end
$var wire 1 q* wnotS $end
$var wire 1 r* wB $end

$scope module notA $end
$var wire 1 q* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 p* out $end
$var wire 1 s! in1 $end
$var wire 1 q* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 r* out $end
$var wire 1 %" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 l* out $end
$var wire 1 p* in1 $end
$var wire 1 r* in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 _* out $end
$var wire 1 k* inA $end
$var wire 1 l* inB $end
$var wire 1 P s $end
$var wire 1 s* wA $end
$var wire 1 t* wnotS $end
$var wire 1 u* wB $end

$scope module notA $end
$var wire 1 t* out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 s* out $end
$var wire 1 k* in1 $end
$var wire 1 t* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 u* out $end
$var wire 1 l* in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 _* out $end
$var wire 1 s* in1 $end
$var wire 1 u* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 4 out $end
$var wire 1 ^* inA $end
$var wire 1 _* inB $end
$var wire 1 O s $end
$var wire 1 v* wA $end
$var wire 1 w* wnotS $end
$var wire 1 x* wB $end

$scope module notA $end
$var wire 1 w* out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 v* out $end
$var wire 1 ^* in1 $end
$var wire 1 w* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 x* out $end
$var wire 1 _* in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 4 out $end
$var wire 1 v* in1 $end
$var wire 1 x* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[11] $end
$var wire 1 5 out $end
$var wire 1 r inA $end
$var wire 1 $! inB $end
$var wire 1 4! inC $end
$var wire 1 D! inD $end
$var wire 1 T! inE $end
$var wire 1 d! inF $end
$var wire 1 t! inG $end
$var wire 1 &" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 y* outA $end
$var wire 1 z* outB $end

$scope module muxA $end
$var wire 1 y* out $end
$var wire 1 r inA $end
$var wire 1 $! inB $end
$var wire 1 4! inC $end
$var wire 1 D! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 {* w1 $end
$var wire 1 |* w2 $end

$scope module mux_ab $end
$var wire 1 {* out $end
$var wire 1 r inA $end
$var wire 1 $! inB $end
$var wire 1 Q s $end
$var wire 1 }* wA $end
$var wire 1 ~* wnotS $end
$var wire 1 !+ wB $end

$scope module notA $end
$var wire 1 ~* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 }* out $end
$var wire 1 r in1 $end
$var wire 1 ~* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 !+ out $end
$var wire 1 $! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 {* out $end
$var wire 1 }* in1 $end
$var wire 1 !+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 |* out $end
$var wire 1 4! inA $end
$var wire 1 D! inB $end
$var wire 1 Q s $end
$var wire 1 "+ wA $end
$var wire 1 #+ wnotS $end
$var wire 1 $+ wB $end

$scope module notA $end
$var wire 1 #+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 "+ out $end
$var wire 1 4! in1 $end
$var wire 1 #+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 $+ out $end
$var wire 1 D! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 |* out $end
$var wire 1 "+ in1 $end
$var wire 1 $+ in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 y* out $end
$var wire 1 {* inA $end
$var wire 1 |* inB $end
$var wire 1 P s $end
$var wire 1 %+ wA $end
$var wire 1 &+ wnotS $end
$var wire 1 '+ wB $end

$scope module notA $end
$var wire 1 &+ out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 %+ out $end
$var wire 1 {* in1 $end
$var wire 1 &+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 '+ out $end
$var wire 1 |* in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 y* out $end
$var wire 1 %+ in1 $end
$var wire 1 '+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 z* out $end
$var wire 1 T! inA $end
$var wire 1 d! inB $end
$var wire 1 t! inC $end
$var wire 1 &" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 (+ w1 $end
$var wire 1 )+ w2 $end

$scope module mux_ab $end
$var wire 1 (+ out $end
$var wire 1 T! inA $end
$var wire 1 d! inB $end
$var wire 1 Q s $end
$var wire 1 *+ wA $end
$var wire 1 ++ wnotS $end
$var wire 1 ,+ wB $end

$scope module notA $end
$var wire 1 ++ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 *+ out $end
$var wire 1 T! in1 $end
$var wire 1 ++ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ,+ out $end
$var wire 1 d! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 (+ out $end
$var wire 1 *+ in1 $end
$var wire 1 ,+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 )+ out $end
$var wire 1 t! inA $end
$var wire 1 &" inB $end
$var wire 1 Q s $end
$var wire 1 -+ wA $end
$var wire 1 .+ wnotS $end
$var wire 1 /+ wB $end

$scope module notA $end
$var wire 1 .+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 -+ out $end
$var wire 1 t! in1 $end
$var wire 1 .+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 /+ out $end
$var wire 1 &" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 )+ out $end
$var wire 1 -+ in1 $end
$var wire 1 /+ in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 z* out $end
$var wire 1 (+ inA $end
$var wire 1 )+ inB $end
$var wire 1 P s $end
$var wire 1 0+ wA $end
$var wire 1 1+ wnotS $end
$var wire 1 2+ wB $end

$scope module notA $end
$var wire 1 1+ out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 0+ out $end
$var wire 1 (+ in1 $end
$var wire 1 1+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 2+ out $end
$var wire 1 )+ in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 z* out $end
$var wire 1 0+ in1 $end
$var wire 1 2+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 5 out $end
$var wire 1 y* inA $end
$var wire 1 z* inB $end
$var wire 1 O s $end
$var wire 1 3+ wA $end
$var wire 1 4+ wnotS $end
$var wire 1 5+ wB $end

$scope module notA $end
$var wire 1 4+ out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 3+ out $end
$var wire 1 y* in1 $end
$var wire 1 4+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 5+ out $end
$var wire 1 z* in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 5 out $end
$var wire 1 3+ in1 $end
$var wire 1 5+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[10] $end
$var wire 1 6 out $end
$var wire 1 s inA $end
$var wire 1 %! inB $end
$var wire 1 5! inC $end
$var wire 1 E! inD $end
$var wire 1 U! inE $end
$var wire 1 e! inF $end
$var wire 1 u! inG $end
$var wire 1 '" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 6+ outA $end
$var wire 1 7+ outB $end

$scope module muxA $end
$var wire 1 6+ out $end
$var wire 1 s inA $end
$var wire 1 %! inB $end
$var wire 1 5! inC $end
$var wire 1 E! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 8+ w1 $end
$var wire 1 9+ w2 $end

$scope module mux_ab $end
$var wire 1 8+ out $end
$var wire 1 s inA $end
$var wire 1 %! inB $end
$var wire 1 Q s $end
$var wire 1 :+ wA $end
$var wire 1 ;+ wnotS $end
$var wire 1 <+ wB $end

$scope module notA $end
$var wire 1 ;+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 :+ out $end
$var wire 1 s in1 $end
$var wire 1 ;+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 <+ out $end
$var wire 1 %! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 8+ out $end
$var wire 1 :+ in1 $end
$var wire 1 <+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 9+ out $end
$var wire 1 5! inA $end
$var wire 1 E! inB $end
$var wire 1 Q s $end
$var wire 1 =+ wA $end
$var wire 1 >+ wnotS $end
$var wire 1 ?+ wB $end

$scope module notA $end
$var wire 1 >+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 =+ out $end
$var wire 1 5! in1 $end
$var wire 1 >+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ?+ out $end
$var wire 1 E! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 9+ out $end
$var wire 1 =+ in1 $end
$var wire 1 ?+ in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 6+ out $end
$var wire 1 8+ inA $end
$var wire 1 9+ inB $end
$var wire 1 P s $end
$var wire 1 @+ wA $end
$var wire 1 A+ wnotS $end
$var wire 1 B+ wB $end

$scope module notA $end
$var wire 1 A+ out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 @+ out $end
$var wire 1 8+ in1 $end
$var wire 1 A+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 B+ out $end
$var wire 1 9+ in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 6+ out $end
$var wire 1 @+ in1 $end
$var wire 1 B+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 7+ out $end
$var wire 1 U! inA $end
$var wire 1 e! inB $end
$var wire 1 u! inC $end
$var wire 1 '" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 C+ w1 $end
$var wire 1 D+ w2 $end

$scope module mux_ab $end
$var wire 1 C+ out $end
$var wire 1 U! inA $end
$var wire 1 e! inB $end
$var wire 1 Q s $end
$var wire 1 E+ wA $end
$var wire 1 F+ wnotS $end
$var wire 1 G+ wB $end

$scope module notA $end
$var wire 1 F+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 E+ out $end
$var wire 1 U! in1 $end
$var wire 1 F+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 G+ out $end
$var wire 1 e! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 C+ out $end
$var wire 1 E+ in1 $end
$var wire 1 G+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 D+ out $end
$var wire 1 u! inA $end
$var wire 1 '" inB $end
$var wire 1 Q s $end
$var wire 1 H+ wA $end
$var wire 1 I+ wnotS $end
$var wire 1 J+ wB $end

$scope module notA $end
$var wire 1 I+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 H+ out $end
$var wire 1 u! in1 $end
$var wire 1 I+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 J+ out $end
$var wire 1 '" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 D+ out $end
$var wire 1 H+ in1 $end
$var wire 1 J+ in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 7+ out $end
$var wire 1 C+ inA $end
$var wire 1 D+ inB $end
$var wire 1 P s $end
$var wire 1 K+ wA $end
$var wire 1 L+ wnotS $end
$var wire 1 M+ wB $end

$scope module notA $end
$var wire 1 L+ out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 K+ out $end
$var wire 1 C+ in1 $end
$var wire 1 L+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 M+ out $end
$var wire 1 D+ in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 7+ out $end
$var wire 1 K+ in1 $end
$var wire 1 M+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 6 out $end
$var wire 1 6+ inA $end
$var wire 1 7+ inB $end
$var wire 1 O s $end
$var wire 1 N+ wA $end
$var wire 1 O+ wnotS $end
$var wire 1 P+ wB $end

$scope module notA $end
$var wire 1 O+ out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 N+ out $end
$var wire 1 6+ in1 $end
$var wire 1 O+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 P+ out $end
$var wire 1 7+ in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 6 out $end
$var wire 1 N+ in1 $end
$var wire 1 P+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[9] $end
$var wire 1 7 out $end
$var wire 1 t inA $end
$var wire 1 &! inB $end
$var wire 1 6! inC $end
$var wire 1 F! inD $end
$var wire 1 V! inE $end
$var wire 1 f! inF $end
$var wire 1 v! inG $end
$var wire 1 (" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 Q+ outA $end
$var wire 1 R+ outB $end

$scope module muxA $end
$var wire 1 Q+ out $end
$var wire 1 t inA $end
$var wire 1 &! inB $end
$var wire 1 6! inC $end
$var wire 1 F! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 S+ w1 $end
$var wire 1 T+ w2 $end

$scope module mux_ab $end
$var wire 1 S+ out $end
$var wire 1 t inA $end
$var wire 1 &! inB $end
$var wire 1 Q s $end
$var wire 1 U+ wA $end
$var wire 1 V+ wnotS $end
$var wire 1 W+ wB $end

$scope module notA $end
$var wire 1 V+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 U+ out $end
$var wire 1 t in1 $end
$var wire 1 V+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 W+ out $end
$var wire 1 &! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 S+ out $end
$var wire 1 U+ in1 $end
$var wire 1 W+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 T+ out $end
$var wire 1 6! inA $end
$var wire 1 F! inB $end
$var wire 1 Q s $end
$var wire 1 X+ wA $end
$var wire 1 Y+ wnotS $end
$var wire 1 Z+ wB $end

$scope module notA $end
$var wire 1 Y+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 X+ out $end
$var wire 1 6! in1 $end
$var wire 1 Y+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 Z+ out $end
$var wire 1 F! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 T+ out $end
$var wire 1 X+ in1 $end
$var wire 1 Z+ in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 Q+ out $end
$var wire 1 S+ inA $end
$var wire 1 T+ inB $end
$var wire 1 P s $end
$var wire 1 [+ wA $end
$var wire 1 \+ wnotS $end
$var wire 1 ]+ wB $end

$scope module notA $end
$var wire 1 \+ out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 [+ out $end
$var wire 1 S+ in1 $end
$var wire 1 \+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ]+ out $end
$var wire 1 T+ in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 Q+ out $end
$var wire 1 [+ in1 $end
$var wire 1 ]+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 R+ out $end
$var wire 1 V! inA $end
$var wire 1 f! inB $end
$var wire 1 v! inC $end
$var wire 1 (" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 ^+ w1 $end
$var wire 1 _+ w2 $end

$scope module mux_ab $end
$var wire 1 ^+ out $end
$var wire 1 V! inA $end
$var wire 1 f! inB $end
$var wire 1 Q s $end
$var wire 1 `+ wA $end
$var wire 1 a+ wnotS $end
$var wire 1 b+ wB $end

$scope module notA $end
$var wire 1 a+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 `+ out $end
$var wire 1 V! in1 $end
$var wire 1 a+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 b+ out $end
$var wire 1 f! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 ^+ out $end
$var wire 1 `+ in1 $end
$var wire 1 b+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 _+ out $end
$var wire 1 v! inA $end
$var wire 1 (" inB $end
$var wire 1 Q s $end
$var wire 1 c+ wA $end
$var wire 1 d+ wnotS $end
$var wire 1 e+ wB $end

$scope module notA $end
$var wire 1 d+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 c+ out $end
$var wire 1 v! in1 $end
$var wire 1 d+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 e+ out $end
$var wire 1 (" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 _+ out $end
$var wire 1 c+ in1 $end
$var wire 1 e+ in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 R+ out $end
$var wire 1 ^+ inA $end
$var wire 1 _+ inB $end
$var wire 1 P s $end
$var wire 1 f+ wA $end
$var wire 1 g+ wnotS $end
$var wire 1 h+ wB $end

$scope module notA $end
$var wire 1 g+ out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 f+ out $end
$var wire 1 ^+ in1 $end
$var wire 1 g+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 h+ out $end
$var wire 1 _+ in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 R+ out $end
$var wire 1 f+ in1 $end
$var wire 1 h+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 7 out $end
$var wire 1 Q+ inA $end
$var wire 1 R+ inB $end
$var wire 1 O s $end
$var wire 1 i+ wA $end
$var wire 1 j+ wnotS $end
$var wire 1 k+ wB $end

$scope module notA $end
$var wire 1 j+ out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 i+ out $end
$var wire 1 Q+ in1 $end
$var wire 1 j+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 k+ out $end
$var wire 1 R+ in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 7 out $end
$var wire 1 i+ in1 $end
$var wire 1 k+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[8] $end
$var wire 1 8 out $end
$var wire 1 u inA $end
$var wire 1 '! inB $end
$var wire 1 7! inC $end
$var wire 1 G! inD $end
$var wire 1 W! inE $end
$var wire 1 g! inF $end
$var wire 1 w! inG $end
$var wire 1 )" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 l+ outA $end
$var wire 1 m+ outB $end

$scope module muxA $end
$var wire 1 l+ out $end
$var wire 1 u inA $end
$var wire 1 '! inB $end
$var wire 1 7! inC $end
$var wire 1 G! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 n+ w1 $end
$var wire 1 o+ w2 $end

$scope module mux_ab $end
$var wire 1 n+ out $end
$var wire 1 u inA $end
$var wire 1 '! inB $end
$var wire 1 Q s $end
$var wire 1 p+ wA $end
$var wire 1 q+ wnotS $end
$var wire 1 r+ wB $end

$scope module notA $end
$var wire 1 q+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 p+ out $end
$var wire 1 u in1 $end
$var wire 1 q+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 r+ out $end
$var wire 1 '! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 n+ out $end
$var wire 1 p+ in1 $end
$var wire 1 r+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 o+ out $end
$var wire 1 7! inA $end
$var wire 1 G! inB $end
$var wire 1 Q s $end
$var wire 1 s+ wA $end
$var wire 1 t+ wnotS $end
$var wire 1 u+ wB $end

$scope module notA $end
$var wire 1 t+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 s+ out $end
$var wire 1 7! in1 $end
$var wire 1 t+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 u+ out $end
$var wire 1 G! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 o+ out $end
$var wire 1 s+ in1 $end
$var wire 1 u+ in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 l+ out $end
$var wire 1 n+ inA $end
$var wire 1 o+ inB $end
$var wire 1 P s $end
$var wire 1 v+ wA $end
$var wire 1 w+ wnotS $end
$var wire 1 x+ wB $end

$scope module notA $end
$var wire 1 w+ out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 v+ out $end
$var wire 1 n+ in1 $end
$var wire 1 w+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 x+ out $end
$var wire 1 o+ in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 l+ out $end
$var wire 1 v+ in1 $end
$var wire 1 x+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 m+ out $end
$var wire 1 W! inA $end
$var wire 1 g! inB $end
$var wire 1 w! inC $end
$var wire 1 )" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 y+ w1 $end
$var wire 1 z+ w2 $end

$scope module mux_ab $end
$var wire 1 y+ out $end
$var wire 1 W! inA $end
$var wire 1 g! inB $end
$var wire 1 Q s $end
$var wire 1 {+ wA $end
$var wire 1 |+ wnotS $end
$var wire 1 }+ wB $end

$scope module notA $end
$var wire 1 |+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 {+ out $end
$var wire 1 W! in1 $end
$var wire 1 |+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 }+ out $end
$var wire 1 g! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 y+ out $end
$var wire 1 {+ in1 $end
$var wire 1 }+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 z+ out $end
$var wire 1 w! inA $end
$var wire 1 )" inB $end
$var wire 1 Q s $end
$var wire 1 ~+ wA $end
$var wire 1 !, wnotS $end
$var wire 1 ", wB $end

$scope module notA $end
$var wire 1 !, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ~+ out $end
$var wire 1 w! in1 $end
$var wire 1 !, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ", out $end
$var wire 1 )" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 z+ out $end
$var wire 1 ~+ in1 $end
$var wire 1 ", in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 m+ out $end
$var wire 1 y+ inA $end
$var wire 1 z+ inB $end
$var wire 1 P s $end
$var wire 1 #, wA $end
$var wire 1 $, wnotS $end
$var wire 1 %, wB $end

$scope module notA $end
$var wire 1 $, out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 #, out $end
$var wire 1 y+ in1 $end
$var wire 1 $, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 %, out $end
$var wire 1 z+ in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 m+ out $end
$var wire 1 #, in1 $end
$var wire 1 %, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 8 out $end
$var wire 1 l+ inA $end
$var wire 1 m+ inB $end
$var wire 1 O s $end
$var wire 1 &, wA $end
$var wire 1 ', wnotS $end
$var wire 1 (, wB $end

$scope module notA $end
$var wire 1 ', out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 &, out $end
$var wire 1 l+ in1 $end
$var wire 1 ', in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 (, out $end
$var wire 1 m+ in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 8 out $end
$var wire 1 &, in1 $end
$var wire 1 (, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[7] $end
$var wire 1 9 out $end
$var wire 1 v inA $end
$var wire 1 (! inB $end
$var wire 1 8! inC $end
$var wire 1 H! inD $end
$var wire 1 X! inE $end
$var wire 1 h! inF $end
$var wire 1 x! inG $end
$var wire 1 *" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 ), outA $end
$var wire 1 *, outB $end

$scope module muxA $end
$var wire 1 ), out $end
$var wire 1 v inA $end
$var wire 1 (! inB $end
$var wire 1 8! inC $end
$var wire 1 H! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 +, w1 $end
$var wire 1 ,, w2 $end

$scope module mux_ab $end
$var wire 1 +, out $end
$var wire 1 v inA $end
$var wire 1 (! inB $end
$var wire 1 Q s $end
$var wire 1 -, wA $end
$var wire 1 ., wnotS $end
$var wire 1 /, wB $end

$scope module notA $end
$var wire 1 ., out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 -, out $end
$var wire 1 v in1 $end
$var wire 1 ., in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 /, out $end
$var wire 1 (! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 +, out $end
$var wire 1 -, in1 $end
$var wire 1 /, in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 ,, out $end
$var wire 1 8! inA $end
$var wire 1 H! inB $end
$var wire 1 Q s $end
$var wire 1 0, wA $end
$var wire 1 1, wnotS $end
$var wire 1 2, wB $end

$scope module notA $end
$var wire 1 1, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 0, out $end
$var wire 1 8! in1 $end
$var wire 1 1, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 2, out $end
$var wire 1 H! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 ,, out $end
$var wire 1 0, in1 $end
$var wire 1 2, in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 ), out $end
$var wire 1 +, inA $end
$var wire 1 ,, inB $end
$var wire 1 P s $end
$var wire 1 3, wA $end
$var wire 1 4, wnotS $end
$var wire 1 5, wB $end

$scope module notA $end
$var wire 1 4, out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 3, out $end
$var wire 1 +, in1 $end
$var wire 1 4, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 5, out $end
$var wire 1 ,, in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 ), out $end
$var wire 1 3, in1 $end
$var wire 1 5, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 *, out $end
$var wire 1 X! inA $end
$var wire 1 h! inB $end
$var wire 1 x! inC $end
$var wire 1 *" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 6, w1 $end
$var wire 1 7, w2 $end

$scope module mux_ab $end
$var wire 1 6, out $end
$var wire 1 X! inA $end
$var wire 1 h! inB $end
$var wire 1 Q s $end
$var wire 1 8, wA $end
$var wire 1 9, wnotS $end
$var wire 1 :, wB $end

$scope module notA $end
$var wire 1 9, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 8, out $end
$var wire 1 X! in1 $end
$var wire 1 9, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 :, out $end
$var wire 1 h! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 6, out $end
$var wire 1 8, in1 $end
$var wire 1 :, in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 7, out $end
$var wire 1 x! inA $end
$var wire 1 *" inB $end
$var wire 1 Q s $end
$var wire 1 ;, wA $end
$var wire 1 <, wnotS $end
$var wire 1 =, wB $end

$scope module notA $end
$var wire 1 <, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ;, out $end
$var wire 1 x! in1 $end
$var wire 1 <, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 =, out $end
$var wire 1 *" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 7, out $end
$var wire 1 ;, in1 $end
$var wire 1 =, in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 *, out $end
$var wire 1 6, inA $end
$var wire 1 7, inB $end
$var wire 1 P s $end
$var wire 1 >, wA $end
$var wire 1 ?, wnotS $end
$var wire 1 @, wB $end

$scope module notA $end
$var wire 1 ?, out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 >, out $end
$var wire 1 6, in1 $end
$var wire 1 ?, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 @, out $end
$var wire 1 7, in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 *, out $end
$var wire 1 >, in1 $end
$var wire 1 @, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 9 out $end
$var wire 1 ), inA $end
$var wire 1 *, inB $end
$var wire 1 O s $end
$var wire 1 A, wA $end
$var wire 1 B, wnotS $end
$var wire 1 C, wB $end

$scope module notA $end
$var wire 1 B, out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 A, out $end
$var wire 1 ), in1 $end
$var wire 1 B, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 C, out $end
$var wire 1 *, in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 9 out $end
$var wire 1 A, in1 $end
$var wire 1 C, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[6] $end
$var wire 1 : out $end
$var wire 1 w inA $end
$var wire 1 )! inB $end
$var wire 1 9! inC $end
$var wire 1 I! inD $end
$var wire 1 Y! inE $end
$var wire 1 i! inF $end
$var wire 1 y! inG $end
$var wire 1 +" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 D, outA $end
$var wire 1 E, outB $end

$scope module muxA $end
$var wire 1 D, out $end
$var wire 1 w inA $end
$var wire 1 )! inB $end
$var wire 1 9! inC $end
$var wire 1 I! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 F, w1 $end
$var wire 1 G, w2 $end

$scope module mux_ab $end
$var wire 1 F, out $end
$var wire 1 w inA $end
$var wire 1 )! inB $end
$var wire 1 Q s $end
$var wire 1 H, wA $end
$var wire 1 I, wnotS $end
$var wire 1 J, wB $end

$scope module notA $end
$var wire 1 I, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 H, out $end
$var wire 1 w in1 $end
$var wire 1 I, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 J, out $end
$var wire 1 )! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 F, out $end
$var wire 1 H, in1 $end
$var wire 1 J, in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 G, out $end
$var wire 1 9! inA $end
$var wire 1 I! inB $end
$var wire 1 Q s $end
$var wire 1 K, wA $end
$var wire 1 L, wnotS $end
$var wire 1 M, wB $end

$scope module notA $end
$var wire 1 L, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 K, out $end
$var wire 1 9! in1 $end
$var wire 1 L, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 M, out $end
$var wire 1 I! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 G, out $end
$var wire 1 K, in1 $end
$var wire 1 M, in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 D, out $end
$var wire 1 F, inA $end
$var wire 1 G, inB $end
$var wire 1 P s $end
$var wire 1 N, wA $end
$var wire 1 O, wnotS $end
$var wire 1 P, wB $end

$scope module notA $end
$var wire 1 O, out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 N, out $end
$var wire 1 F, in1 $end
$var wire 1 O, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 P, out $end
$var wire 1 G, in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 D, out $end
$var wire 1 N, in1 $end
$var wire 1 P, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 E, out $end
$var wire 1 Y! inA $end
$var wire 1 i! inB $end
$var wire 1 y! inC $end
$var wire 1 +" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 Q, w1 $end
$var wire 1 R, w2 $end

$scope module mux_ab $end
$var wire 1 Q, out $end
$var wire 1 Y! inA $end
$var wire 1 i! inB $end
$var wire 1 Q s $end
$var wire 1 S, wA $end
$var wire 1 T, wnotS $end
$var wire 1 U, wB $end

$scope module notA $end
$var wire 1 T, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 S, out $end
$var wire 1 Y! in1 $end
$var wire 1 T, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 U, out $end
$var wire 1 i! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 Q, out $end
$var wire 1 S, in1 $end
$var wire 1 U, in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 R, out $end
$var wire 1 y! inA $end
$var wire 1 +" inB $end
$var wire 1 Q s $end
$var wire 1 V, wA $end
$var wire 1 W, wnotS $end
$var wire 1 X, wB $end

$scope module notA $end
$var wire 1 W, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 V, out $end
$var wire 1 y! in1 $end
$var wire 1 W, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 X, out $end
$var wire 1 +" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 R, out $end
$var wire 1 V, in1 $end
$var wire 1 X, in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 E, out $end
$var wire 1 Q, inA $end
$var wire 1 R, inB $end
$var wire 1 P s $end
$var wire 1 Y, wA $end
$var wire 1 Z, wnotS $end
$var wire 1 [, wB $end

$scope module notA $end
$var wire 1 Z, out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 Y, out $end
$var wire 1 Q, in1 $end
$var wire 1 Z, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 [, out $end
$var wire 1 R, in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 E, out $end
$var wire 1 Y, in1 $end
$var wire 1 [, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 : out $end
$var wire 1 D, inA $end
$var wire 1 E, inB $end
$var wire 1 O s $end
$var wire 1 \, wA $end
$var wire 1 ], wnotS $end
$var wire 1 ^, wB $end

$scope module notA $end
$var wire 1 ], out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 \, out $end
$var wire 1 D, in1 $end
$var wire 1 ], in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ^, out $end
$var wire 1 E, in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 : out $end
$var wire 1 \, in1 $end
$var wire 1 ^, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[5] $end
$var wire 1 ; out $end
$var wire 1 x inA $end
$var wire 1 *! inB $end
$var wire 1 :! inC $end
$var wire 1 J! inD $end
$var wire 1 Z! inE $end
$var wire 1 j! inF $end
$var wire 1 z! inG $end
$var wire 1 ," inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 _, outA $end
$var wire 1 `, outB $end

$scope module muxA $end
$var wire 1 _, out $end
$var wire 1 x inA $end
$var wire 1 *! inB $end
$var wire 1 :! inC $end
$var wire 1 J! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 a, w1 $end
$var wire 1 b, w2 $end

$scope module mux_ab $end
$var wire 1 a, out $end
$var wire 1 x inA $end
$var wire 1 *! inB $end
$var wire 1 Q s $end
$var wire 1 c, wA $end
$var wire 1 d, wnotS $end
$var wire 1 e, wB $end

$scope module notA $end
$var wire 1 d, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 c, out $end
$var wire 1 x in1 $end
$var wire 1 d, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 e, out $end
$var wire 1 *! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 a, out $end
$var wire 1 c, in1 $end
$var wire 1 e, in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 b, out $end
$var wire 1 :! inA $end
$var wire 1 J! inB $end
$var wire 1 Q s $end
$var wire 1 f, wA $end
$var wire 1 g, wnotS $end
$var wire 1 h, wB $end

$scope module notA $end
$var wire 1 g, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 f, out $end
$var wire 1 :! in1 $end
$var wire 1 g, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 h, out $end
$var wire 1 J! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 b, out $end
$var wire 1 f, in1 $end
$var wire 1 h, in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 _, out $end
$var wire 1 a, inA $end
$var wire 1 b, inB $end
$var wire 1 P s $end
$var wire 1 i, wA $end
$var wire 1 j, wnotS $end
$var wire 1 k, wB $end

$scope module notA $end
$var wire 1 j, out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 i, out $end
$var wire 1 a, in1 $end
$var wire 1 j, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 k, out $end
$var wire 1 b, in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 _, out $end
$var wire 1 i, in1 $end
$var wire 1 k, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 `, out $end
$var wire 1 Z! inA $end
$var wire 1 j! inB $end
$var wire 1 z! inC $end
$var wire 1 ," inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 l, w1 $end
$var wire 1 m, w2 $end

$scope module mux_ab $end
$var wire 1 l, out $end
$var wire 1 Z! inA $end
$var wire 1 j! inB $end
$var wire 1 Q s $end
$var wire 1 n, wA $end
$var wire 1 o, wnotS $end
$var wire 1 p, wB $end

$scope module notA $end
$var wire 1 o, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 n, out $end
$var wire 1 Z! in1 $end
$var wire 1 o, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 p, out $end
$var wire 1 j! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 l, out $end
$var wire 1 n, in1 $end
$var wire 1 p, in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 m, out $end
$var wire 1 z! inA $end
$var wire 1 ," inB $end
$var wire 1 Q s $end
$var wire 1 q, wA $end
$var wire 1 r, wnotS $end
$var wire 1 s, wB $end

$scope module notA $end
$var wire 1 r, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 q, out $end
$var wire 1 z! in1 $end
$var wire 1 r, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 s, out $end
$var wire 1 ," in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 m, out $end
$var wire 1 q, in1 $end
$var wire 1 s, in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 `, out $end
$var wire 1 l, inA $end
$var wire 1 m, inB $end
$var wire 1 P s $end
$var wire 1 t, wA $end
$var wire 1 u, wnotS $end
$var wire 1 v, wB $end

$scope module notA $end
$var wire 1 u, out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 t, out $end
$var wire 1 l, in1 $end
$var wire 1 u, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 v, out $end
$var wire 1 m, in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 `, out $end
$var wire 1 t, in1 $end
$var wire 1 v, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 ; out $end
$var wire 1 _, inA $end
$var wire 1 `, inB $end
$var wire 1 O s $end
$var wire 1 w, wA $end
$var wire 1 x, wnotS $end
$var wire 1 y, wB $end

$scope module notA $end
$var wire 1 x, out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 w, out $end
$var wire 1 _, in1 $end
$var wire 1 x, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 y, out $end
$var wire 1 `, in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 ; out $end
$var wire 1 w, in1 $end
$var wire 1 y, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[4] $end
$var wire 1 < out $end
$var wire 1 y inA $end
$var wire 1 +! inB $end
$var wire 1 ;! inC $end
$var wire 1 K! inD $end
$var wire 1 [! inE $end
$var wire 1 k! inF $end
$var wire 1 {! inG $end
$var wire 1 -" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 z, outA $end
$var wire 1 {, outB $end

$scope module muxA $end
$var wire 1 z, out $end
$var wire 1 y inA $end
$var wire 1 +! inB $end
$var wire 1 ;! inC $end
$var wire 1 K! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 |, w1 $end
$var wire 1 }, w2 $end

$scope module mux_ab $end
$var wire 1 |, out $end
$var wire 1 y inA $end
$var wire 1 +! inB $end
$var wire 1 Q s $end
$var wire 1 ~, wA $end
$var wire 1 !- wnotS $end
$var wire 1 "- wB $end

$scope module notA $end
$var wire 1 !- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ~, out $end
$var wire 1 y in1 $end
$var wire 1 !- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 "- out $end
$var wire 1 +! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 |, out $end
$var wire 1 ~, in1 $end
$var wire 1 "- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 }, out $end
$var wire 1 ;! inA $end
$var wire 1 K! inB $end
$var wire 1 Q s $end
$var wire 1 #- wA $end
$var wire 1 $- wnotS $end
$var wire 1 %- wB $end

$scope module notA $end
$var wire 1 $- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 #- out $end
$var wire 1 ;! in1 $end
$var wire 1 $- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 %- out $end
$var wire 1 K! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 }, out $end
$var wire 1 #- in1 $end
$var wire 1 %- in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 z, out $end
$var wire 1 |, inA $end
$var wire 1 }, inB $end
$var wire 1 P s $end
$var wire 1 &- wA $end
$var wire 1 '- wnotS $end
$var wire 1 (- wB $end

$scope module notA $end
$var wire 1 '- out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 &- out $end
$var wire 1 |, in1 $end
$var wire 1 '- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 (- out $end
$var wire 1 }, in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 z, out $end
$var wire 1 &- in1 $end
$var wire 1 (- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 {, out $end
$var wire 1 [! inA $end
$var wire 1 k! inB $end
$var wire 1 {! inC $end
$var wire 1 -" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 )- w1 $end
$var wire 1 *- w2 $end

$scope module mux_ab $end
$var wire 1 )- out $end
$var wire 1 [! inA $end
$var wire 1 k! inB $end
$var wire 1 Q s $end
$var wire 1 +- wA $end
$var wire 1 ,- wnotS $end
$var wire 1 -- wB $end

$scope module notA $end
$var wire 1 ,- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 +- out $end
$var wire 1 [! in1 $end
$var wire 1 ,- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 -- out $end
$var wire 1 k! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 )- out $end
$var wire 1 +- in1 $end
$var wire 1 -- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 *- out $end
$var wire 1 {! inA $end
$var wire 1 -" inB $end
$var wire 1 Q s $end
$var wire 1 .- wA $end
$var wire 1 /- wnotS $end
$var wire 1 0- wB $end

$scope module notA $end
$var wire 1 /- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 .- out $end
$var wire 1 {! in1 $end
$var wire 1 /- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 0- out $end
$var wire 1 -" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 *- out $end
$var wire 1 .- in1 $end
$var wire 1 0- in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 {, out $end
$var wire 1 )- inA $end
$var wire 1 *- inB $end
$var wire 1 P s $end
$var wire 1 1- wA $end
$var wire 1 2- wnotS $end
$var wire 1 3- wB $end

$scope module notA $end
$var wire 1 2- out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 1- out $end
$var wire 1 )- in1 $end
$var wire 1 2- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 3- out $end
$var wire 1 *- in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 {, out $end
$var wire 1 1- in1 $end
$var wire 1 3- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 < out $end
$var wire 1 z, inA $end
$var wire 1 {, inB $end
$var wire 1 O s $end
$var wire 1 4- wA $end
$var wire 1 5- wnotS $end
$var wire 1 6- wB $end

$scope module notA $end
$var wire 1 5- out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 4- out $end
$var wire 1 z, in1 $end
$var wire 1 5- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 6- out $end
$var wire 1 {, in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 < out $end
$var wire 1 4- in1 $end
$var wire 1 6- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[3] $end
$var wire 1 = out $end
$var wire 1 z inA $end
$var wire 1 ,! inB $end
$var wire 1 <! inC $end
$var wire 1 L! inD $end
$var wire 1 \! inE $end
$var wire 1 l! inF $end
$var wire 1 |! inG $end
$var wire 1 ." inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 7- outA $end
$var wire 1 8- outB $end

$scope module muxA $end
$var wire 1 7- out $end
$var wire 1 z inA $end
$var wire 1 ,! inB $end
$var wire 1 <! inC $end
$var wire 1 L! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 9- w1 $end
$var wire 1 :- w2 $end

$scope module mux_ab $end
$var wire 1 9- out $end
$var wire 1 z inA $end
$var wire 1 ,! inB $end
$var wire 1 Q s $end
$var wire 1 ;- wA $end
$var wire 1 <- wnotS $end
$var wire 1 =- wB $end

$scope module notA $end
$var wire 1 <- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ;- out $end
$var wire 1 z in1 $end
$var wire 1 <- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 =- out $end
$var wire 1 ,! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 9- out $end
$var wire 1 ;- in1 $end
$var wire 1 =- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 :- out $end
$var wire 1 <! inA $end
$var wire 1 L! inB $end
$var wire 1 Q s $end
$var wire 1 >- wA $end
$var wire 1 ?- wnotS $end
$var wire 1 @- wB $end

$scope module notA $end
$var wire 1 ?- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 >- out $end
$var wire 1 <! in1 $end
$var wire 1 ?- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 @- out $end
$var wire 1 L! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 :- out $end
$var wire 1 >- in1 $end
$var wire 1 @- in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 7- out $end
$var wire 1 9- inA $end
$var wire 1 :- inB $end
$var wire 1 P s $end
$var wire 1 A- wA $end
$var wire 1 B- wnotS $end
$var wire 1 C- wB $end

$scope module notA $end
$var wire 1 B- out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 A- out $end
$var wire 1 9- in1 $end
$var wire 1 B- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 C- out $end
$var wire 1 :- in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 7- out $end
$var wire 1 A- in1 $end
$var wire 1 C- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 8- out $end
$var wire 1 \! inA $end
$var wire 1 l! inB $end
$var wire 1 |! inC $end
$var wire 1 ." inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 D- w1 $end
$var wire 1 E- w2 $end

$scope module mux_ab $end
$var wire 1 D- out $end
$var wire 1 \! inA $end
$var wire 1 l! inB $end
$var wire 1 Q s $end
$var wire 1 F- wA $end
$var wire 1 G- wnotS $end
$var wire 1 H- wB $end

$scope module notA $end
$var wire 1 G- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 F- out $end
$var wire 1 \! in1 $end
$var wire 1 G- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 H- out $end
$var wire 1 l! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 D- out $end
$var wire 1 F- in1 $end
$var wire 1 H- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 E- out $end
$var wire 1 |! inA $end
$var wire 1 ." inB $end
$var wire 1 Q s $end
$var wire 1 I- wA $end
$var wire 1 J- wnotS $end
$var wire 1 K- wB $end

$scope module notA $end
$var wire 1 J- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 I- out $end
$var wire 1 |! in1 $end
$var wire 1 J- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 K- out $end
$var wire 1 ." in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 E- out $end
$var wire 1 I- in1 $end
$var wire 1 K- in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 8- out $end
$var wire 1 D- inA $end
$var wire 1 E- inB $end
$var wire 1 P s $end
$var wire 1 L- wA $end
$var wire 1 M- wnotS $end
$var wire 1 N- wB $end

$scope module notA $end
$var wire 1 M- out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 L- out $end
$var wire 1 D- in1 $end
$var wire 1 M- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 N- out $end
$var wire 1 E- in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 8- out $end
$var wire 1 L- in1 $end
$var wire 1 N- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 = out $end
$var wire 1 7- inA $end
$var wire 1 8- inB $end
$var wire 1 O s $end
$var wire 1 O- wA $end
$var wire 1 P- wnotS $end
$var wire 1 Q- wB $end

$scope module notA $end
$var wire 1 P- out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 O- out $end
$var wire 1 7- in1 $end
$var wire 1 P- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 Q- out $end
$var wire 1 8- in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 = out $end
$var wire 1 O- in1 $end
$var wire 1 Q- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[2] $end
$var wire 1 > out $end
$var wire 1 { inA $end
$var wire 1 -! inB $end
$var wire 1 =! inC $end
$var wire 1 M! inD $end
$var wire 1 ]! inE $end
$var wire 1 m! inF $end
$var wire 1 }! inG $end
$var wire 1 /" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 R- outA $end
$var wire 1 S- outB $end

$scope module muxA $end
$var wire 1 R- out $end
$var wire 1 { inA $end
$var wire 1 -! inB $end
$var wire 1 =! inC $end
$var wire 1 M! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 T- w1 $end
$var wire 1 U- w2 $end

$scope module mux_ab $end
$var wire 1 T- out $end
$var wire 1 { inA $end
$var wire 1 -! inB $end
$var wire 1 Q s $end
$var wire 1 V- wA $end
$var wire 1 W- wnotS $end
$var wire 1 X- wB $end

$scope module notA $end
$var wire 1 W- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 V- out $end
$var wire 1 { in1 $end
$var wire 1 W- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 X- out $end
$var wire 1 -! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 T- out $end
$var wire 1 V- in1 $end
$var wire 1 X- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 U- out $end
$var wire 1 =! inA $end
$var wire 1 M! inB $end
$var wire 1 Q s $end
$var wire 1 Y- wA $end
$var wire 1 Z- wnotS $end
$var wire 1 [- wB $end

$scope module notA $end
$var wire 1 Z- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 Y- out $end
$var wire 1 =! in1 $end
$var wire 1 Z- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 [- out $end
$var wire 1 M! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 U- out $end
$var wire 1 Y- in1 $end
$var wire 1 [- in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 R- out $end
$var wire 1 T- inA $end
$var wire 1 U- inB $end
$var wire 1 P s $end
$var wire 1 \- wA $end
$var wire 1 ]- wnotS $end
$var wire 1 ^- wB $end

$scope module notA $end
$var wire 1 ]- out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 \- out $end
$var wire 1 T- in1 $end
$var wire 1 ]- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ^- out $end
$var wire 1 U- in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 R- out $end
$var wire 1 \- in1 $end
$var wire 1 ^- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 S- out $end
$var wire 1 ]! inA $end
$var wire 1 m! inB $end
$var wire 1 }! inC $end
$var wire 1 /" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 _- w1 $end
$var wire 1 `- w2 $end

$scope module mux_ab $end
$var wire 1 _- out $end
$var wire 1 ]! inA $end
$var wire 1 m! inB $end
$var wire 1 Q s $end
$var wire 1 a- wA $end
$var wire 1 b- wnotS $end
$var wire 1 c- wB $end

$scope module notA $end
$var wire 1 b- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 a- out $end
$var wire 1 ]! in1 $end
$var wire 1 b- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 c- out $end
$var wire 1 m! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 _- out $end
$var wire 1 a- in1 $end
$var wire 1 c- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 `- out $end
$var wire 1 }! inA $end
$var wire 1 /" inB $end
$var wire 1 Q s $end
$var wire 1 d- wA $end
$var wire 1 e- wnotS $end
$var wire 1 f- wB $end

$scope module notA $end
$var wire 1 e- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 d- out $end
$var wire 1 }! in1 $end
$var wire 1 e- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 f- out $end
$var wire 1 /" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 `- out $end
$var wire 1 d- in1 $end
$var wire 1 f- in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 S- out $end
$var wire 1 _- inA $end
$var wire 1 `- inB $end
$var wire 1 P s $end
$var wire 1 g- wA $end
$var wire 1 h- wnotS $end
$var wire 1 i- wB $end

$scope module notA $end
$var wire 1 h- out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 g- out $end
$var wire 1 _- in1 $end
$var wire 1 h- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 i- out $end
$var wire 1 `- in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 S- out $end
$var wire 1 g- in1 $end
$var wire 1 i- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 > out $end
$var wire 1 R- inA $end
$var wire 1 S- inB $end
$var wire 1 O s $end
$var wire 1 j- wA $end
$var wire 1 k- wnotS $end
$var wire 1 l- wB $end

$scope module notA $end
$var wire 1 k- out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 j- out $end
$var wire 1 R- in1 $end
$var wire 1 k- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 l- out $end
$var wire 1 S- in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 > out $end
$var wire 1 j- in1 $end
$var wire 1 l- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[1] $end
$var wire 1 ? out $end
$var wire 1 | inA $end
$var wire 1 .! inB $end
$var wire 1 >! inC $end
$var wire 1 N! inD $end
$var wire 1 ^! inE $end
$var wire 1 n! inF $end
$var wire 1 ~! inG $end
$var wire 1 0" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 m- outA $end
$var wire 1 n- outB $end

$scope module muxA $end
$var wire 1 m- out $end
$var wire 1 | inA $end
$var wire 1 .! inB $end
$var wire 1 >! inC $end
$var wire 1 N! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 o- w1 $end
$var wire 1 p- w2 $end

$scope module mux_ab $end
$var wire 1 o- out $end
$var wire 1 | inA $end
$var wire 1 .! inB $end
$var wire 1 Q s $end
$var wire 1 q- wA $end
$var wire 1 r- wnotS $end
$var wire 1 s- wB $end

$scope module notA $end
$var wire 1 r- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 q- out $end
$var wire 1 | in1 $end
$var wire 1 r- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 s- out $end
$var wire 1 .! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 o- out $end
$var wire 1 q- in1 $end
$var wire 1 s- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 p- out $end
$var wire 1 >! inA $end
$var wire 1 N! inB $end
$var wire 1 Q s $end
$var wire 1 t- wA $end
$var wire 1 u- wnotS $end
$var wire 1 v- wB $end

$scope module notA $end
$var wire 1 u- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 t- out $end
$var wire 1 >! in1 $end
$var wire 1 u- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 v- out $end
$var wire 1 N! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 p- out $end
$var wire 1 t- in1 $end
$var wire 1 v- in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 m- out $end
$var wire 1 o- inA $end
$var wire 1 p- inB $end
$var wire 1 P s $end
$var wire 1 w- wA $end
$var wire 1 x- wnotS $end
$var wire 1 y- wB $end

$scope module notA $end
$var wire 1 x- out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 w- out $end
$var wire 1 o- in1 $end
$var wire 1 x- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 y- out $end
$var wire 1 p- in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 m- out $end
$var wire 1 w- in1 $end
$var wire 1 y- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 n- out $end
$var wire 1 ^! inA $end
$var wire 1 n! inB $end
$var wire 1 ~! inC $end
$var wire 1 0" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 z- w1 $end
$var wire 1 {- w2 $end

$scope module mux_ab $end
$var wire 1 z- out $end
$var wire 1 ^! inA $end
$var wire 1 n! inB $end
$var wire 1 Q s $end
$var wire 1 |- wA $end
$var wire 1 }- wnotS $end
$var wire 1 ~- wB $end

$scope module notA $end
$var wire 1 }- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 |- out $end
$var wire 1 ^! in1 $end
$var wire 1 }- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ~- out $end
$var wire 1 n! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 z- out $end
$var wire 1 |- in1 $end
$var wire 1 ~- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 {- out $end
$var wire 1 ~! inA $end
$var wire 1 0" inB $end
$var wire 1 Q s $end
$var wire 1 !. wA $end
$var wire 1 ". wnotS $end
$var wire 1 #. wB $end

$scope module notA $end
$var wire 1 ". out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 !. out $end
$var wire 1 ~! in1 $end
$var wire 1 ". in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 #. out $end
$var wire 1 0" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 {- out $end
$var wire 1 !. in1 $end
$var wire 1 #. in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 n- out $end
$var wire 1 z- inA $end
$var wire 1 {- inB $end
$var wire 1 P s $end
$var wire 1 $. wA $end
$var wire 1 %. wnotS $end
$var wire 1 &. wB $end

$scope module notA $end
$var wire 1 %. out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 $. out $end
$var wire 1 z- in1 $end
$var wire 1 %. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 &. out $end
$var wire 1 {- in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 n- out $end
$var wire 1 $. in1 $end
$var wire 1 &. in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 ? out $end
$var wire 1 m- inA $end
$var wire 1 n- inB $end
$var wire 1 O s $end
$var wire 1 '. wA $end
$var wire 1 (. wnotS $end
$var wire 1 ). wB $end

$scope module notA $end
$var wire 1 (. out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 '. out $end
$var wire 1 m- in1 $end
$var wire 1 (. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ). out $end
$var wire 1 n- in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 ? out $end
$var wire 1 '. in1 $end
$var wire 1 ). in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[0] $end
$var wire 1 @ out $end
$var wire 1 } inA $end
$var wire 1 /! inB $end
$var wire 1 ?! inC $end
$var wire 1 O! inD $end
$var wire 1 _! inE $end
$var wire 1 o! inF $end
$var wire 1 !" inG $end
$var wire 1 1" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 *. outA $end
$var wire 1 +. outB $end

$scope module muxA $end
$var wire 1 *. out $end
$var wire 1 } inA $end
$var wire 1 /! inB $end
$var wire 1 ?! inC $end
$var wire 1 O! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 ,. w1 $end
$var wire 1 -. w2 $end

$scope module mux_ab $end
$var wire 1 ,. out $end
$var wire 1 } inA $end
$var wire 1 /! inB $end
$var wire 1 Q s $end
$var wire 1 .. wA $end
$var wire 1 /. wnotS $end
$var wire 1 0. wB $end

$scope module notA $end
$var wire 1 /. out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 .. out $end
$var wire 1 } in1 $end
$var wire 1 /. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 0. out $end
$var wire 1 /! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 ,. out $end
$var wire 1 .. in1 $end
$var wire 1 0. in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 -. out $end
$var wire 1 ?! inA $end
$var wire 1 O! inB $end
$var wire 1 Q s $end
$var wire 1 1. wA $end
$var wire 1 2. wnotS $end
$var wire 1 3. wB $end

$scope module notA $end
$var wire 1 2. out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 1. out $end
$var wire 1 ?! in1 $end
$var wire 1 2. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 3. out $end
$var wire 1 O! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 -. out $end
$var wire 1 1. in1 $end
$var wire 1 3. in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 *. out $end
$var wire 1 ,. inA $end
$var wire 1 -. inB $end
$var wire 1 P s $end
$var wire 1 4. wA $end
$var wire 1 5. wnotS $end
$var wire 1 6. wB $end

$scope module notA $end
$var wire 1 5. out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 4. out $end
$var wire 1 ,. in1 $end
$var wire 1 5. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 6. out $end
$var wire 1 -. in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 *. out $end
$var wire 1 4. in1 $end
$var wire 1 6. in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 +. out $end
$var wire 1 _! inA $end
$var wire 1 o! inB $end
$var wire 1 !" inC $end
$var wire 1 1" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 7. w1 $end
$var wire 1 8. w2 $end

$scope module mux_ab $end
$var wire 1 7. out $end
$var wire 1 _! inA $end
$var wire 1 o! inB $end
$var wire 1 Q s $end
$var wire 1 9. wA $end
$var wire 1 :. wnotS $end
$var wire 1 ;. wB $end

$scope module notA $end
$var wire 1 :. out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 9. out $end
$var wire 1 _! in1 $end
$var wire 1 :. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ;. out $end
$var wire 1 o! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 7. out $end
$var wire 1 9. in1 $end
$var wire 1 ;. in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 8. out $end
$var wire 1 !" inA $end
$var wire 1 1" inB $end
$var wire 1 Q s $end
$var wire 1 <. wA $end
$var wire 1 =. wnotS $end
$var wire 1 >. wB $end

$scope module notA $end
$var wire 1 =. out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 <. out $end
$var wire 1 !" in1 $end
$var wire 1 =. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 >. out $end
$var wire 1 1" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 8. out $end
$var wire 1 <. in1 $end
$var wire 1 >. in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 +. out $end
$var wire 1 7. inA $end
$var wire 1 8. inB $end
$var wire 1 P s $end
$var wire 1 ?. wA $end
$var wire 1 @. wnotS $end
$var wire 1 A. wB $end

$scope module notA $end
$var wire 1 @. out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ?. out $end
$var wire 1 7. in1 $end
$var wire 1 @. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 A. out $end
$var wire 1 8. in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 +. out $end
$var wire 1 ?. in1 $end
$var wire 1 A. in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 @ out $end
$var wire 1 *. inA $end
$var wire 1 +. inB $end
$var wire 1 O s $end
$var wire 1 B. wA $end
$var wire 1 C. wnotS $end
$var wire 1 D. wB $end

$scope module notA $end
$var wire 1 C. out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 B. out $end
$var wire 1 *. in1 $end
$var wire 1 C. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 D. out $end
$var wire 1 +. in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 @ out $end
$var wire 1 B. in1 $end
$var wire 1 D. in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$var wire 1 ! read1Data [15] $end
$var wire 1 " read1Data [14] $end
$var wire 1 # read1Data [13] $end
$var wire 1 $ read1Data [12] $end
$var wire 1 % read1Data [11] $end
$var wire 1 & read1Data [10] $end
$var wire 1 ' read1Data [9] $end
$var wire 1 ( read1Data [8] $end
$var wire 1 ) read1Data [7] $end
$var wire 1 * read1Data [6] $end
$var wire 1 + read1Data [5] $end
$var wire 1 , read1Data [4] $end
$var wire 1 - read1Data [3] $end
$var wire 1 . read1Data [2] $end
$var wire 1 / read1Data [1] $end
$var wire 1 0 read1Data [0] $end
$var wire 1 1 read2Data [15] $end
$var wire 1 2 read2Data [14] $end
$var wire 1 3 read2Data [13] $end
$var wire 1 4 read2Data [12] $end
$var wire 1 5 read2Data [11] $end
$var wire 1 6 read2Data [10] $end
$var wire 1 7 read2Data [9] $end
$var wire 1 8 read2Data [8] $end
$var wire 1 9 read2Data [7] $end
$var wire 1 : read2Data [6] $end
$var wire 1 ; read2Data [5] $end
$var wire 1 < read2Data [4] $end
$var wire 1 = read2Data [3] $end
$var wire 1 > read2Data [2] $end
$var wire 1 ? read2Data [1] $end
$var wire 1 @ read2Data [0] $end
$var wire 1 G clk $end
$var wire 1 H rst $end

$scope module DUT $end
$var wire 1 L read1RegSel [2] $end
$var wire 1 M read1RegSel [1] $end
$var wire 1 N read1RegSel [0] $end
$var wire 1 O read2RegSel [2] $end
$var wire 1 P read2RegSel [1] $end
$var wire 1 Q read2RegSel [0] $end
$var wire 1 R writeRegSel [2] $end
$var wire 1 S writeRegSel [1] $end
$var wire 1 T writeRegSel [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 e writeEn $end
$var wire 1 ! read1Data [15] $end
$var wire 1 " read1Data [14] $end
$var wire 1 # read1Data [13] $end
$var wire 1 $ read1Data [12] $end
$var wire 1 % read1Data [11] $end
$var wire 1 & read1Data [10] $end
$var wire 1 ' read1Data [9] $end
$var wire 1 ( read1Data [8] $end
$var wire 1 ) read1Data [7] $end
$var wire 1 * read1Data [6] $end
$var wire 1 + read1Data [5] $end
$var wire 1 , read1Data [4] $end
$var wire 1 - read1Data [3] $end
$var wire 1 . read1Data [2] $end
$var wire 1 / read1Data [1] $end
$var wire 1 0 read1Data [0] $end
$var wire 1 1 read2Data [15] $end
$var wire 1 2 read2Data [14] $end
$var wire 1 3 read2Data [13] $end
$var wire 1 4 read2Data [12] $end
$var wire 1 5 read2Data [11] $end
$var wire 1 6 read2Data [10] $end
$var wire 1 7 read2Data [9] $end
$var wire 1 8 read2Data [8] $end
$var wire 1 9 read2Data [7] $end
$var wire 1 : read2Data [6] $end
$var wire 1 ; read2Data [5] $end
$var wire 1 < read2Data [4] $end
$var wire 1 = read2Data [3] $end
$var wire 1 > read2Data [2] $end
$var wire 1 ? read2Data [1] $end
$var wire 1 @ read2Data [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 h err $end

$scope module clk_generator $end
$var wire 1 h err $end
$upscope $end

$scope module rf0 $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 L read1RegSel [2] $end
$var wire 1 M read1RegSel [1] $end
$var wire 1 N read1RegSel [0] $end
$var wire 1 O read2RegSel [2] $end
$var wire 1 P read2RegSel [1] $end
$var wire 1 Q read2RegSel [0] $end
$var wire 1 R writeRegSel [2] $end
$var wire 1 S writeRegSel [1] $end
$var wire 1 T writeRegSel [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 e writeEn $end
$var wire 1 ! read1Data [15] $end
$var wire 1 " read1Data [14] $end
$var wire 1 # read1Data [13] $end
$var wire 1 $ read1Data [12] $end
$var wire 1 % read1Data [11] $end
$var wire 1 & read1Data [10] $end
$var wire 1 ' read1Data [9] $end
$var wire 1 ( read1Data [8] $end
$var wire 1 ) read1Data [7] $end
$var wire 1 * read1Data [6] $end
$var wire 1 + read1Data [5] $end
$var wire 1 , read1Data [4] $end
$var wire 1 - read1Data [3] $end
$var wire 1 . read1Data [2] $end
$var wire 1 / read1Data [1] $end
$var wire 1 0 read1Data [0] $end
$var wire 1 1 read2Data [15] $end
$var wire 1 2 read2Data [14] $end
$var wire 1 3 read2Data [13] $end
$var wire 1 4 read2Data [12] $end
$var wire 1 5 read2Data [11] $end
$var wire 1 6 read2Data [10] $end
$var wire 1 7 read2Data [9] $end
$var wire 1 8 read2Data [8] $end
$var wire 1 9 read2Data [7] $end
$var wire 1 : read2Data [6] $end
$var wire 1 ; read2Data [5] $end
$var wire 1 < read2Data [4] $end
$var wire 1 = read2Data [3] $end
$var wire 1 > read2Data [2] $end
$var wire 1 ? read2Data [1] $end
$var wire 1 @ read2Data [0] $end
$var wire 1 h err $end
$var wire 1 n regOut0 [15] $end
$var wire 1 o regOut0 [14] $end
$var wire 1 p regOut0 [13] $end
$var wire 1 q regOut0 [12] $end
$var wire 1 r regOut0 [11] $end
$var wire 1 s regOut0 [10] $end
$var wire 1 t regOut0 [9] $end
$var wire 1 u regOut0 [8] $end
$var wire 1 v regOut0 [7] $end
$var wire 1 w regOut0 [6] $end
$var wire 1 x regOut0 [5] $end
$var wire 1 y regOut0 [4] $end
$var wire 1 z regOut0 [3] $end
$var wire 1 { regOut0 [2] $end
$var wire 1 | regOut0 [1] $end
$var wire 1 } regOut0 [0] $end
$var wire 1 ~ regOut1 [15] $end
$var wire 1 !! regOut1 [14] $end
$var wire 1 "! regOut1 [13] $end
$var wire 1 #! regOut1 [12] $end
$var wire 1 $! regOut1 [11] $end
$var wire 1 %! regOut1 [10] $end
$var wire 1 &! regOut1 [9] $end
$var wire 1 '! regOut1 [8] $end
$var wire 1 (! regOut1 [7] $end
$var wire 1 )! regOut1 [6] $end
$var wire 1 *! regOut1 [5] $end
$var wire 1 +! regOut1 [4] $end
$var wire 1 ,! regOut1 [3] $end
$var wire 1 -! regOut1 [2] $end
$var wire 1 .! regOut1 [1] $end
$var wire 1 /! regOut1 [0] $end
$var wire 1 0! regOut2 [15] $end
$var wire 1 1! regOut2 [14] $end
$var wire 1 2! regOut2 [13] $end
$var wire 1 3! regOut2 [12] $end
$var wire 1 4! regOut2 [11] $end
$var wire 1 5! regOut2 [10] $end
$var wire 1 6! regOut2 [9] $end
$var wire 1 7! regOut2 [8] $end
$var wire 1 8! regOut2 [7] $end
$var wire 1 9! regOut2 [6] $end
$var wire 1 :! regOut2 [5] $end
$var wire 1 ;! regOut2 [4] $end
$var wire 1 <! regOut2 [3] $end
$var wire 1 =! regOut2 [2] $end
$var wire 1 >! regOut2 [1] $end
$var wire 1 ?! regOut2 [0] $end
$var wire 1 @! regOut3 [15] $end
$var wire 1 A! regOut3 [14] $end
$var wire 1 B! regOut3 [13] $end
$var wire 1 C! regOut3 [12] $end
$var wire 1 D! regOut3 [11] $end
$var wire 1 E! regOut3 [10] $end
$var wire 1 F! regOut3 [9] $end
$var wire 1 G! regOut3 [8] $end
$var wire 1 H! regOut3 [7] $end
$var wire 1 I! regOut3 [6] $end
$var wire 1 J! regOut3 [5] $end
$var wire 1 K! regOut3 [4] $end
$var wire 1 L! regOut3 [3] $end
$var wire 1 M! regOut3 [2] $end
$var wire 1 N! regOut3 [1] $end
$var wire 1 O! regOut3 [0] $end
$var wire 1 P! regOut4 [15] $end
$var wire 1 Q! regOut4 [14] $end
$var wire 1 R! regOut4 [13] $end
$var wire 1 S! regOut4 [12] $end
$var wire 1 T! regOut4 [11] $end
$var wire 1 U! regOut4 [10] $end
$var wire 1 V! regOut4 [9] $end
$var wire 1 W! regOut4 [8] $end
$var wire 1 X! regOut4 [7] $end
$var wire 1 Y! regOut4 [6] $end
$var wire 1 Z! regOut4 [5] $end
$var wire 1 [! regOut4 [4] $end
$var wire 1 \! regOut4 [3] $end
$var wire 1 ]! regOut4 [2] $end
$var wire 1 ^! regOut4 [1] $end
$var wire 1 _! regOut4 [0] $end
$var wire 1 `! regOut5 [15] $end
$var wire 1 a! regOut5 [14] $end
$var wire 1 b! regOut5 [13] $end
$var wire 1 c! regOut5 [12] $end
$var wire 1 d! regOut5 [11] $end
$var wire 1 e! regOut5 [10] $end
$var wire 1 f! regOut5 [9] $end
$var wire 1 g! regOut5 [8] $end
$var wire 1 h! regOut5 [7] $end
$var wire 1 i! regOut5 [6] $end
$var wire 1 j! regOut5 [5] $end
$var wire 1 k! regOut5 [4] $end
$var wire 1 l! regOut5 [3] $end
$var wire 1 m! regOut5 [2] $end
$var wire 1 n! regOut5 [1] $end
$var wire 1 o! regOut5 [0] $end
$var wire 1 p! regOut6 [15] $end
$var wire 1 q! regOut6 [14] $end
$var wire 1 r! regOut6 [13] $end
$var wire 1 s! regOut6 [12] $end
$var wire 1 t! regOut6 [11] $end
$var wire 1 u! regOut6 [10] $end
$var wire 1 v! regOut6 [9] $end
$var wire 1 w! regOut6 [8] $end
$var wire 1 x! regOut6 [7] $end
$var wire 1 y! regOut6 [6] $end
$var wire 1 z! regOut6 [5] $end
$var wire 1 {! regOut6 [4] $end
$var wire 1 |! regOut6 [3] $end
$var wire 1 }! regOut6 [2] $end
$var wire 1 ~! regOut6 [1] $end
$var wire 1 !" regOut6 [0] $end
$var wire 1 "" regOut7 [15] $end
$var wire 1 #" regOut7 [14] $end
$var wire 1 $" regOut7 [13] $end
$var wire 1 %" regOut7 [12] $end
$var wire 1 &" regOut7 [11] $end
$var wire 1 '" regOut7 [10] $end
$var wire 1 (" regOut7 [9] $end
$var wire 1 )" regOut7 [8] $end
$var wire 1 *" regOut7 [7] $end
$var wire 1 +" regOut7 [6] $end
$var wire 1 ," regOut7 [5] $end
$var wire 1 -" regOut7 [4] $end
$var wire 1 ." regOut7 [3] $end
$var wire 1 /" regOut7 [2] $end
$var wire 1 0" regOut7 [1] $end
$var wire 1 1" regOut7 [0] $end
$var wire 1 2" decoderOut [7] $end
$var wire 1 3" decoderOut [6] $end
$var wire 1 4" decoderOut [5] $end
$var wire 1 5" decoderOut [4] $end
$var wire 1 6" decoderOut [3] $end
$var wire 1 7" decoderOut [2] $end
$var wire 1 8" decoderOut [1] $end
$var wire 1 9" decoderOut [0] $end

$scope module decoder $end
$var wire 1 2" out [7] $end
$var wire 1 3" out [6] $end
$var wire 1 4" out [5] $end
$var wire 1 5" out [4] $end
$var wire 1 6" out [3] $end
$var wire 1 7" out [2] $end
$var wire 1 8" out [1] $end
$var wire 1 9" out [0] $end
$var wire 1 R in [2] $end
$var wire 1 S in [1] $end
$var wire 1 T in [0] $end

$scope module decoder1 $end
$var wire 1 6" out [3] $end
$var wire 1 7" out [2] $end
$var wire 1 8" out [1] $end
$var wire 1 9" out [0] $end
$var wire 1 S in [1] $end
$var wire 1 T in [0] $end
$var wire 1 :" en $end
$upscope $end

$scope module decoder2 $end
$var wire 1 2" out [3] $end
$var wire 1 3" out [2] $end
$var wire 1 4" out [1] $end
$var wire 1 5" out [0] $end
$var wire 1 S in [1] $end
$var wire 1 T in [0] $end
$var wire 1 R en $end
$upscope $end
$upscope $end

$scope module reg0 $end
$var wire 1 n readData [15] $end
$var wire 1 o readData [14] $end
$var wire 1 p readData [13] $end
$var wire 1 q readData [12] $end
$var wire 1 r readData [11] $end
$var wire 1 s readData [10] $end
$var wire 1 t readData [9] $end
$var wire 1 u readData [8] $end
$var wire 1 v readData [7] $end
$var wire 1 w readData [6] $end
$var wire 1 x readData [5] $end
$var wire 1 y readData [4] $end
$var wire 1 z readData [3] $end
$var wire 1 { readData [2] $end
$var wire 1 | readData [1] $end
$var wire 1 } readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 <" writeEn $end
$var wire 1 =" inputData [15] $end
$var wire 1 >" inputData [14] $end
$var wire 1 ?" inputData [13] $end
$var wire 1 @" inputData [12] $end
$var wire 1 A" inputData [11] $end
$var wire 1 B" inputData [10] $end
$var wire 1 C" inputData [9] $end
$var wire 1 D" inputData [8] $end
$var wire 1 E" inputData [7] $end
$var wire 1 F" inputData [6] $end
$var wire 1 G" inputData [5] $end
$var wire 1 H" inputData [4] $end
$var wire 1 I" inputData [3] $end
$var wire 1 J" inputData [2] $end
$var wire 1 K" inputData [1] $end
$var wire 1 L" inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 n q $end
$var wire 1 =" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 o q $end
$var wire 1 >" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 p q $end
$var wire 1 ?" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 q q $end
$var wire 1 @" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 r q $end
$var wire 1 A" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 s q $end
$var wire 1 B" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 t q $end
$var wire 1 C" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 u q $end
$var wire 1 D" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 v q $end
$var wire 1 E" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 w q $end
$var wire 1 F" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 x q $end
$var wire 1 G" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 y q $end
$var wire 1 H" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 z q $end
$var wire 1 I" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 { q $end
$var wire 1 J" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 | q $end
$var wire 1 K" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 } q $end
$var wire 1 L" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end
$upscope $end

$scope module reg1 $end
$var wire 1 ~ readData [15] $end
$var wire 1 !! readData [14] $end
$var wire 1 "! readData [13] $end
$var wire 1 #! readData [12] $end
$var wire 1 $! readData [11] $end
$var wire 1 %! readData [10] $end
$var wire 1 &! readData [9] $end
$var wire 1 '! readData [8] $end
$var wire 1 (! readData [7] $end
$var wire 1 )! readData [6] $end
$var wire 1 *! readData [5] $end
$var wire 1 +! readData [4] $end
$var wire 1 ,! readData [3] $end
$var wire 1 -! readData [2] $end
$var wire 1 .! readData [1] $end
$var wire 1 /! readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 ^" writeEn $end
$var wire 1 _" inputData [15] $end
$var wire 1 `" inputData [14] $end
$var wire 1 a" inputData [13] $end
$var wire 1 b" inputData [12] $end
$var wire 1 c" inputData [11] $end
$var wire 1 d" inputData [10] $end
$var wire 1 e" inputData [9] $end
$var wire 1 f" inputData [8] $end
$var wire 1 g" inputData [7] $end
$var wire 1 h" inputData [6] $end
$var wire 1 i" inputData [5] $end
$var wire 1 j" inputData [4] $end
$var wire 1 k" inputData [3] $end
$var wire 1 l" inputData [2] $end
$var wire 1 m" inputData [1] $end
$var wire 1 n" inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 ~ q $end
$var wire 1 _" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 !! q $end
$var wire 1 `" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 "! q $end
$var wire 1 a" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 #! q $end
$var wire 1 b" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 $! q $end
$var wire 1 c" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 %! q $end
$var wire 1 d" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 &! q $end
$var wire 1 e" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 '! q $end
$var wire 1 f" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 (! q $end
$var wire 1 g" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 )! q $end
$var wire 1 h" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 *! q $end
$var wire 1 i" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 +! q $end
$var wire 1 j" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 ,! q $end
$var wire 1 k" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 -! q $end
$var wire 1 l" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 .! q $end
$var wire 1 m" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 /! q $end
$var wire 1 n" d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end
$upscope $end

$scope module reg2 $end
$var wire 1 0! readData [15] $end
$var wire 1 1! readData [14] $end
$var wire 1 2! readData [13] $end
$var wire 1 3! readData [12] $end
$var wire 1 4! readData [11] $end
$var wire 1 5! readData [10] $end
$var wire 1 6! readData [9] $end
$var wire 1 7! readData [8] $end
$var wire 1 8! readData [7] $end
$var wire 1 9! readData [6] $end
$var wire 1 :! readData [5] $end
$var wire 1 ;! readData [4] $end
$var wire 1 <! readData [3] $end
$var wire 1 =! readData [2] $end
$var wire 1 >! readData [1] $end
$var wire 1 ?! readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 "# writeEn $end
$var wire 1 ## inputData [15] $end
$var wire 1 $# inputData [14] $end
$var wire 1 %# inputData [13] $end
$var wire 1 &# inputData [12] $end
$var wire 1 '# inputData [11] $end
$var wire 1 (# inputData [10] $end
$var wire 1 )# inputData [9] $end
$var wire 1 *# inputData [8] $end
$var wire 1 +# inputData [7] $end
$var wire 1 ,# inputData [6] $end
$var wire 1 -# inputData [5] $end
$var wire 1 .# inputData [4] $end
$var wire 1 /# inputData [3] $end
$var wire 1 0# inputData [2] $end
$var wire 1 1# inputData [1] $end
$var wire 1 2# inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 0! q $end
$var wire 1 ## d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 1! q $end
$var wire 1 $# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 2! q $end
$var wire 1 %# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 3! q $end
$var wire 1 &# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 4! q $end
$var wire 1 '# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 5! q $end
$var wire 1 (# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 6! q $end
$var wire 1 )# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 7! q $end
$var wire 1 *# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 8! q $end
$var wire 1 +# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 9! q $end
$var wire 1 ,# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 :! q $end
$var wire 1 -# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 ;! q $end
$var wire 1 .# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 <! q $end
$var wire 1 /# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 =! q $end
$var wire 1 0# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 >! q $end
$var wire 1 1# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 ?! q $end
$var wire 1 2# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end
$upscope $end

$scope module reg3 $end
$var wire 1 @! readData [15] $end
$var wire 1 A! readData [14] $end
$var wire 1 B! readData [13] $end
$var wire 1 C! readData [12] $end
$var wire 1 D! readData [11] $end
$var wire 1 E! readData [10] $end
$var wire 1 F! readData [9] $end
$var wire 1 G! readData [8] $end
$var wire 1 H! readData [7] $end
$var wire 1 I! readData [6] $end
$var wire 1 J! readData [5] $end
$var wire 1 K! readData [4] $end
$var wire 1 L! readData [3] $end
$var wire 1 M! readData [2] $end
$var wire 1 N! readData [1] $end
$var wire 1 O! readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 D# writeEn $end
$var wire 1 E# inputData [15] $end
$var wire 1 F# inputData [14] $end
$var wire 1 G# inputData [13] $end
$var wire 1 H# inputData [12] $end
$var wire 1 I# inputData [11] $end
$var wire 1 J# inputData [10] $end
$var wire 1 K# inputData [9] $end
$var wire 1 L# inputData [8] $end
$var wire 1 M# inputData [7] $end
$var wire 1 N# inputData [6] $end
$var wire 1 O# inputData [5] $end
$var wire 1 P# inputData [4] $end
$var wire 1 Q# inputData [3] $end
$var wire 1 R# inputData [2] $end
$var wire 1 S# inputData [1] $end
$var wire 1 T# inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 @! q $end
$var wire 1 E# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 A! q $end
$var wire 1 F# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 B! q $end
$var wire 1 G# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 C! q $end
$var wire 1 H# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 D! q $end
$var wire 1 I# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 E! q $end
$var wire 1 J# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 F! q $end
$var wire 1 K# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 G! q $end
$var wire 1 L# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 H! q $end
$var wire 1 M# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 I! q $end
$var wire 1 N# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 J! q $end
$var wire 1 O# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 K! q $end
$var wire 1 P# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 L! q $end
$var wire 1 Q# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 M! q $end
$var wire 1 R# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 N! q $end
$var wire 1 S# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 O! q $end
$var wire 1 T# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end
$upscope $end

$scope module reg4 $end
$var wire 1 P! readData [15] $end
$var wire 1 Q! readData [14] $end
$var wire 1 R! readData [13] $end
$var wire 1 S! readData [12] $end
$var wire 1 T! readData [11] $end
$var wire 1 U! readData [10] $end
$var wire 1 V! readData [9] $end
$var wire 1 W! readData [8] $end
$var wire 1 X! readData [7] $end
$var wire 1 Y! readData [6] $end
$var wire 1 Z! readData [5] $end
$var wire 1 [! readData [4] $end
$var wire 1 \! readData [3] $end
$var wire 1 ]! readData [2] $end
$var wire 1 ^! readData [1] $end
$var wire 1 _! readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 f# writeEn $end
$var wire 1 g# inputData [15] $end
$var wire 1 h# inputData [14] $end
$var wire 1 i# inputData [13] $end
$var wire 1 j# inputData [12] $end
$var wire 1 k# inputData [11] $end
$var wire 1 l# inputData [10] $end
$var wire 1 m# inputData [9] $end
$var wire 1 n# inputData [8] $end
$var wire 1 o# inputData [7] $end
$var wire 1 p# inputData [6] $end
$var wire 1 q# inputData [5] $end
$var wire 1 r# inputData [4] $end
$var wire 1 s# inputData [3] $end
$var wire 1 t# inputData [2] $end
$var wire 1 u# inputData [1] $end
$var wire 1 v# inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 P! q $end
$var wire 1 g# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 Q! q $end
$var wire 1 h# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 R! q $end
$var wire 1 i# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 S! q $end
$var wire 1 j# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 T! q $end
$var wire 1 k# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 U! q $end
$var wire 1 l# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 V! q $end
$var wire 1 m# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 W! q $end
$var wire 1 n# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 X! q $end
$var wire 1 o# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 Y! q $end
$var wire 1 p# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 Z! q $end
$var wire 1 q# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 [! q $end
$var wire 1 r# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 \! q $end
$var wire 1 s# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 ]! q $end
$var wire 1 t# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 ^! q $end
$var wire 1 u# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 _! q $end
$var wire 1 v# d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end
$upscope $end

$scope module reg5 $end
$var wire 1 `! readData [15] $end
$var wire 1 a! readData [14] $end
$var wire 1 b! readData [13] $end
$var wire 1 c! readData [12] $end
$var wire 1 d! readData [11] $end
$var wire 1 e! readData [10] $end
$var wire 1 f! readData [9] $end
$var wire 1 g! readData [8] $end
$var wire 1 h! readData [7] $end
$var wire 1 i! readData [6] $end
$var wire 1 j! readData [5] $end
$var wire 1 k! readData [4] $end
$var wire 1 l! readData [3] $end
$var wire 1 m! readData [2] $end
$var wire 1 n! readData [1] $end
$var wire 1 o! readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 *$ writeEn $end
$var wire 1 +$ inputData [15] $end
$var wire 1 ,$ inputData [14] $end
$var wire 1 -$ inputData [13] $end
$var wire 1 .$ inputData [12] $end
$var wire 1 /$ inputData [11] $end
$var wire 1 0$ inputData [10] $end
$var wire 1 1$ inputData [9] $end
$var wire 1 2$ inputData [8] $end
$var wire 1 3$ inputData [7] $end
$var wire 1 4$ inputData [6] $end
$var wire 1 5$ inputData [5] $end
$var wire 1 6$ inputData [4] $end
$var wire 1 7$ inputData [3] $end
$var wire 1 8$ inputData [2] $end
$var wire 1 9$ inputData [1] $end
$var wire 1 :$ inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 `! q $end
$var wire 1 +$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 a! q $end
$var wire 1 ,$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 b! q $end
$var wire 1 -$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 c! q $end
$var wire 1 .$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 d! q $end
$var wire 1 /$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 e! q $end
$var wire 1 0$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 f! q $end
$var wire 1 1$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 g! q $end
$var wire 1 2$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 h! q $end
$var wire 1 3$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 i! q $end
$var wire 1 4$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 j! q $end
$var wire 1 5$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 k! q $end
$var wire 1 6$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 l! q $end
$var wire 1 7$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 m! q $end
$var wire 1 8$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 n! q $end
$var wire 1 9$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 o! q $end
$var wire 1 :$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end
$upscope $end

$scope module reg6 $end
$var wire 1 p! readData [15] $end
$var wire 1 q! readData [14] $end
$var wire 1 r! readData [13] $end
$var wire 1 s! readData [12] $end
$var wire 1 t! readData [11] $end
$var wire 1 u! readData [10] $end
$var wire 1 v! readData [9] $end
$var wire 1 w! readData [8] $end
$var wire 1 x! readData [7] $end
$var wire 1 y! readData [6] $end
$var wire 1 z! readData [5] $end
$var wire 1 {! readData [4] $end
$var wire 1 |! readData [3] $end
$var wire 1 }! readData [2] $end
$var wire 1 ~! readData [1] $end
$var wire 1 !" readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 L$ writeEn $end
$var wire 1 M$ inputData [15] $end
$var wire 1 N$ inputData [14] $end
$var wire 1 O$ inputData [13] $end
$var wire 1 P$ inputData [12] $end
$var wire 1 Q$ inputData [11] $end
$var wire 1 R$ inputData [10] $end
$var wire 1 S$ inputData [9] $end
$var wire 1 T$ inputData [8] $end
$var wire 1 U$ inputData [7] $end
$var wire 1 V$ inputData [6] $end
$var wire 1 W$ inputData [5] $end
$var wire 1 X$ inputData [4] $end
$var wire 1 Y$ inputData [3] $end
$var wire 1 Z$ inputData [2] $end
$var wire 1 [$ inputData [1] $end
$var wire 1 \$ inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 p! q $end
$var wire 1 M$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 q! q $end
$var wire 1 N$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 r! q $end
$var wire 1 O$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 s! q $end
$var wire 1 P$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 t! q $end
$var wire 1 Q$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 u! q $end
$var wire 1 R$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 v! q $end
$var wire 1 S$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 w! q $end
$var wire 1 T$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 x! q $end
$var wire 1 U$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 y! q $end
$var wire 1 V$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 z! q $end
$var wire 1 W$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 {! q $end
$var wire 1 X$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 |! q $end
$var wire 1 Y$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 }! q $end
$var wire 1 Z$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 ~! q $end
$var wire 1 [$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 !" q $end
$var wire 1 \$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end
$upscope $end

$scope module reg7 $end
$var wire 1 "" readData [15] $end
$var wire 1 #" readData [14] $end
$var wire 1 $" readData [13] $end
$var wire 1 %" readData [12] $end
$var wire 1 &" readData [11] $end
$var wire 1 '" readData [10] $end
$var wire 1 (" readData [9] $end
$var wire 1 )" readData [8] $end
$var wire 1 *" readData [7] $end
$var wire 1 +" readData [6] $end
$var wire 1 ," readData [5] $end
$var wire 1 -" readData [4] $end
$var wire 1 ." readData [3] $end
$var wire 1 /" readData [2] $end
$var wire 1 0" readData [1] $end
$var wire 1 1" readData [0] $end
$var wire 1 U writeData [15] $end
$var wire 1 V writeData [14] $end
$var wire 1 W writeData [13] $end
$var wire 1 X writeData [12] $end
$var wire 1 Y writeData [11] $end
$var wire 1 Z writeData [10] $end
$var wire 1 [ writeData [9] $end
$var wire 1 \ writeData [8] $end
$var wire 1 ] writeData [7] $end
$var wire 1 ^ writeData [6] $end
$var wire 1 _ writeData [5] $end
$var wire 1 ` writeData [4] $end
$var wire 1 a writeData [3] $end
$var wire 1 b writeData [2] $end
$var wire 1 c writeData [1] $end
$var wire 1 d writeData [0] $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$var wire 1 n$ writeEn $end
$var wire 1 o$ inputData [15] $end
$var wire 1 p$ inputData [14] $end
$var wire 1 q$ inputData [13] $end
$var wire 1 r$ inputData [12] $end
$var wire 1 s$ inputData [11] $end
$var wire 1 t$ inputData [10] $end
$var wire 1 u$ inputData [9] $end
$var wire 1 v$ inputData [8] $end
$var wire 1 w$ inputData [7] $end
$var wire 1 x$ inputData [6] $end
$var wire 1 y$ inputData [5] $end
$var wire 1 z$ inputData [4] $end
$var wire 1 {$ inputData [3] $end
$var wire 1 |$ inputData [2] $end
$var wire 1 }$ inputData [1] $end
$var wire 1 ~$ inputData [0] $end

$scope module iDFF[15] $end
$var wire 1 "" q $end
$var wire 1 o$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 #" q $end
$var wire 1 p$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 $" q $end
$var wire 1 q$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 %" q $end
$var wire 1 r$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 &" q $end
$var wire 1 s$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 '" q $end
$var wire 1 t$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 (" q $end
$var wire 1 u$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 )" q $end
$var wire 1 v$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 *" q $end
$var wire 1 w$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 +" q $end
$var wire 1 x$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 ," q $end
$var wire 1 y$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 -" q $end
$var wire 1 z$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 ." q $end
$var wire 1 {$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 /" q $end
$var wire 1 |$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 0" q $end
$var wire 1 }$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 1" q $end
$var wire 1 ~$ d $end
$var wire 1 f clk $end
$var wire 1 g rst $end
$upscope $end
$upscope $end

$scope module mux1 $end
$var wire 1 ! out [15] $end
$var wire 1 " out [14] $end
$var wire 1 # out [13] $end
$var wire 1 $ out [12] $end
$var wire 1 % out [11] $end
$var wire 1 & out [10] $end
$var wire 1 ' out [9] $end
$var wire 1 ( out [8] $end
$var wire 1 ) out [7] $end
$var wire 1 * out [6] $end
$var wire 1 + out [5] $end
$var wire 1 , out [4] $end
$var wire 1 - out [3] $end
$var wire 1 . out [2] $end
$var wire 1 / out [1] $end
$var wire 1 0 out [0] $end
$var wire 1 n inA [15] $end
$var wire 1 o inA [14] $end
$var wire 1 p inA [13] $end
$var wire 1 q inA [12] $end
$var wire 1 r inA [11] $end
$var wire 1 s inA [10] $end
$var wire 1 t inA [9] $end
$var wire 1 u inA [8] $end
$var wire 1 v inA [7] $end
$var wire 1 w inA [6] $end
$var wire 1 x inA [5] $end
$var wire 1 y inA [4] $end
$var wire 1 z inA [3] $end
$var wire 1 { inA [2] $end
$var wire 1 | inA [1] $end
$var wire 1 } inA [0] $end
$var wire 1 ~ inB [15] $end
$var wire 1 !! inB [14] $end
$var wire 1 "! inB [13] $end
$var wire 1 #! inB [12] $end
$var wire 1 $! inB [11] $end
$var wire 1 %! inB [10] $end
$var wire 1 &! inB [9] $end
$var wire 1 '! inB [8] $end
$var wire 1 (! inB [7] $end
$var wire 1 )! inB [6] $end
$var wire 1 *! inB [5] $end
$var wire 1 +! inB [4] $end
$var wire 1 ,! inB [3] $end
$var wire 1 -! inB [2] $end
$var wire 1 .! inB [1] $end
$var wire 1 /! inB [0] $end
$var wire 1 0! inC [15] $end
$var wire 1 1! inC [14] $end
$var wire 1 2! inC [13] $end
$var wire 1 3! inC [12] $end
$var wire 1 4! inC [11] $end
$var wire 1 5! inC [10] $end
$var wire 1 6! inC [9] $end
$var wire 1 7! inC [8] $end
$var wire 1 8! inC [7] $end
$var wire 1 9! inC [6] $end
$var wire 1 :! inC [5] $end
$var wire 1 ;! inC [4] $end
$var wire 1 <! inC [3] $end
$var wire 1 =! inC [2] $end
$var wire 1 >! inC [1] $end
$var wire 1 ?! inC [0] $end
$var wire 1 @! inD [15] $end
$var wire 1 A! inD [14] $end
$var wire 1 B! inD [13] $end
$var wire 1 C! inD [12] $end
$var wire 1 D! inD [11] $end
$var wire 1 E! inD [10] $end
$var wire 1 F! inD [9] $end
$var wire 1 G! inD [8] $end
$var wire 1 H! inD [7] $end
$var wire 1 I! inD [6] $end
$var wire 1 J! inD [5] $end
$var wire 1 K! inD [4] $end
$var wire 1 L! inD [3] $end
$var wire 1 M! inD [2] $end
$var wire 1 N! inD [1] $end
$var wire 1 O! inD [0] $end
$var wire 1 P! inE [15] $end
$var wire 1 Q! inE [14] $end
$var wire 1 R! inE [13] $end
$var wire 1 S! inE [12] $end
$var wire 1 T! inE [11] $end
$var wire 1 U! inE [10] $end
$var wire 1 V! inE [9] $end
$var wire 1 W! inE [8] $end
$var wire 1 X! inE [7] $end
$var wire 1 Y! inE [6] $end
$var wire 1 Z! inE [5] $end
$var wire 1 [! inE [4] $end
$var wire 1 \! inE [3] $end
$var wire 1 ]! inE [2] $end
$var wire 1 ^! inE [1] $end
$var wire 1 _! inE [0] $end
$var wire 1 `! inF [15] $end
$var wire 1 a! inF [14] $end
$var wire 1 b! inF [13] $end
$var wire 1 c! inF [12] $end
$var wire 1 d! inF [11] $end
$var wire 1 e! inF [10] $end
$var wire 1 f! inF [9] $end
$var wire 1 g! inF [8] $end
$var wire 1 h! inF [7] $end
$var wire 1 i! inF [6] $end
$var wire 1 j! inF [5] $end
$var wire 1 k! inF [4] $end
$var wire 1 l! inF [3] $end
$var wire 1 m! inF [2] $end
$var wire 1 n! inF [1] $end
$var wire 1 o! inF [0] $end
$var wire 1 p! inG [15] $end
$var wire 1 q! inG [14] $end
$var wire 1 r! inG [13] $end
$var wire 1 s! inG [12] $end
$var wire 1 t! inG [11] $end
$var wire 1 u! inG [10] $end
$var wire 1 v! inG [9] $end
$var wire 1 w! inG [8] $end
$var wire 1 x! inG [7] $end
$var wire 1 y! inG [6] $end
$var wire 1 z! inG [5] $end
$var wire 1 {! inG [4] $end
$var wire 1 |! inG [3] $end
$var wire 1 }! inG [2] $end
$var wire 1 ~! inG [1] $end
$var wire 1 !" inG [0] $end
$var wire 1 "" inH [15] $end
$var wire 1 #" inH [14] $end
$var wire 1 $" inH [13] $end
$var wire 1 %" inH [12] $end
$var wire 1 &" inH [11] $end
$var wire 1 '" inH [10] $end
$var wire 1 (" inH [9] $end
$var wire 1 )" inH [8] $end
$var wire 1 *" inH [7] $end
$var wire 1 +" inH [6] $end
$var wire 1 ," inH [5] $end
$var wire 1 -" inH [4] $end
$var wire 1 ." inH [3] $end
$var wire 1 /" inH [2] $end
$var wire 1 0" inH [1] $end
$var wire 1 1" inH [0] $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end

$scope module mux[15] $end
$var wire 1 ! out $end
$var wire 1 n inA $end
$var wire 1 ~ inB $end
$var wire 1 0! inC $end
$var wire 1 @! inD $end
$var wire 1 P! inE $end
$var wire 1 `! inF $end
$var wire 1 p! inG $end
$var wire 1 "" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 2% outA $end
$var wire 1 3% outB $end

$scope module muxA $end
$var wire 1 2% out $end
$var wire 1 n inA $end
$var wire 1 ~ inB $end
$var wire 1 0! inC $end
$var wire 1 @! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 4% w1 $end
$var wire 1 5% w2 $end

$scope module mux_ab $end
$var wire 1 4% out $end
$var wire 1 n inA $end
$var wire 1 ~ inB $end
$var wire 1 N s $end
$var wire 1 6% wA $end
$var wire 1 7% wnotS $end
$var wire 1 8% wB $end

$scope module notA $end
$var wire 1 7% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 6% out $end
$var wire 1 n in1 $end
$var wire 1 7% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 8% out $end
$var wire 1 ~ in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 4% out $end
$var wire 1 6% in1 $end
$var wire 1 8% in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 5% out $end
$var wire 1 0! inA $end
$var wire 1 @! inB $end
$var wire 1 N s $end
$var wire 1 9% wA $end
$var wire 1 :% wnotS $end
$var wire 1 ;% wB $end

$scope module notA $end
$var wire 1 :% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 9% out $end
$var wire 1 0! in1 $end
$var wire 1 :% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ;% out $end
$var wire 1 @! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 5% out $end
$var wire 1 9% in1 $end
$var wire 1 ;% in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 2% out $end
$var wire 1 4% inA $end
$var wire 1 5% inB $end
$var wire 1 M s $end
$var wire 1 <% wA $end
$var wire 1 =% wnotS $end
$var wire 1 >% wB $end

$scope module notA $end
$var wire 1 =% out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 <% out $end
$var wire 1 4% in1 $end
$var wire 1 =% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 >% out $end
$var wire 1 5% in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 2% out $end
$var wire 1 <% in1 $end
$var wire 1 >% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 3% out $end
$var wire 1 P! inA $end
$var wire 1 `! inB $end
$var wire 1 p! inC $end
$var wire 1 "" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 ?% w1 $end
$var wire 1 @% w2 $end

$scope module mux_ab $end
$var wire 1 ?% out $end
$var wire 1 P! inA $end
$var wire 1 `! inB $end
$var wire 1 N s $end
$var wire 1 A% wA $end
$var wire 1 B% wnotS $end
$var wire 1 C% wB $end

$scope module notA $end
$var wire 1 B% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 A% out $end
$var wire 1 P! in1 $end
$var wire 1 B% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 C% out $end
$var wire 1 `! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 ?% out $end
$var wire 1 A% in1 $end
$var wire 1 C% in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 @% out $end
$var wire 1 p! inA $end
$var wire 1 "" inB $end
$var wire 1 N s $end
$var wire 1 D% wA $end
$var wire 1 E% wnotS $end
$var wire 1 F% wB $end

$scope module notA $end
$var wire 1 E% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 D% out $end
$var wire 1 p! in1 $end
$var wire 1 E% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 F% out $end
$var wire 1 "" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 @% out $end
$var wire 1 D% in1 $end
$var wire 1 F% in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 3% out $end
$var wire 1 ?% inA $end
$var wire 1 @% inB $end
$var wire 1 M s $end
$var wire 1 G% wA $end
$var wire 1 H% wnotS $end
$var wire 1 I% wB $end

$scope module notA $end
$var wire 1 H% out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 G% out $end
$var wire 1 ?% in1 $end
$var wire 1 H% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 I% out $end
$var wire 1 @% in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 3% out $end
$var wire 1 G% in1 $end
$var wire 1 I% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 ! out $end
$var wire 1 2% inA $end
$var wire 1 3% inB $end
$var wire 1 L s $end
$var wire 1 J% wA $end
$var wire 1 K% wnotS $end
$var wire 1 L% wB $end

$scope module notA $end
$var wire 1 K% out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 J% out $end
$var wire 1 2% in1 $end
$var wire 1 K% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 L% out $end
$var wire 1 3% in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 ! out $end
$var wire 1 J% in1 $end
$var wire 1 L% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[14] $end
$var wire 1 " out $end
$var wire 1 o inA $end
$var wire 1 !! inB $end
$var wire 1 1! inC $end
$var wire 1 A! inD $end
$var wire 1 Q! inE $end
$var wire 1 a! inF $end
$var wire 1 q! inG $end
$var wire 1 #" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 M% outA $end
$var wire 1 N% outB $end

$scope module muxA $end
$var wire 1 M% out $end
$var wire 1 o inA $end
$var wire 1 !! inB $end
$var wire 1 1! inC $end
$var wire 1 A! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 O% w1 $end
$var wire 1 P% w2 $end

$scope module mux_ab $end
$var wire 1 O% out $end
$var wire 1 o inA $end
$var wire 1 !! inB $end
$var wire 1 N s $end
$var wire 1 Q% wA $end
$var wire 1 R% wnotS $end
$var wire 1 S% wB $end

$scope module notA $end
$var wire 1 R% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 Q% out $end
$var wire 1 o in1 $end
$var wire 1 R% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 S% out $end
$var wire 1 !! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 O% out $end
$var wire 1 Q% in1 $end
$var wire 1 S% in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 P% out $end
$var wire 1 1! inA $end
$var wire 1 A! inB $end
$var wire 1 N s $end
$var wire 1 T% wA $end
$var wire 1 U% wnotS $end
$var wire 1 V% wB $end

$scope module notA $end
$var wire 1 U% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 T% out $end
$var wire 1 1! in1 $end
$var wire 1 U% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 V% out $end
$var wire 1 A! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 P% out $end
$var wire 1 T% in1 $end
$var wire 1 V% in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 M% out $end
$var wire 1 O% inA $end
$var wire 1 P% inB $end
$var wire 1 M s $end
$var wire 1 W% wA $end
$var wire 1 X% wnotS $end
$var wire 1 Y% wB $end

$scope module notA $end
$var wire 1 X% out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 W% out $end
$var wire 1 O% in1 $end
$var wire 1 X% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 Y% out $end
$var wire 1 P% in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 M% out $end
$var wire 1 W% in1 $end
$var wire 1 Y% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 N% out $end
$var wire 1 Q! inA $end
$var wire 1 a! inB $end
$var wire 1 q! inC $end
$var wire 1 #" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 Z% w1 $end
$var wire 1 [% w2 $end

$scope module mux_ab $end
$var wire 1 Z% out $end
$var wire 1 Q! inA $end
$var wire 1 a! inB $end
$var wire 1 N s $end
$var wire 1 \% wA $end
$var wire 1 ]% wnotS $end
$var wire 1 ^% wB $end

$scope module notA $end
$var wire 1 ]% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 \% out $end
$var wire 1 Q! in1 $end
$var wire 1 ]% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ^% out $end
$var wire 1 a! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 Z% out $end
$var wire 1 \% in1 $end
$var wire 1 ^% in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 [% out $end
$var wire 1 q! inA $end
$var wire 1 #" inB $end
$var wire 1 N s $end
$var wire 1 _% wA $end
$var wire 1 `% wnotS $end
$var wire 1 a% wB $end

$scope module notA $end
$var wire 1 `% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 _% out $end
$var wire 1 q! in1 $end
$var wire 1 `% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 a% out $end
$var wire 1 #" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 [% out $end
$var wire 1 _% in1 $end
$var wire 1 a% in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 N% out $end
$var wire 1 Z% inA $end
$var wire 1 [% inB $end
$var wire 1 M s $end
$var wire 1 b% wA $end
$var wire 1 c% wnotS $end
$var wire 1 d% wB $end

$scope module notA $end
$var wire 1 c% out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 b% out $end
$var wire 1 Z% in1 $end
$var wire 1 c% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 d% out $end
$var wire 1 [% in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 N% out $end
$var wire 1 b% in1 $end
$var wire 1 d% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 " out $end
$var wire 1 M% inA $end
$var wire 1 N% inB $end
$var wire 1 L s $end
$var wire 1 e% wA $end
$var wire 1 f% wnotS $end
$var wire 1 g% wB $end

$scope module notA $end
$var wire 1 f% out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 e% out $end
$var wire 1 M% in1 $end
$var wire 1 f% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 g% out $end
$var wire 1 N% in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 " out $end
$var wire 1 e% in1 $end
$var wire 1 g% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[13] $end
$var wire 1 # out $end
$var wire 1 p inA $end
$var wire 1 "! inB $end
$var wire 1 2! inC $end
$var wire 1 B! inD $end
$var wire 1 R! inE $end
$var wire 1 b! inF $end
$var wire 1 r! inG $end
$var wire 1 $" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 h% outA $end
$var wire 1 i% outB $end

$scope module muxA $end
$var wire 1 h% out $end
$var wire 1 p inA $end
$var wire 1 "! inB $end
$var wire 1 2! inC $end
$var wire 1 B! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 j% w1 $end
$var wire 1 k% w2 $end

$scope module mux_ab $end
$var wire 1 j% out $end
$var wire 1 p inA $end
$var wire 1 "! inB $end
$var wire 1 N s $end
$var wire 1 l% wA $end
$var wire 1 m% wnotS $end
$var wire 1 n% wB $end

$scope module notA $end
$var wire 1 m% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 l% out $end
$var wire 1 p in1 $end
$var wire 1 m% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 n% out $end
$var wire 1 "! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 j% out $end
$var wire 1 l% in1 $end
$var wire 1 n% in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 k% out $end
$var wire 1 2! inA $end
$var wire 1 B! inB $end
$var wire 1 N s $end
$var wire 1 o% wA $end
$var wire 1 p% wnotS $end
$var wire 1 q% wB $end

$scope module notA $end
$var wire 1 p% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 o% out $end
$var wire 1 2! in1 $end
$var wire 1 p% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 q% out $end
$var wire 1 B! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 k% out $end
$var wire 1 o% in1 $end
$var wire 1 q% in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 h% out $end
$var wire 1 j% inA $end
$var wire 1 k% inB $end
$var wire 1 M s $end
$var wire 1 r% wA $end
$var wire 1 s% wnotS $end
$var wire 1 t% wB $end

$scope module notA $end
$var wire 1 s% out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 r% out $end
$var wire 1 j% in1 $end
$var wire 1 s% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 t% out $end
$var wire 1 k% in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 h% out $end
$var wire 1 r% in1 $end
$var wire 1 t% in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 i% out $end
$var wire 1 R! inA $end
$var wire 1 b! inB $end
$var wire 1 r! inC $end
$var wire 1 $" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 u% w1 $end
$var wire 1 v% w2 $end

$scope module mux_ab $end
$var wire 1 u% out $end
$var wire 1 R! inA $end
$var wire 1 b! inB $end
$var wire 1 N s $end
$var wire 1 w% wA $end
$var wire 1 x% wnotS $end
$var wire 1 y% wB $end

$scope module notA $end
$var wire 1 x% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 w% out $end
$var wire 1 R! in1 $end
$var wire 1 x% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 y% out $end
$var wire 1 b! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 u% out $end
$var wire 1 w% in1 $end
$var wire 1 y% in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 v% out $end
$var wire 1 r! inA $end
$var wire 1 $" inB $end
$var wire 1 N s $end
$var wire 1 z% wA $end
$var wire 1 {% wnotS $end
$var wire 1 |% wB $end

$scope module notA $end
$var wire 1 {% out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 z% out $end
$var wire 1 r! in1 $end
$var wire 1 {% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 |% out $end
$var wire 1 $" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 v% out $end
$var wire 1 z% in1 $end
$var wire 1 |% in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 i% out $end
$var wire 1 u% inA $end
$var wire 1 v% inB $end
$var wire 1 M s $end
$var wire 1 }% wA $end
$var wire 1 ~% wnotS $end
$var wire 1 !& wB $end

$scope module notA $end
$var wire 1 ~% out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 }% out $end
$var wire 1 u% in1 $end
$var wire 1 ~% in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 !& out $end
$var wire 1 v% in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 i% out $end
$var wire 1 }% in1 $end
$var wire 1 !& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 # out $end
$var wire 1 h% inA $end
$var wire 1 i% inB $end
$var wire 1 L s $end
$var wire 1 "& wA $end
$var wire 1 #& wnotS $end
$var wire 1 $& wB $end

$scope module notA $end
$var wire 1 #& out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 "& out $end
$var wire 1 h% in1 $end
$var wire 1 #& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 $& out $end
$var wire 1 i% in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 # out $end
$var wire 1 "& in1 $end
$var wire 1 $& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[12] $end
$var wire 1 $ out $end
$var wire 1 q inA $end
$var wire 1 #! inB $end
$var wire 1 3! inC $end
$var wire 1 C! inD $end
$var wire 1 S! inE $end
$var wire 1 c! inF $end
$var wire 1 s! inG $end
$var wire 1 %" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 %& outA $end
$var wire 1 && outB $end

$scope module muxA $end
$var wire 1 %& out $end
$var wire 1 q inA $end
$var wire 1 #! inB $end
$var wire 1 3! inC $end
$var wire 1 C! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 '& w1 $end
$var wire 1 (& w2 $end

$scope module mux_ab $end
$var wire 1 '& out $end
$var wire 1 q inA $end
$var wire 1 #! inB $end
$var wire 1 N s $end
$var wire 1 )& wA $end
$var wire 1 *& wnotS $end
$var wire 1 +& wB $end

$scope module notA $end
$var wire 1 *& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 )& out $end
$var wire 1 q in1 $end
$var wire 1 *& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 +& out $end
$var wire 1 #! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 '& out $end
$var wire 1 )& in1 $end
$var wire 1 +& in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 (& out $end
$var wire 1 3! inA $end
$var wire 1 C! inB $end
$var wire 1 N s $end
$var wire 1 ,& wA $end
$var wire 1 -& wnotS $end
$var wire 1 .& wB $end

$scope module notA $end
$var wire 1 -& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ,& out $end
$var wire 1 3! in1 $end
$var wire 1 -& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 .& out $end
$var wire 1 C! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 (& out $end
$var wire 1 ,& in1 $end
$var wire 1 .& in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 %& out $end
$var wire 1 '& inA $end
$var wire 1 (& inB $end
$var wire 1 M s $end
$var wire 1 /& wA $end
$var wire 1 0& wnotS $end
$var wire 1 1& wB $end

$scope module notA $end
$var wire 1 0& out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 /& out $end
$var wire 1 '& in1 $end
$var wire 1 0& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 1& out $end
$var wire 1 (& in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 %& out $end
$var wire 1 /& in1 $end
$var wire 1 1& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 && out $end
$var wire 1 S! inA $end
$var wire 1 c! inB $end
$var wire 1 s! inC $end
$var wire 1 %" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 2& w1 $end
$var wire 1 3& w2 $end

$scope module mux_ab $end
$var wire 1 2& out $end
$var wire 1 S! inA $end
$var wire 1 c! inB $end
$var wire 1 N s $end
$var wire 1 4& wA $end
$var wire 1 5& wnotS $end
$var wire 1 6& wB $end

$scope module notA $end
$var wire 1 5& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 4& out $end
$var wire 1 S! in1 $end
$var wire 1 5& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 6& out $end
$var wire 1 c! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 2& out $end
$var wire 1 4& in1 $end
$var wire 1 6& in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 3& out $end
$var wire 1 s! inA $end
$var wire 1 %" inB $end
$var wire 1 N s $end
$var wire 1 7& wA $end
$var wire 1 8& wnotS $end
$var wire 1 9& wB $end

$scope module notA $end
$var wire 1 8& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 7& out $end
$var wire 1 s! in1 $end
$var wire 1 8& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 9& out $end
$var wire 1 %" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 3& out $end
$var wire 1 7& in1 $end
$var wire 1 9& in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 && out $end
$var wire 1 2& inA $end
$var wire 1 3& inB $end
$var wire 1 M s $end
$var wire 1 :& wA $end
$var wire 1 ;& wnotS $end
$var wire 1 <& wB $end

$scope module notA $end
$var wire 1 ;& out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 :& out $end
$var wire 1 2& in1 $end
$var wire 1 ;& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 <& out $end
$var wire 1 3& in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 && out $end
$var wire 1 :& in1 $end
$var wire 1 <& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 $ out $end
$var wire 1 %& inA $end
$var wire 1 && inB $end
$var wire 1 L s $end
$var wire 1 =& wA $end
$var wire 1 >& wnotS $end
$var wire 1 ?& wB $end

$scope module notA $end
$var wire 1 >& out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 =& out $end
$var wire 1 %& in1 $end
$var wire 1 >& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ?& out $end
$var wire 1 && in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 $ out $end
$var wire 1 =& in1 $end
$var wire 1 ?& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[11] $end
$var wire 1 % out $end
$var wire 1 r inA $end
$var wire 1 $! inB $end
$var wire 1 4! inC $end
$var wire 1 D! inD $end
$var wire 1 T! inE $end
$var wire 1 d! inF $end
$var wire 1 t! inG $end
$var wire 1 &" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 @& outA $end
$var wire 1 A& outB $end

$scope module muxA $end
$var wire 1 @& out $end
$var wire 1 r inA $end
$var wire 1 $! inB $end
$var wire 1 4! inC $end
$var wire 1 D! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 B& w1 $end
$var wire 1 C& w2 $end

$scope module mux_ab $end
$var wire 1 B& out $end
$var wire 1 r inA $end
$var wire 1 $! inB $end
$var wire 1 N s $end
$var wire 1 D& wA $end
$var wire 1 E& wnotS $end
$var wire 1 F& wB $end

$scope module notA $end
$var wire 1 E& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 D& out $end
$var wire 1 r in1 $end
$var wire 1 E& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 F& out $end
$var wire 1 $! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 B& out $end
$var wire 1 D& in1 $end
$var wire 1 F& in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 C& out $end
$var wire 1 4! inA $end
$var wire 1 D! inB $end
$var wire 1 N s $end
$var wire 1 G& wA $end
$var wire 1 H& wnotS $end
$var wire 1 I& wB $end

$scope module notA $end
$var wire 1 H& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 G& out $end
$var wire 1 4! in1 $end
$var wire 1 H& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 I& out $end
$var wire 1 D! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 C& out $end
$var wire 1 G& in1 $end
$var wire 1 I& in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 @& out $end
$var wire 1 B& inA $end
$var wire 1 C& inB $end
$var wire 1 M s $end
$var wire 1 J& wA $end
$var wire 1 K& wnotS $end
$var wire 1 L& wB $end

$scope module notA $end
$var wire 1 K& out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 J& out $end
$var wire 1 B& in1 $end
$var wire 1 K& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 L& out $end
$var wire 1 C& in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 @& out $end
$var wire 1 J& in1 $end
$var wire 1 L& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 A& out $end
$var wire 1 T! inA $end
$var wire 1 d! inB $end
$var wire 1 t! inC $end
$var wire 1 &" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 M& w1 $end
$var wire 1 N& w2 $end

$scope module mux_ab $end
$var wire 1 M& out $end
$var wire 1 T! inA $end
$var wire 1 d! inB $end
$var wire 1 N s $end
$var wire 1 O& wA $end
$var wire 1 P& wnotS $end
$var wire 1 Q& wB $end

$scope module notA $end
$var wire 1 P& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 O& out $end
$var wire 1 T! in1 $end
$var wire 1 P& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 Q& out $end
$var wire 1 d! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 M& out $end
$var wire 1 O& in1 $end
$var wire 1 Q& in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 N& out $end
$var wire 1 t! inA $end
$var wire 1 &" inB $end
$var wire 1 N s $end
$var wire 1 R& wA $end
$var wire 1 S& wnotS $end
$var wire 1 T& wB $end

$scope module notA $end
$var wire 1 S& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 R& out $end
$var wire 1 t! in1 $end
$var wire 1 S& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 T& out $end
$var wire 1 &" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 N& out $end
$var wire 1 R& in1 $end
$var wire 1 T& in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 A& out $end
$var wire 1 M& inA $end
$var wire 1 N& inB $end
$var wire 1 M s $end
$var wire 1 U& wA $end
$var wire 1 V& wnotS $end
$var wire 1 W& wB $end

$scope module notA $end
$var wire 1 V& out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 U& out $end
$var wire 1 M& in1 $end
$var wire 1 V& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 W& out $end
$var wire 1 N& in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 A& out $end
$var wire 1 U& in1 $end
$var wire 1 W& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 % out $end
$var wire 1 @& inA $end
$var wire 1 A& inB $end
$var wire 1 L s $end
$var wire 1 X& wA $end
$var wire 1 Y& wnotS $end
$var wire 1 Z& wB $end

$scope module notA $end
$var wire 1 Y& out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 X& out $end
$var wire 1 @& in1 $end
$var wire 1 Y& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 Z& out $end
$var wire 1 A& in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 % out $end
$var wire 1 X& in1 $end
$var wire 1 Z& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[10] $end
$var wire 1 & out $end
$var wire 1 s inA $end
$var wire 1 %! inB $end
$var wire 1 5! inC $end
$var wire 1 E! inD $end
$var wire 1 U! inE $end
$var wire 1 e! inF $end
$var wire 1 u! inG $end
$var wire 1 '" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 [& outA $end
$var wire 1 \& outB $end

$scope module muxA $end
$var wire 1 [& out $end
$var wire 1 s inA $end
$var wire 1 %! inB $end
$var wire 1 5! inC $end
$var wire 1 E! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 ]& w1 $end
$var wire 1 ^& w2 $end

$scope module mux_ab $end
$var wire 1 ]& out $end
$var wire 1 s inA $end
$var wire 1 %! inB $end
$var wire 1 N s $end
$var wire 1 _& wA $end
$var wire 1 `& wnotS $end
$var wire 1 a& wB $end

$scope module notA $end
$var wire 1 `& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 _& out $end
$var wire 1 s in1 $end
$var wire 1 `& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 a& out $end
$var wire 1 %! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 ]& out $end
$var wire 1 _& in1 $end
$var wire 1 a& in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 ^& out $end
$var wire 1 5! inA $end
$var wire 1 E! inB $end
$var wire 1 N s $end
$var wire 1 b& wA $end
$var wire 1 c& wnotS $end
$var wire 1 d& wB $end

$scope module notA $end
$var wire 1 c& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 b& out $end
$var wire 1 5! in1 $end
$var wire 1 c& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 d& out $end
$var wire 1 E! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 ^& out $end
$var wire 1 b& in1 $end
$var wire 1 d& in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 [& out $end
$var wire 1 ]& inA $end
$var wire 1 ^& inB $end
$var wire 1 M s $end
$var wire 1 e& wA $end
$var wire 1 f& wnotS $end
$var wire 1 g& wB $end

$scope module notA $end
$var wire 1 f& out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 e& out $end
$var wire 1 ]& in1 $end
$var wire 1 f& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 g& out $end
$var wire 1 ^& in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 [& out $end
$var wire 1 e& in1 $end
$var wire 1 g& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 \& out $end
$var wire 1 U! inA $end
$var wire 1 e! inB $end
$var wire 1 u! inC $end
$var wire 1 '" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 h& w1 $end
$var wire 1 i& w2 $end

$scope module mux_ab $end
$var wire 1 h& out $end
$var wire 1 U! inA $end
$var wire 1 e! inB $end
$var wire 1 N s $end
$var wire 1 j& wA $end
$var wire 1 k& wnotS $end
$var wire 1 l& wB $end

$scope module notA $end
$var wire 1 k& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 j& out $end
$var wire 1 U! in1 $end
$var wire 1 k& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 l& out $end
$var wire 1 e! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 h& out $end
$var wire 1 j& in1 $end
$var wire 1 l& in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 i& out $end
$var wire 1 u! inA $end
$var wire 1 '" inB $end
$var wire 1 N s $end
$var wire 1 m& wA $end
$var wire 1 n& wnotS $end
$var wire 1 o& wB $end

$scope module notA $end
$var wire 1 n& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 m& out $end
$var wire 1 u! in1 $end
$var wire 1 n& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 o& out $end
$var wire 1 '" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 i& out $end
$var wire 1 m& in1 $end
$var wire 1 o& in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 \& out $end
$var wire 1 h& inA $end
$var wire 1 i& inB $end
$var wire 1 M s $end
$var wire 1 p& wA $end
$var wire 1 q& wnotS $end
$var wire 1 r& wB $end

$scope module notA $end
$var wire 1 q& out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 p& out $end
$var wire 1 h& in1 $end
$var wire 1 q& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 r& out $end
$var wire 1 i& in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 \& out $end
$var wire 1 p& in1 $end
$var wire 1 r& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 & out $end
$var wire 1 [& inA $end
$var wire 1 \& inB $end
$var wire 1 L s $end
$var wire 1 s& wA $end
$var wire 1 t& wnotS $end
$var wire 1 u& wB $end

$scope module notA $end
$var wire 1 t& out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 s& out $end
$var wire 1 [& in1 $end
$var wire 1 t& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 u& out $end
$var wire 1 \& in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 & out $end
$var wire 1 s& in1 $end
$var wire 1 u& in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[9] $end
$var wire 1 ' out $end
$var wire 1 t inA $end
$var wire 1 &! inB $end
$var wire 1 6! inC $end
$var wire 1 F! inD $end
$var wire 1 V! inE $end
$var wire 1 f! inF $end
$var wire 1 v! inG $end
$var wire 1 (" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 v& outA $end
$var wire 1 w& outB $end

$scope module muxA $end
$var wire 1 v& out $end
$var wire 1 t inA $end
$var wire 1 &! inB $end
$var wire 1 6! inC $end
$var wire 1 F! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 x& w1 $end
$var wire 1 y& w2 $end

$scope module mux_ab $end
$var wire 1 x& out $end
$var wire 1 t inA $end
$var wire 1 &! inB $end
$var wire 1 N s $end
$var wire 1 z& wA $end
$var wire 1 {& wnotS $end
$var wire 1 |& wB $end

$scope module notA $end
$var wire 1 {& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 z& out $end
$var wire 1 t in1 $end
$var wire 1 {& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 |& out $end
$var wire 1 &! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 x& out $end
$var wire 1 z& in1 $end
$var wire 1 |& in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 y& out $end
$var wire 1 6! inA $end
$var wire 1 F! inB $end
$var wire 1 N s $end
$var wire 1 }& wA $end
$var wire 1 ~& wnotS $end
$var wire 1 !' wB $end

$scope module notA $end
$var wire 1 ~& out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 }& out $end
$var wire 1 6! in1 $end
$var wire 1 ~& in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 !' out $end
$var wire 1 F! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 y& out $end
$var wire 1 }& in1 $end
$var wire 1 !' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 v& out $end
$var wire 1 x& inA $end
$var wire 1 y& inB $end
$var wire 1 M s $end
$var wire 1 "' wA $end
$var wire 1 #' wnotS $end
$var wire 1 $' wB $end

$scope module notA $end
$var wire 1 #' out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 "' out $end
$var wire 1 x& in1 $end
$var wire 1 #' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 $' out $end
$var wire 1 y& in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 v& out $end
$var wire 1 "' in1 $end
$var wire 1 $' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 w& out $end
$var wire 1 V! inA $end
$var wire 1 f! inB $end
$var wire 1 v! inC $end
$var wire 1 (" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 %' w1 $end
$var wire 1 &' w2 $end

$scope module mux_ab $end
$var wire 1 %' out $end
$var wire 1 V! inA $end
$var wire 1 f! inB $end
$var wire 1 N s $end
$var wire 1 '' wA $end
$var wire 1 (' wnotS $end
$var wire 1 )' wB $end

$scope module notA $end
$var wire 1 (' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 '' out $end
$var wire 1 V! in1 $end
$var wire 1 (' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 )' out $end
$var wire 1 f! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 %' out $end
$var wire 1 '' in1 $end
$var wire 1 )' in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 &' out $end
$var wire 1 v! inA $end
$var wire 1 (" inB $end
$var wire 1 N s $end
$var wire 1 *' wA $end
$var wire 1 +' wnotS $end
$var wire 1 ,' wB $end

$scope module notA $end
$var wire 1 +' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 *' out $end
$var wire 1 v! in1 $end
$var wire 1 +' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ,' out $end
$var wire 1 (" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 &' out $end
$var wire 1 *' in1 $end
$var wire 1 ,' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 w& out $end
$var wire 1 %' inA $end
$var wire 1 &' inB $end
$var wire 1 M s $end
$var wire 1 -' wA $end
$var wire 1 .' wnotS $end
$var wire 1 /' wB $end

$scope module notA $end
$var wire 1 .' out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 -' out $end
$var wire 1 %' in1 $end
$var wire 1 .' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 /' out $end
$var wire 1 &' in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 w& out $end
$var wire 1 -' in1 $end
$var wire 1 /' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 ' out $end
$var wire 1 v& inA $end
$var wire 1 w& inB $end
$var wire 1 L s $end
$var wire 1 0' wA $end
$var wire 1 1' wnotS $end
$var wire 1 2' wB $end

$scope module notA $end
$var wire 1 1' out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 0' out $end
$var wire 1 v& in1 $end
$var wire 1 1' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 2' out $end
$var wire 1 w& in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 ' out $end
$var wire 1 0' in1 $end
$var wire 1 2' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[8] $end
$var wire 1 ( out $end
$var wire 1 u inA $end
$var wire 1 '! inB $end
$var wire 1 7! inC $end
$var wire 1 G! inD $end
$var wire 1 W! inE $end
$var wire 1 g! inF $end
$var wire 1 w! inG $end
$var wire 1 )" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 3' outA $end
$var wire 1 4' outB $end

$scope module muxA $end
$var wire 1 3' out $end
$var wire 1 u inA $end
$var wire 1 '! inB $end
$var wire 1 7! inC $end
$var wire 1 G! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 5' w1 $end
$var wire 1 6' w2 $end

$scope module mux_ab $end
$var wire 1 5' out $end
$var wire 1 u inA $end
$var wire 1 '! inB $end
$var wire 1 N s $end
$var wire 1 7' wA $end
$var wire 1 8' wnotS $end
$var wire 1 9' wB $end

$scope module notA $end
$var wire 1 8' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 7' out $end
$var wire 1 u in1 $end
$var wire 1 8' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 9' out $end
$var wire 1 '! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 5' out $end
$var wire 1 7' in1 $end
$var wire 1 9' in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 6' out $end
$var wire 1 7! inA $end
$var wire 1 G! inB $end
$var wire 1 N s $end
$var wire 1 :' wA $end
$var wire 1 ;' wnotS $end
$var wire 1 <' wB $end

$scope module notA $end
$var wire 1 ;' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 :' out $end
$var wire 1 7! in1 $end
$var wire 1 ;' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 <' out $end
$var wire 1 G! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 6' out $end
$var wire 1 :' in1 $end
$var wire 1 <' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 3' out $end
$var wire 1 5' inA $end
$var wire 1 6' inB $end
$var wire 1 M s $end
$var wire 1 =' wA $end
$var wire 1 >' wnotS $end
$var wire 1 ?' wB $end

$scope module notA $end
$var wire 1 >' out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 =' out $end
$var wire 1 5' in1 $end
$var wire 1 >' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ?' out $end
$var wire 1 6' in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 3' out $end
$var wire 1 =' in1 $end
$var wire 1 ?' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 4' out $end
$var wire 1 W! inA $end
$var wire 1 g! inB $end
$var wire 1 w! inC $end
$var wire 1 )" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 @' w1 $end
$var wire 1 A' w2 $end

$scope module mux_ab $end
$var wire 1 @' out $end
$var wire 1 W! inA $end
$var wire 1 g! inB $end
$var wire 1 N s $end
$var wire 1 B' wA $end
$var wire 1 C' wnotS $end
$var wire 1 D' wB $end

$scope module notA $end
$var wire 1 C' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 B' out $end
$var wire 1 W! in1 $end
$var wire 1 C' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 D' out $end
$var wire 1 g! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 @' out $end
$var wire 1 B' in1 $end
$var wire 1 D' in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 A' out $end
$var wire 1 w! inA $end
$var wire 1 )" inB $end
$var wire 1 N s $end
$var wire 1 E' wA $end
$var wire 1 F' wnotS $end
$var wire 1 G' wB $end

$scope module notA $end
$var wire 1 F' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 E' out $end
$var wire 1 w! in1 $end
$var wire 1 F' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 G' out $end
$var wire 1 )" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 A' out $end
$var wire 1 E' in1 $end
$var wire 1 G' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 4' out $end
$var wire 1 @' inA $end
$var wire 1 A' inB $end
$var wire 1 M s $end
$var wire 1 H' wA $end
$var wire 1 I' wnotS $end
$var wire 1 J' wB $end

$scope module notA $end
$var wire 1 I' out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 H' out $end
$var wire 1 @' in1 $end
$var wire 1 I' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 J' out $end
$var wire 1 A' in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 4' out $end
$var wire 1 H' in1 $end
$var wire 1 J' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 ( out $end
$var wire 1 3' inA $end
$var wire 1 4' inB $end
$var wire 1 L s $end
$var wire 1 K' wA $end
$var wire 1 L' wnotS $end
$var wire 1 M' wB $end

$scope module notA $end
$var wire 1 L' out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 K' out $end
$var wire 1 3' in1 $end
$var wire 1 L' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 M' out $end
$var wire 1 4' in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 ( out $end
$var wire 1 K' in1 $end
$var wire 1 M' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[7] $end
$var wire 1 ) out $end
$var wire 1 v inA $end
$var wire 1 (! inB $end
$var wire 1 8! inC $end
$var wire 1 H! inD $end
$var wire 1 X! inE $end
$var wire 1 h! inF $end
$var wire 1 x! inG $end
$var wire 1 *" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 N' outA $end
$var wire 1 O' outB $end

$scope module muxA $end
$var wire 1 N' out $end
$var wire 1 v inA $end
$var wire 1 (! inB $end
$var wire 1 8! inC $end
$var wire 1 H! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 P' w1 $end
$var wire 1 Q' w2 $end

$scope module mux_ab $end
$var wire 1 P' out $end
$var wire 1 v inA $end
$var wire 1 (! inB $end
$var wire 1 N s $end
$var wire 1 R' wA $end
$var wire 1 S' wnotS $end
$var wire 1 T' wB $end

$scope module notA $end
$var wire 1 S' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 R' out $end
$var wire 1 v in1 $end
$var wire 1 S' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 T' out $end
$var wire 1 (! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 P' out $end
$var wire 1 R' in1 $end
$var wire 1 T' in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 Q' out $end
$var wire 1 8! inA $end
$var wire 1 H! inB $end
$var wire 1 N s $end
$var wire 1 U' wA $end
$var wire 1 V' wnotS $end
$var wire 1 W' wB $end

$scope module notA $end
$var wire 1 V' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 U' out $end
$var wire 1 8! in1 $end
$var wire 1 V' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 W' out $end
$var wire 1 H! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 Q' out $end
$var wire 1 U' in1 $end
$var wire 1 W' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 N' out $end
$var wire 1 P' inA $end
$var wire 1 Q' inB $end
$var wire 1 M s $end
$var wire 1 X' wA $end
$var wire 1 Y' wnotS $end
$var wire 1 Z' wB $end

$scope module notA $end
$var wire 1 Y' out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 X' out $end
$var wire 1 P' in1 $end
$var wire 1 Y' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 Z' out $end
$var wire 1 Q' in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 N' out $end
$var wire 1 X' in1 $end
$var wire 1 Z' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 O' out $end
$var wire 1 X! inA $end
$var wire 1 h! inB $end
$var wire 1 x! inC $end
$var wire 1 *" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 [' w1 $end
$var wire 1 \' w2 $end

$scope module mux_ab $end
$var wire 1 [' out $end
$var wire 1 X! inA $end
$var wire 1 h! inB $end
$var wire 1 N s $end
$var wire 1 ]' wA $end
$var wire 1 ^' wnotS $end
$var wire 1 _' wB $end

$scope module notA $end
$var wire 1 ^' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ]' out $end
$var wire 1 X! in1 $end
$var wire 1 ^' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 _' out $end
$var wire 1 h! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 [' out $end
$var wire 1 ]' in1 $end
$var wire 1 _' in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 \' out $end
$var wire 1 x! inA $end
$var wire 1 *" inB $end
$var wire 1 N s $end
$var wire 1 `' wA $end
$var wire 1 a' wnotS $end
$var wire 1 b' wB $end

$scope module notA $end
$var wire 1 a' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 `' out $end
$var wire 1 x! in1 $end
$var wire 1 a' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 b' out $end
$var wire 1 *" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 \' out $end
$var wire 1 `' in1 $end
$var wire 1 b' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 O' out $end
$var wire 1 [' inA $end
$var wire 1 \' inB $end
$var wire 1 M s $end
$var wire 1 c' wA $end
$var wire 1 d' wnotS $end
$var wire 1 e' wB $end

$scope module notA $end
$var wire 1 d' out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 c' out $end
$var wire 1 [' in1 $end
$var wire 1 d' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 e' out $end
$var wire 1 \' in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 O' out $end
$var wire 1 c' in1 $end
$var wire 1 e' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 ) out $end
$var wire 1 N' inA $end
$var wire 1 O' inB $end
$var wire 1 L s $end
$var wire 1 f' wA $end
$var wire 1 g' wnotS $end
$var wire 1 h' wB $end

$scope module notA $end
$var wire 1 g' out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 f' out $end
$var wire 1 N' in1 $end
$var wire 1 g' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 h' out $end
$var wire 1 O' in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 ) out $end
$var wire 1 f' in1 $end
$var wire 1 h' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[6] $end
$var wire 1 * out $end
$var wire 1 w inA $end
$var wire 1 )! inB $end
$var wire 1 9! inC $end
$var wire 1 I! inD $end
$var wire 1 Y! inE $end
$var wire 1 i! inF $end
$var wire 1 y! inG $end
$var wire 1 +" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 i' outA $end
$var wire 1 j' outB $end

$scope module muxA $end
$var wire 1 i' out $end
$var wire 1 w inA $end
$var wire 1 )! inB $end
$var wire 1 9! inC $end
$var wire 1 I! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 k' w1 $end
$var wire 1 l' w2 $end

$scope module mux_ab $end
$var wire 1 k' out $end
$var wire 1 w inA $end
$var wire 1 )! inB $end
$var wire 1 N s $end
$var wire 1 m' wA $end
$var wire 1 n' wnotS $end
$var wire 1 o' wB $end

$scope module notA $end
$var wire 1 n' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 m' out $end
$var wire 1 w in1 $end
$var wire 1 n' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 o' out $end
$var wire 1 )! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 k' out $end
$var wire 1 m' in1 $end
$var wire 1 o' in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 l' out $end
$var wire 1 9! inA $end
$var wire 1 I! inB $end
$var wire 1 N s $end
$var wire 1 p' wA $end
$var wire 1 q' wnotS $end
$var wire 1 r' wB $end

$scope module notA $end
$var wire 1 q' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 p' out $end
$var wire 1 9! in1 $end
$var wire 1 q' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 r' out $end
$var wire 1 I! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 l' out $end
$var wire 1 p' in1 $end
$var wire 1 r' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 i' out $end
$var wire 1 k' inA $end
$var wire 1 l' inB $end
$var wire 1 M s $end
$var wire 1 s' wA $end
$var wire 1 t' wnotS $end
$var wire 1 u' wB $end

$scope module notA $end
$var wire 1 t' out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 s' out $end
$var wire 1 k' in1 $end
$var wire 1 t' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 u' out $end
$var wire 1 l' in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 i' out $end
$var wire 1 s' in1 $end
$var wire 1 u' in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 j' out $end
$var wire 1 Y! inA $end
$var wire 1 i! inB $end
$var wire 1 y! inC $end
$var wire 1 +" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 v' w1 $end
$var wire 1 w' w2 $end

$scope module mux_ab $end
$var wire 1 v' out $end
$var wire 1 Y! inA $end
$var wire 1 i! inB $end
$var wire 1 N s $end
$var wire 1 x' wA $end
$var wire 1 y' wnotS $end
$var wire 1 z' wB $end

$scope module notA $end
$var wire 1 y' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 x' out $end
$var wire 1 Y! in1 $end
$var wire 1 y' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 z' out $end
$var wire 1 i! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 v' out $end
$var wire 1 x' in1 $end
$var wire 1 z' in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 w' out $end
$var wire 1 y! inA $end
$var wire 1 +" inB $end
$var wire 1 N s $end
$var wire 1 {' wA $end
$var wire 1 |' wnotS $end
$var wire 1 }' wB $end

$scope module notA $end
$var wire 1 |' out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 {' out $end
$var wire 1 y! in1 $end
$var wire 1 |' in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 }' out $end
$var wire 1 +" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 w' out $end
$var wire 1 {' in1 $end
$var wire 1 }' in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 j' out $end
$var wire 1 v' inA $end
$var wire 1 w' inB $end
$var wire 1 M s $end
$var wire 1 ~' wA $end
$var wire 1 !( wnotS $end
$var wire 1 "( wB $end

$scope module notA $end
$var wire 1 !( out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ~' out $end
$var wire 1 v' in1 $end
$var wire 1 !( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 "( out $end
$var wire 1 w' in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 j' out $end
$var wire 1 ~' in1 $end
$var wire 1 "( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 * out $end
$var wire 1 i' inA $end
$var wire 1 j' inB $end
$var wire 1 L s $end
$var wire 1 #( wA $end
$var wire 1 $( wnotS $end
$var wire 1 %( wB $end

$scope module notA $end
$var wire 1 $( out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 #( out $end
$var wire 1 i' in1 $end
$var wire 1 $( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 %( out $end
$var wire 1 j' in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 * out $end
$var wire 1 #( in1 $end
$var wire 1 %( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[5] $end
$var wire 1 + out $end
$var wire 1 x inA $end
$var wire 1 *! inB $end
$var wire 1 :! inC $end
$var wire 1 J! inD $end
$var wire 1 Z! inE $end
$var wire 1 j! inF $end
$var wire 1 z! inG $end
$var wire 1 ," inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 &( outA $end
$var wire 1 '( outB $end

$scope module muxA $end
$var wire 1 &( out $end
$var wire 1 x inA $end
$var wire 1 *! inB $end
$var wire 1 :! inC $end
$var wire 1 J! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 (( w1 $end
$var wire 1 )( w2 $end

$scope module mux_ab $end
$var wire 1 (( out $end
$var wire 1 x inA $end
$var wire 1 *! inB $end
$var wire 1 N s $end
$var wire 1 *( wA $end
$var wire 1 +( wnotS $end
$var wire 1 ,( wB $end

$scope module notA $end
$var wire 1 +( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 *( out $end
$var wire 1 x in1 $end
$var wire 1 +( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ,( out $end
$var wire 1 *! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 (( out $end
$var wire 1 *( in1 $end
$var wire 1 ,( in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 )( out $end
$var wire 1 :! inA $end
$var wire 1 J! inB $end
$var wire 1 N s $end
$var wire 1 -( wA $end
$var wire 1 .( wnotS $end
$var wire 1 /( wB $end

$scope module notA $end
$var wire 1 .( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 -( out $end
$var wire 1 :! in1 $end
$var wire 1 .( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 /( out $end
$var wire 1 J! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 )( out $end
$var wire 1 -( in1 $end
$var wire 1 /( in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 &( out $end
$var wire 1 (( inA $end
$var wire 1 )( inB $end
$var wire 1 M s $end
$var wire 1 0( wA $end
$var wire 1 1( wnotS $end
$var wire 1 2( wB $end

$scope module notA $end
$var wire 1 1( out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 0( out $end
$var wire 1 (( in1 $end
$var wire 1 1( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 2( out $end
$var wire 1 )( in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 &( out $end
$var wire 1 0( in1 $end
$var wire 1 2( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 '( out $end
$var wire 1 Z! inA $end
$var wire 1 j! inB $end
$var wire 1 z! inC $end
$var wire 1 ," inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 3( w1 $end
$var wire 1 4( w2 $end

$scope module mux_ab $end
$var wire 1 3( out $end
$var wire 1 Z! inA $end
$var wire 1 j! inB $end
$var wire 1 N s $end
$var wire 1 5( wA $end
$var wire 1 6( wnotS $end
$var wire 1 7( wB $end

$scope module notA $end
$var wire 1 6( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 5( out $end
$var wire 1 Z! in1 $end
$var wire 1 6( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 7( out $end
$var wire 1 j! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 3( out $end
$var wire 1 5( in1 $end
$var wire 1 7( in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 4( out $end
$var wire 1 z! inA $end
$var wire 1 ," inB $end
$var wire 1 N s $end
$var wire 1 8( wA $end
$var wire 1 9( wnotS $end
$var wire 1 :( wB $end

$scope module notA $end
$var wire 1 9( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 8( out $end
$var wire 1 z! in1 $end
$var wire 1 9( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 :( out $end
$var wire 1 ," in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 4( out $end
$var wire 1 8( in1 $end
$var wire 1 :( in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 '( out $end
$var wire 1 3( inA $end
$var wire 1 4( inB $end
$var wire 1 M s $end
$var wire 1 ;( wA $end
$var wire 1 <( wnotS $end
$var wire 1 =( wB $end

$scope module notA $end
$var wire 1 <( out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ;( out $end
$var wire 1 3( in1 $end
$var wire 1 <( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 =( out $end
$var wire 1 4( in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 '( out $end
$var wire 1 ;( in1 $end
$var wire 1 =( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 + out $end
$var wire 1 &( inA $end
$var wire 1 '( inB $end
$var wire 1 L s $end
$var wire 1 >( wA $end
$var wire 1 ?( wnotS $end
$var wire 1 @( wB $end

$scope module notA $end
$var wire 1 ?( out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 >( out $end
$var wire 1 &( in1 $end
$var wire 1 ?( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 @( out $end
$var wire 1 '( in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 + out $end
$var wire 1 >( in1 $end
$var wire 1 @( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[4] $end
$var wire 1 , out $end
$var wire 1 y inA $end
$var wire 1 +! inB $end
$var wire 1 ;! inC $end
$var wire 1 K! inD $end
$var wire 1 [! inE $end
$var wire 1 k! inF $end
$var wire 1 {! inG $end
$var wire 1 -" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 A( outA $end
$var wire 1 B( outB $end

$scope module muxA $end
$var wire 1 A( out $end
$var wire 1 y inA $end
$var wire 1 +! inB $end
$var wire 1 ;! inC $end
$var wire 1 K! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 C( w1 $end
$var wire 1 D( w2 $end

$scope module mux_ab $end
$var wire 1 C( out $end
$var wire 1 y inA $end
$var wire 1 +! inB $end
$var wire 1 N s $end
$var wire 1 E( wA $end
$var wire 1 F( wnotS $end
$var wire 1 G( wB $end

$scope module notA $end
$var wire 1 F( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 E( out $end
$var wire 1 y in1 $end
$var wire 1 F( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 G( out $end
$var wire 1 +! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 C( out $end
$var wire 1 E( in1 $end
$var wire 1 G( in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 D( out $end
$var wire 1 ;! inA $end
$var wire 1 K! inB $end
$var wire 1 N s $end
$var wire 1 H( wA $end
$var wire 1 I( wnotS $end
$var wire 1 J( wB $end

$scope module notA $end
$var wire 1 I( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 H( out $end
$var wire 1 ;! in1 $end
$var wire 1 I( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 J( out $end
$var wire 1 K! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 D( out $end
$var wire 1 H( in1 $end
$var wire 1 J( in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 A( out $end
$var wire 1 C( inA $end
$var wire 1 D( inB $end
$var wire 1 M s $end
$var wire 1 K( wA $end
$var wire 1 L( wnotS $end
$var wire 1 M( wB $end

$scope module notA $end
$var wire 1 L( out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 K( out $end
$var wire 1 C( in1 $end
$var wire 1 L( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 M( out $end
$var wire 1 D( in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 A( out $end
$var wire 1 K( in1 $end
$var wire 1 M( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 B( out $end
$var wire 1 [! inA $end
$var wire 1 k! inB $end
$var wire 1 {! inC $end
$var wire 1 -" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 N( w1 $end
$var wire 1 O( w2 $end

$scope module mux_ab $end
$var wire 1 N( out $end
$var wire 1 [! inA $end
$var wire 1 k! inB $end
$var wire 1 N s $end
$var wire 1 P( wA $end
$var wire 1 Q( wnotS $end
$var wire 1 R( wB $end

$scope module notA $end
$var wire 1 Q( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 P( out $end
$var wire 1 [! in1 $end
$var wire 1 Q( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 R( out $end
$var wire 1 k! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 N( out $end
$var wire 1 P( in1 $end
$var wire 1 R( in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 O( out $end
$var wire 1 {! inA $end
$var wire 1 -" inB $end
$var wire 1 N s $end
$var wire 1 S( wA $end
$var wire 1 T( wnotS $end
$var wire 1 U( wB $end

$scope module notA $end
$var wire 1 T( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 S( out $end
$var wire 1 {! in1 $end
$var wire 1 T( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 U( out $end
$var wire 1 -" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 O( out $end
$var wire 1 S( in1 $end
$var wire 1 U( in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 B( out $end
$var wire 1 N( inA $end
$var wire 1 O( inB $end
$var wire 1 M s $end
$var wire 1 V( wA $end
$var wire 1 W( wnotS $end
$var wire 1 X( wB $end

$scope module notA $end
$var wire 1 W( out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 V( out $end
$var wire 1 N( in1 $end
$var wire 1 W( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 X( out $end
$var wire 1 O( in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 B( out $end
$var wire 1 V( in1 $end
$var wire 1 X( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 , out $end
$var wire 1 A( inA $end
$var wire 1 B( inB $end
$var wire 1 L s $end
$var wire 1 Y( wA $end
$var wire 1 Z( wnotS $end
$var wire 1 [( wB $end

$scope module notA $end
$var wire 1 Z( out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 Y( out $end
$var wire 1 A( in1 $end
$var wire 1 Z( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 [( out $end
$var wire 1 B( in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 , out $end
$var wire 1 Y( in1 $end
$var wire 1 [( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[3] $end
$var wire 1 - out $end
$var wire 1 z inA $end
$var wire 1 ,! inB $end
$var wire 1 <! inC $end
$var wire 1 L! inD $end
$var wire 1 \! inE $end
$var wire 1 l! inF $end
$var wire 1 |! inG $end
$var wire 1 ." inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 \( outA $end
$var wire 1 ]( outB $end

$scope module muxA $end
$var wire 1 \( out $end
$var wire 1 z inA $end
$var wire 1 ,! inB $end
$var wire 1 <! inC $end
$var wire 1 L! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 ^( w1 $end
$var wire 1 _( w2 $end

$scope module mux_ab $end
$var wire 1 ^( out $end
$var wire 1 z inA $end
$var wire 1 ,! inB $end
$var wire 1 N s $end
$var wire 1 `( wA $end
$var wire 1 a( wnotS $end
$var wire 1 b( wB $end

$scope module notA $end
$var wire 1 a( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 `( out $end
$var wire 1 z in1 $end
$var wire 1 a( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 b( out $end
$var wire 1 ,! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 ^( out $end
$var wire 1 `( in1 $end
$var wire 1 b( in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 _( out $end
$var wire 1 <! inA $end
$var wire 1 L! inB $end
$var wire 1 N s $end
$var wire 1 c( wA $end
$var wire 1 d( wnotS $end
$var wire 1 e( wB $end

$scope module notA $end
$var wire 1 d( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 c( out $end
$var wire 1 <! in1 $end
$var wire 1 d( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 e( out $end
$var wire 1 L! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 _( out $end
$var wire 1 c( in1 $end
$var wire 1 e( in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 \( out $end
$var wire 1 ^( inA $end
$var wire 1 _( inB $end
$var wire 1 M s $end
$var wire 1 f( wA $end
$var wire 1 g( wnotS $end
$var wire 1 h( wB $end

$scope module notA $end
$var wire 1 g( out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 f( out $end
$var wire 1 ^( in1 $end
$var wire 1 g( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 h( out $end
$var wire 1 _( in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 \( out $end
$var wire 1 f( in1 $end
$var wire 1 h( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 ]( out $end
$var wire 1 \! inA $end
$var wire 1 l! inB $end
$var wire 1 |! inC $end
$var wire 1 ." inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 i( w1 $end
$var wire 1 j( w2 $end

$scope module mux_ab $end
$var wire 1 i( out $end
$var wire 1 \! inA $end
$var wire 1 l! inB $end
$var wire 1 N s $end
$var wire 1 k( wA $end
$var wire 1 l( wnotS $end
$var wire 1 m( wB $end

$scope module notA $end
$var wire 1 l( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 k( out $end
$var wire 1 \! in1 $end
$var wire 1 l( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 m( out $end
$var wire 1 l! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 i( out $end
$var wire 1 k( in1 $end
$var wire 1 m( in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 j( out $end
$var wire 1 |! inA $end
$var wire 1 ." inB $end
$var wire 1 N s $end
$var wire 1 n( wA $end
$var wire 1 o( wnotS $end
$var wire 1 p( wB $end

$scope module notA $end
$var wire 1 o( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 n( out $end
$var wire 1 |! in1 $end
$var wire 1 o( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 p( out $end
$var wire 1 ." in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 j( out $end
$var wire 1 n( in1 $end
$var wire 1 p( in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 ]( out $end
$var wire 1 i( inA $end
$var wire 1 j( inB $end
$var wire 1 M s $end
$var wire 1 q( wA $end
$var wire 1 r( wnotS $end
$var wire 1 s( wB $end

$scope module notA $end
$var wire 1 r( out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 q( out $end
$var wire 1 i( in1 $end
$var wire 1 r( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 s( out $end
$var wire 1 j( in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 ]( out $end
$var wire 1 q( in1 $end
$var wire 1 s( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 - out $end
$var wire 1 \( inA $end
$var wire 1 ]( inB $end
$var wire 1 L s $end
$var wire 1 t( wA $end
$var wire 1 u( wnotS $end
$var wire 1 v( wB $end

$scope module notA $end
$var wire 1 u( out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 t( out $end
$var wire 1 \( in1 $end
$var wire 1 u( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 v( out $end
$var wire 1 ]( in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 - out $end
$var wire 1 t( in1 $end
$var wire 1 v( in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[2] $end
$var wire 1 . out $end
$var wire 1 { inA $end
$var wire 1 -! inB $end
$var wire 1 =! inC $end
$var wire 1 M! inD $end
$var wire 1 ]! inE $end
$var wire 1 m! inF $end
$var wire 1 }! inG $end
$var wire 1 /" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 w( outA $end
$var wire 1 x( outB $end

$scope module muxA $end
$var wire 1 w( out $end
$var wire 1 { inA $end
$var wire 1 -! inB $end
$var wire 1 =! inC $end
$var wire 1 M! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 y( w1 $end
$var wire 1 z( w2 $end

$scope module mux_ab $end
$var wire 1 y( out $end
$var wire 1 { inA $end
$var wire 1 -! inB $end
$var wire 1 N s $end
$var wire 1 {( wA $end
$var wire 1 |( wnotS $end
$var wire 1 }( wB $end

$scope module notA $end
$var wire 1 |( out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 {( out $end
$var wire 1 { in1 $end
$var wire 1 |( in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 }( out $end
$var wire 1 -! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 y( out $end
$var wire 1 {( in1 $end
$var wire 1 }( in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 z( out $end
$var wire 1 =! inA $end
$var wire 1 M! inB $end
$var wire 1 N s $end
$var wire 1 ~( wA $end
$var wire 1 !) wnotS $end
$var wire 1 ") wB $end

$scope module notA $end
$var wire 1 !) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ~( out $end
$var wire 1 =! in1 $end
$var wire 1 !) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ") out $end
$var wire 1 M! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 z( out $end
$var wire 1 ~( in1 $end
$var wire 1 ") in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 w( out $end
$var wire 1 y( inA $end
$var wire 1 z( inB $end
$var wire 1 M s $end
$var wire 1 #) wA $end
$var wire 1 $) wnotS $end
$var wire 1 %) wB $end

$scope module notA $end
$var wire 1 $) out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 #) out $end
$var wire 1 y( in1 $end
$var wire 1 $) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 %) out $end
$var wire 1 z( in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 w( out $end
$var wire 1 #) in1 $end
$var wire 1 %) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 x( out $end
$var wire 1 ]! inA $end
$var wire 1 m! inB $end
$var wire 1 }! inC $end
$var wire 1 /" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 &) w1 $end
$var wire 1 ') w2 $end

$scope module mux_ab $end
$var wire 1 &) out $end
$var wire 1 ]! inA $end
$var wire 1 m! inB $end
$var wire 1 N s $end
$var wire 1 () wA $end
$var wire 1 )) wnotS $end
$var wire 1 *) wB $end

$scope module notA $end
$var wire 1 )) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 () out $end
$var wire 1 ]! in1 $end
$var wire 1 )) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 *) out $end
$var wire 1 m! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 &) out $end
$var wire 1 () in1 $end
$var wire 1 *) in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 ') out $end
$var wire 1 }! inA $end
$var wire 1 /" inB $end
$var wire 1 N s $end
$var wire 1 +) wA $end
$var wire 1 ,) wnotS $end
$var wire 1 -) wB $end

$scope module notA $end
$var wire 1 ,) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 +) out $end
$var wire 1 }! in1 $end
$var wire 1 ,) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 -) out $end
$var wire 1 /" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 ') out $end
$var wire 1 +) in1 $end
$var wire 1 -) in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 x( out $end
$var wire 1 &) inA $end
$var wire 1 ') inB $end
$var wire 1 M s $end
$var wire 1 .) wA $end
$var wire 1 /) wnotS $end
$var wire 1 0) wB $end

$scope module notA $end
$var wire 1 /) out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 .) out $end
$var wire 1 &) in1 $end
$var wire 1 /) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 0) out $end
$var wire 1 ') in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 x( out $end
$var wire 1 .) in1 $end
$var wire 1 0) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 . out $end
$var wire 1 w( inA $end
$var wire 1 x( inB $end
$var wire 1 L s $end
$var wire 1 1) wA $end
$var wire 1 2) wnotS $end
$var wire 1 3) wB $end

$scope module notA $end
$var wire 1 2) out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 1) out $end
$var wire 1 w( in1 $end
$var wire 1 2) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 3) out $end
$var wire 1 x( in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 . out $end
$var wire 1 1) in1 $end
$var wire 1 3) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[1] $end
$var wire 1 / out $end
$var wire 1 | inA $end
$var wire 1 .! inB $end
$var wire 1 >! inC $end
$var wire 1 N! inD $end
$var wire 1 ^! inE $end
$var wire 1 n! inF $end
$var wire 1 ~! inG $end
$var wire 1 0" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 4) outA $end
$var wire 1 5) outB $end

$scope module muxA $end
$var wire 1 4) out $end
$var wire 1 | inA $end
$var wire 1 .! inB $end
$var wire 1 >! inC $end
$var wire 1 N! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 6) w1 $end
$var wire 1 7) w2 $end

$scope module mux_ab $end
$var wire 1 6) out $end
$var wire 1 | inA $end
$var wire 1 .! inB $end
$var wire 1 N s $end
$var wire 1 8) wA $end
$var wire 1 9) wnotS $end
$var wire 1 :) wB $end

$scope module notA $end
$var wire 1 9) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 8) out $end
$var wire 1 | in1 $end
$var wire 1 9) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 :) out $end
$var wire 1 .! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 6) out $end
$var wire 1 8) in1 $end
$var wire 1 :) in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 7) out $end
$var wire 1 >! inA $end
$var wire 1 N! inB $end
$var wire 1 N s $end
$var wire 1 ;) wA $end
$var wire 1 <) wnotS $end
$var wire 1 =) wB $end

$scope module notA $end
$var wire 1 <) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ;) out $end
$var wire 1 >! in1 $end
$var wire 1 <) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 =) out $end
$var wire 1 N! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 7) out $end
$var wire 1 ;) in1 $end
$var wire 1 =) in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 4) out $end
$var wire 1 6) inA $end
$var wire 1 7) inB $end
$var wire 1 M s $end
$var wire 1 >) wA $end
$var wire 1 ?) wnotS $end
$var wire 1 @) wB $end

$scope module notA $end
$var wire 1 ?) out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 >) out $end
$var wire 1 6) in1 $end
$var wire 1 ?) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 @) out $end
$var wire 1 7) in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 4) out $end
$var wire 1 >) in1 $end
$var wire 1 @) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 5) out $end
$var wire 1 ^! inA $end
$var wire 1 n! inB $end
$var wire 1 ~! inC $end
$var wire 1 0" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 A) w1 $end
$var wire 1 B) w2 $end

$scope module mux_ab $end
$var wire 1 A) out $end
$var wire 1 ^! inA $end
$var wire 1 n! inB $end
$var wire 1 N s $end
$var wire 1 C) wA $end
$var wire 1 D) wnotS $end
$var wire 1 E) wB $end

$scope module notA $end
$var wire 1 D) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 C) out $end
$var wire 1 ^! in1 $end
$var wire 1 D) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 E) out $end
$var wire 1 n! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 A) out $end
$var wire 1 C) in1 $end
$var wire 1 E) in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 B) out $end
$var wire 1 ~! inA $end
$var wire 1 0" inB $end
$var wire 1 N s $end
$var wire 1 F) wA $end
$var wire 1 G) wnotS $end
$var wire 1 H) wB $end

$scope module notA $end
$var wire 1 G) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 F) out $end
$var wire 1 ~! in1 $end
$var wire 1 G) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 H) out $end
$var wire 1 0" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 B) out $end
$var wire 1 F) in1 $end
$var wire 1 H) in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 5) out $end
$var wire 1 A) inA $end
$var wire 1 B) inB $end
$var wire 1 M s $end
$var wire 1 I) wA $end
$var wire 1 J) wnotS $end
$var wire 1 K) wB $end

$scope module notA $end
$var wire 1 J) out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 I) out $end
$var wire 1 A) in1 $end
$var wire 1 J) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 K) out $end
$var wire 1 B) in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 5) out $end
$var wire 1 I) in1 $end
$var wire 1 K) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 / out $end
$var wire 1 4) inA $end
$var wire 1 5) inB $end
$var wire 1 L s $end
$var wire 1 L) wA $end
$var wire 1 M) wnotS $end
$var wire 1 N) wB $end

$scope module notA $end
$var wire 1 M) out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 L) out $end
$var wire 1 4) in1 $end
$var wire 1 M) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 N) out $end
$var wire 1 5) in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 / out $end
$var wire 1 L) in1 $end
$var wire 1 N) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[0] $end
$var wire 1 0 out $end
$var wire 1 } inA $end
$var wire 1 /! inB $end
$var wire 1 ?! inC $end
$var wire 1 O! inD $end
$var wire 1 _! inE $end
$var wire 1 o! inF $end
$var wire 1 !" inG $end
$var wire 1 1" inH $end
$var wire 1 L s [2] $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 O) outA $end
$var wire 1 P) outB $end

$scope module muxA $end
$var wire 1 O) out $end
$var wire 1 } inA $end
$var wire 1 /! inB $end
$var wire 1 ?! inC $end
$var wire 1 O! inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 Q) w1 $end
$var wire 1 R) w2 $end

$scope module mux_ab $end
$var wire 1 Q) out $end
$var wire 1 } inA $end
$var wire 1 /! inB $end
$var wire 1 N s $end
$var wire 1 S) wA $end
$var wire 1 T) wnotS $end
$var wire 1 U) wB $end

$scope module notA $end
$var wire 1 T) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 S) out $end
$var wire 1 } in1 $end
$var wire 1 T) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 U) out $end
$var wire 1 /! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 Q) out $end
$var wire 1 S) in1 $end
$var wire 1 U) in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 R) out $end
$var wire 1 ?! inA $end
$var wire 1 O! inB $end
$var wire 1 N s $end
$var wire 1 V) wA $end
$var wire 1 W) wnotS $end
$var wire 1 X) wB $end

$scope module notA $end
$var wire 1 W) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 V) out $end
$var wire 1 ?! in1 $end
$var wire 1 W) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 X) out $end
$var wire 1 O! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 R) out $end
$var wire 1 V) in1 $end
$var wire 1 X) in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 O) out $end
$var wire 1 Q) inA $end
$var wire 1 R) inB $end
$var wire 1 M s $end
$var wire 1 Y) wA $end
$var wire 1 Z) wnotS $end
$var wire 1 [) wB $end

$scope module notA $end
$var wire 1 Z) out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 Y) out $end
$var wire 1 Q) in1 $end
$var wire 1 Z) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 [) out $end
$var wire 1 R) in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 O) out $end
$var wire 1 Y) in1 $end
$var wire 1 [) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 P) out $end
$var wire 1 _! inA $end
$var wire 1 o! inB $end
$var wire 1 !" inC $end
$var wire 1 1" inD $end
$var wire 1 M s [1] $end
$var wire 1 N s [0] $end
$var wire 1 \) w1 $end
$var wire 1 ]) w2 $end

$scope module mux_ab $end
$var wire 1 \) out $end
$var wire 1 _! inA $end
$var wire 1 o! inB $end
$var wire 1 N s $end
$var wire 1 ^) wA $end
$var wire 1 _) wnotS $end
$var wire 1 `) wB $end

$scope module notA $end
$var wire 1 _) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ^) out $end
$var wire 1 _! in1 $end
$var wire 1 _) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 `) out $end
$var wire 1 o! in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 \) out $end
$var wire 1 ^) in1 $end
$var wire 1 `) in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 ]) out $end
$var wire 1 !" inA $end
$var wire 1 1" inB $end
$var wire 1 N s $end
$var wire 1 a) wA $end
$var wire 1 b) wnotS $end
$var wire 1 c) wB $end

$scope module notA $end
$var wire 1 b) out $end
$var wire 1 N in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 a) out $end
$var wire 1 !" in1 $end
$var wire 1 b) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 c) out $end
$var wire 1 1" in1 $end
$var wire 1 N in2 $end
$upscope $end

$scope module res $end
$var wire 1 ]) out $end
$var wire 1 a) in1 $end
$var wire 1 c) in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 P) out $end
$var wire 1 \) inA $end
$var wire 1 ]) inB $end
$var wire 1 M s $end
$var wire 1 d) wA $end
$var wire 1 e) wnotS $end
$var wire 1 f) wB $end

$scope module notA $end
$var wire 1 e) out $end
$var wire 1 M in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 d) out $end
$var wire 1 \) in1 $end
$var wire 1 e) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 f) out $end
$var wire 1 ]) in1 $end
$var wire 1 M in2 $end
$upscope $end

$scope module res $end
$var wire 1 P) out $end
$var wire 1 d) in1 $end
$var wire 1 f) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 0 out $end
$var wire 1 O) inA $end
$var wire 1 P) inB $end
$var wire 1 L s $end
$var wire 1 g) wA $end
$var wire 1 h) wnotS $end
$var wire 1 i) wB $end

$scope module notA $end
$var wire 1 h) out $end
$var wire 1 L in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 g) out $end
$var wire 1 O) in1 $end
$var wire 1 h) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 i) out $end
$var wire 1 P) in1 $end
$var wire 1 L in2 $end
$upscope $end

$scope module res $end
$var wire 1 0 out $end
$var wire 1 g) in1 $end
$var wire 1 i) in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux2 $end
$var wire 1 1 out [15] $end
$var wire 1 2 out [14] $end
$var wire 1 3 out [13] $end
$var wire 1 4 out [12] $end
$var wire 1 5 out [11] $end
$var wire 1 6 out [10] $end
$var wire 1 7 out [9] $end
$var wire 1 8 out [8] $end
$var wire 1 9 out [7] $end
$var wire 1 : out [6] $end
$var wire 1 ; out [5] $end
$var wire 1 < out [4] $end
$var wire 1 = out [3] $end
$var wire 1 > out [2] $end
$var wire 1 ? out [1] $end
$var wire 1 @ out [0] $end
$var wire 1 n inA [15] $end
$var wire 1 o inA [14] $end
$var wire 1 p inA [13] $end
$var wire 1 q inA [12] $end
$var wire 1 r inA [11] $end
$var wire 1 s inA [10] $end
$var wire 1 t inA [9] $end
$var wire 1 u inA [8] $end
$var wire 1 v inA [7] $end
$var wire 1 w inA [6] $end
$var wire 1 x inA [5] $end
$var wire 1 y inA [4] $end
$var wire 1 z inA [3] $end
$var wire 1 { inA [2] $end
$var wire 1 | inA [1] $end
$var wire 1 } inA [0] $end
$var wire 1 ~ inB [15] $end
$var wire 1 !! inB [14] $end
$var wire 1 "! inB [13] $end
$var wire 1 #! inB [12] $end
$var wire 1 $! inB [11] $end
$var wire 1 %! inB [10] $end
$var wire 1 &! inB [9] $end
$var wire 1 '! inB [8] $end
$var wire 1 (! inB [7] $end
$var wire 1 )! inB [6] $end
$var wire 1 *! inB [5] $end
$var wire 1 +! inB [4] $end
$var wire 1 ,! inB [3] $end
$var wire 1 -! inB [2] $end
$var wire 1 .! inB [1] $end
$var wire 1 /! inB [0] $end
$var wire 1 0! inC [15] $end
$var wire 1 1! inC [14] $end
$var wire 1 2! inC [13] $end
$var wire 1 3! inC [12] $end
$var wire 1 4! inC [11] $end
$var wire 1 5! inC [10] $end
$var wire 1 6! inC [9] $end
$var wire 1 7! inC [8] $end
$var wire 1 8! inC [7] $end
$var wire 1 9! inC [6] $end
$var wire 1 :! inC [5] $end
$var wire 1 ;! inC [4] $end
$var wire 1 <! inC [3] $end
$var wire 1 =! inC [2] $end
$var wire 1 >! inC [1] $end
$var wire 1 ?! inC [0] $end
$var wire 1 @! inD [15] $end
$var wire 1 A! inD [14] $end
$var wire 1 B! inD [13] $end
$var wire 1 C! inD [12] $end
$var wire 1 D! inD [11] $end
$var wire 1 E! inD [10] $end
$var wire 1 F! inD [9] $end
$var wire 1 G! inD [8] $end
$var wire 1 H! inD [7] $end
$var wire 1 I! inD [6] $end
$var wire 1 J! inD [5] $end
$var wire 1 K! inD [4] $end
$var wire 1 L! inD [3] $end
$var wire 1 M! inD [2] $end
$var wire 1 N! inD [1] $end
$var wire 1 O! inD [0] $end
$var wire 1 P! inE [15] $end
$var wire 1 Q! inE [14] $end
$var wire 1 R! inE [13] $end
$var wire 1 S! inE [12] $end
$var wire 1 T! inE [11] $end
$var wire 1 U! inE [10] $end
$var wire 1 V! inE [9] $end
$var wire 1 W! inE [8] $end
$var wire 1 X! inE [7] $end
$var wire 1 Y! inE [6] $end
$var wire 1 Z! inE [5] $end
$var wire 1 [! inE [4] $end
$var wire 1 \! inE [3] $end
$var wire 1 ]! inE [2] $end
$var wire 1 ^! inE [1] $end
$var wire 1 _! inE [0] $end
$var wire 1 `! inF [15] $end
$var wire 1 a! inF [14] $end
$var wire 1 b! inF [13] $end
$var wire 1 c! inF [12] $end
$var wire 1 d! inF [11] $end
$var wire 1 e! inF [10] $end
$var wire 1 f! inF [9] $end
$var wire 1 g! inF [8] $end
$var wire 1 h! inF [7] $end
$var wire 1 i! inF [6] $end
$var wire 1 j! inF [5] $end
$var wire 1 k! inF [4] $end
$var wire 1 l! inF [3] $end
$var wire 1 m! inF [2] $end
$var wire 1 n! inF [1] $end
$var wire 1 o! inF [0] $end
$var wire 1 p! inG [15] $end
$var wire 1 q! inG [14] $end
$var wire 1 r! inG [13] $end
$var wire 1 s! inG [12] $end
$var wire 1 t! inG [11] $end
$var wire 1 u! inG [10] $end
$var wire 1 v! inG [9] $end
$var wire 1 w! inG [8] $end
$var wire 1 x! inG [7] $end
$var wire 1 y! inG [6] $end
$var wire 1 z! inG [5] $end
$var wire 1 {! inG [4] $end
$var wire 1 |! inG [3] $end
$var wire 1 }! inG [2] $end
$var wire 1 ~! inG [1] $end
$var wire 1 !" inG [0] $end
$var wire 1 "" inH [15] $end
$var wire 1 #" inH [14] $end
$var wire 1 $" inH [13] $end
$var wire 1 %" inH [12] $end
$var wire 1 &" inH [11] $end
$var wire 1 '" inH [10] $end
$var wire 1 (" inH [9] $end
$var wire 1 )" inH [8] $end
$var wire 1 *" inH [7] $end
$var wire 1 +" inH [6] $end
$var wire 1 ," inH [5] $end
$var wire 1 -" inH [4] $end
$var wire 1 ." inH [3] $end
$var wire 1 /" inH [2] $end
$var wire 1 0" inH [1] $end
$var wire 1 1" inH [0] $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end

$scope module mux[15] $end
$var wire 1 1 out $end
$var wire 1 n inA $end
$var wire 1 ~ inB $end
$var wire 1 0! inC $end
$var wire 1 @! inD $end
$var wire 1 P! inE $end
$var wire 1 `! inF $end
$var wire 1 p! inG $end
$var wire 1 "" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 k) outA $end
$var wire 1 l) outB $end

$scope module muxA $end
$var wire 1 k) out $end
$var wire 1 n inA $end
$var wire 1 ~ inB $end
$var wire 1 0! inC $end
$var wire 1 @! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 m) w1 $end
$var wire 1 n) w2 $end

$scope module mux_ab $end
$var wire 1 m) out $end
$var wire 1 n inA $end
$var wire 1 ~ inB $end
$var wire 1 Q s $end
$var wire 1 o) wA $end
$var wire 1 p) wnotS $end
$var wire 1 q) wB $end

$scope module notA $end
$var wire 1 p) out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 o) out $end
$var wire 1 n in1 $end
$var wire 1 p) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 q) out $end
$var wire 1 ~ in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 m) out $end
$var wire 1 o) in1 $end
$var wire 1 q) in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 n) out $end
$var wire 1 0! inA $end
$var wire 1 @! inB $end
$var wire 1 Q s $end
$var wire 1 r) wA $end
$var wire 1 s) wnotS $end
$var wire 1 t) wB $end

$scope module notA $end
$var wire 1 s) out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 r) out $end
$var wire 1 0! in1 $end
$var wire 1 s) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 t) out $end
$var wire 1 @! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 n) out $end
$var wire 1 r) in1 $end
$var wire 1 t) in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 k) out $end
$var wire 1 m) inA $end
$var wire 1 n) inB $end
$var wire 1 P s $end
$var wire 1 u) wA $end
$var wire 1 v) wnotS $end
$var wire 1 w) wB $end

$scope module notA $end
$var wire 1 v) out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 u) out $end
$var wire 1 m) in1 $end
$var wire 1 v) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 w) out $end
$var wire 1 n) in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 k) out $end
$var wire 1 u) in1 $end
$var wire 1 w) in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 l) out $end
$var wire 1 P! inA $end
$var wire 1 `! inB $end
$var wire 1 p! inC $end
$var wire 1 "" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 x) w1 $end
$var wire 1 y) w2 $end

$scope module mux_ab $end
$var wire 1 x) out $end
$var wire 1 P! inA $end
$var wire 1 `! inB $end
$var wire 1 Q s $end
$var wire 1 z) wA $end
$var wire 1 {) wnotS $end
$var wire 1 |) wB $end

$scope module notA $end
$var wire 1 {) out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 z) out $end
$var wire 1 P! in1 $end
$var wire 1 {) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 |) out $end
$var wire 1 `! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 x) out $end
$var wire 1 z) in1 $end
$var wire 1 |) in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 y) out $end
$var wire 1 p! inA $end
$var wire 1 "" inB $end
$var wire 1 Q s $end
$var wire 1 }) wA $end
$var wire 1 ~) wnotS $end
$var wire 1 !* wB $end

$scope module notA $end
$var wire 1 ~) out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 }) out $end
$var wire 1 p! in1 $end
$var wire 1 ~) in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 !* out $end
$var wire 1 "" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 y) out $end
$var wire 1 }) in1 $end
$var wire 1 !* in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 l) out $end
$var wire 1 x) inA $end
$var wire 1 y) inB $end
$var wire 1 P s $end
$var wire 1 "* wA $end
$var wire 1 #* wnotS $end
$var wire 1 $* wB $end

$scope module notA $end
$var wire 1 #* out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 "* out $end
$var wire 1 x) in1 $end
$var wire 1 #* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 $* out $end
$var wire 1 y) in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 l) out $end
$var wire 1 "* in1 $end
$var wire 1 $* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 1 out $end
$var wire 1 k) inA $end
$var wire 1 l) inB $end
$var wire 1 O s $end
$var wire 1 %* wA $end
$var wire 1 &* wnotS $end
$var wire 1 '* wB $end

$scope module notA $end
$var wire 1 &* out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 %* out $end
$var wire 1 k) in1 $end
$var wire 1 &* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 '* out $end
$var wire 1 l) in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 1 out $end
$var wire 1 %* in1 $end
$var wire 1 '* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[14] $end
$var wire 1 2 out $end
$var wire 1 o inA $end
$var wire 1 !! inB $end
$var wire 1 1! inC $end
$var wire 1 A! inD $end
$var wire 1 Q! inE $end
$var wire 1 a! inF $end
$var wire 1 q! inG $end
$var wire 1 #" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 (* outA $end
$var wire 1 )* outB $end

$scope module muxA $end
$var wire 1 (* out $end
$var wire 1 o inA $end
$var wire 1 !! inB $end
$var wire 1 1! inC $end
$var wire 1 A! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 ** w1 $end
$var wire 1 +* w2 $end

$scope module mux_ab $end
$var wire 1 ** out $end
$var wire 1 o inA $end
$var wire 1 !! inB $end
$var wire 1 Q s $end
$var wire 1 ,* wA $end
$var wire 1 -* wnotS $end
$var wire 1 .* wB $end

$scope module notA $end
$var wire 1 -* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ,* out $end
$var wire 1 o in1 $end
$var wire 1 -* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 .* out $end
$var wire 1 !! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 ** out $end
$var wire 1 ,* in1 $end
$var wire 1 .* in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 +* out $end
$var wire 1 1! inA $end
$var wire 1 A! inB $end
$var wire 1 Q s $end
$var wire 1 /* wA $end
$var wire 1 0* wnotS $end
$var wire 1 1* wB $end

$scope module notA $end
$var wire 1 0* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 /* out $end
$var wire 1 1! in1 $end
$var wire 1 0* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 1* out $end
$var wire 1 A! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 +* out $end
$var wire 1 /* in1 $end
$var wire 1 1* in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 (* out $end
$var wire 1 ** inA $end
$var wire 1 +* inB $end
$var wire 1 P s $end
$var wire 1 2* wA $end
$var wire 1 3* wnotS $end
$var wire 1 4* wB $end

$scope module notA $end
$var wire 1 3* out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 2* out $end
$var wire 1 ** in1 $end
$var wire 1 3* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 4* out $end
$var wire 1 +* in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 (* out $end
$var wire 1 2* in1 $end
$var wire 1 4* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 )* out $end
$var wire 1 Q! inA $end
$var wire 1 a! inB $end
$var wire 1 q! inC $end
$var wire 1 #" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 5* w1 $end
$var wire 1 6* w2 $end

$scope module mux_ab $end
$var wire 1 5* out $end
$var wire 1 Q! inA $end
$var wire 1 a! inB $end
$var wire 1 Q s $end
$var wire 1 7* wA $end
$var wire 1 8* wnotS $end
$var wire 1 9* wB $end

$scope module notA $end
$var wire 1 8* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 7* out $end
$var wire 1 Q! in1 $end
$var wire 1 8* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 9* out $end
$var wire 1 a! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 5* out $end
$var wire 1 7* in1 $end
$var wire 1 9* in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 6* out $end
$var wire 1 q! inA $end
$var wire 1 #" inB $end
$var wire 1 Q s $end
$var wire 1 :* wA $end
$var wire 1 ;* wnotS $end
$var wire 1 <* wB $end

$scope module notA $end
$var wire 1 ;* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 :* out $end
$var wire 1 q! in1 $end
$var wire 1 ;* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 <* out $end
$var wire 1 #" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 6* out $end
$var wire 1 :* in1 $end
$var wire 1 <* in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 )* out $end
$var wire 1 5* inA $end
$var wire 1 6* inB $end
$var wire 1 P s $end
$var wire 1 =* wA $end
$var wire 1 >* wnotS $end
$var wire 1 ?* wB $end

$scope module notA $end
$var wire 1 >* out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 =* out $end
$var wire 1 5* in1 $end
$var wire 1 >* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ?* out $end
$var wire 1 6* in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 )* out $end
$var wire 1 =* in1 $end
$var wire 1 ?* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 2 out $end
$var wire 1 (* inA $end
$var wire 1 )* inB $end
$var wire 1 O s $end
$var wire 1 @* wA $end
$var wire 1 A* wnotS $end
$var wire 1 B* wB $end

$scope module notA $end
$var wire 1 A* out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 @* out $end
$var wire 1 (* in1 $end
$var wire 1 A* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 B* out $end
$var wire 1 )* in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 2 out $end
$var wire 1 @* in1 $end
$var wire 1 B* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[13] $end
$var wire 1 3 out $end
$var wire 1 p inA $end
$var wire 1 "! inB $end
$var wire 1 2! inC $end
$var wire 1 B! inD $end
$var wire 1 R! inE $end
$var wire 1 b! inF $end
$var wire 1 r! inG $end
$var wire 1 $" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 C* outA $end
$var wire 1 D* outB $end

$scope module muxA $end
$var wire 1 C* out $end
$var wire 1 p inA $end
$var wire 1 "! inB $end
$var wire 1 2! inC $end
$var wire 1 B! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 E* w1 $end
$var wire 1 F* w2 $end

$scope module mux_ab $end
$var wire 1 E* out $end
$var wire 1 p inA $end
$var wire 1 "! inB $end
$var wire 1 Q s $end
$var wire 1 G* wA $end
$var wire 1 H* wnotS $end
$var wire 1 I* wB $end

$scope module notA $end
$var wire 1 H* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 G* out $end
$var wire 1 p in1 $end
$var wire 1 H* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 I* out $end
$var wire 1 "! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 E* out $end
$var wire 1 G* in1 $end
$var wire 1 I* in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 F* out $end
$var wire 1 2! inA $end
$var wire 1 B! inB $end
$var wire 1 Q s $end
$var wire 1 J* wA $end
$var wire 1 K* wnotS $end
$var wire 1 L* wB $end

$scope module notA $end
$var wire 1 K* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 J* out $end
$var wire 1 2! in1 $end
$var wire 1 K* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 L* out $end
$var wire 1 B! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 F* out $end
$var wire 1 J* in1 $end
$var wire 1 L* in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 C* out $end
$var wire 1 E* inA $end
$var wire 1 F* inB $end
$var wire 1 P s $end
$var wire 1 M* wA $end
$var wire 1 N* wnotS $end
$var wire 1 O* wB $end

$scope module notA $end
$var wire 1 N* out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 M* out $end
$var wire 1 E* in1 $end
$var wire 1 N* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 O* out $end
$var wire 1 F* in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 C* out $end
$var wire 1 M* in1 $end
$var wire 1 O* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 D* out $end
$var wire 1 R! inA $end
$var wire 1 b! inB $end
$var wire 1 r! inC $end
$var wire 1 $" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 P* w1 $end
$var wire 1 Q* w2 $end

$scope module mux_ab $end
$var wire 1 P* out $end
$var wire 1 R! inA $end
$var wire 1 b! inB $end
$var wire 1 Q s $end
$var wire 1 R* wA $end
$var wire 1 S* wnotS $end
$var wire 1 T* wB $end

$scope module notA $end
$var wire 1 S* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 R* out $end
$var wire 1 R! in1 $end
$var wire 1 S* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 T* out $end
$var wire 1 b! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 P* out $end
$var wire 1 R* in1 $end
$var wire 1 T* in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 Q* out $end
$var wire 1 r! inA $end
$var wire 1 $" inB $end
$var wire 1 Q s $end
$var wire 1 U* wA $end
$var wire 1 V* wnotS $end
$var wire 1 W* wB $end

$scope module notA $end
$var wire 1 V* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 U* out $end
$var wire 1 r! in1 $end
$var wire 1 V* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 W* out $end
$var wire 1 $" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 Q* out $end
$var wire 1 U* in1 $end
$var wire 1 W* in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 D* out $end
$var wire 1 P* inA $end
$var wire 1 Q* inB $end
$var wire 1 P s $end
$var wire 1 X* wA $end
$var wire 1 Y* wnotS $end
$var wire 1 Z* wB $end

$scope module notA $end
$var wire 1 Y* out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 X* out $end
$var wire 1 P* in1 $end
$var wire 1 Y* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 Z* out $end
$var wire 1 Q* in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 D* out $end
$var wire 1 X* in1 $end
$var wire 1 Z* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 3 out $end
$var wire 1 C* inA $end
$var wire 1 D* inB $end
$var wire 1 O s $end
$var wire 1 [* wA $end
$var wire 1 \* wnotS $end
$var wire 1 ]* wB $end

$scope module notA $end
$var wire 1 \* out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 [* out $end
$var wire 1 C* in1 $end
$var wire 1 \* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ]* out $end
$var wire 1 D* in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 3 out $end
$var wire 1 [* in1 $end
$var wire 1 ]* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[12] $end
$var wire 1 4 out $end
$var wire 1 q inA $end
$var wire 1 #! inB $end
$var wire 1 3! inC $end
$var wire 1 C! inD $end
$var wire 1 S! inE $end
$var wire 1 c! inF $end
$var wire 1 s! inG $end
$var wire 1 %" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 ^* outA $end
$var wire 1 _* outB $end

$scope module muxA $end
$var wire 1 ^* out $end
$var wire 1 q inA $end
$var wire 1 #! inB $end
$var wire 1 3! inC $end
$var wire 1 C! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 `* w1 $end
$var wire 1 a* w2 $end

$scope module mux_ab $end
$var wire 1 `* out $end
$var wire 1 q inA $end
$var wire 1 #! inB $end
$var wire 1 Q s $end
$var wire 1 b* wA $end
$var wire 1 c* wnotS $end
$var wire 1 d* wB $end

$scope module notA $end
$var wire 1 c* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 b* out $end
$var wire 1 q in1 $end
$var wire 1 c* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 d* out $end
$var wire 1 #! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 `* out $end
$var wire 1 b* in1 $end
$var wire 1 d* in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 a* out $end
$var wire 1 3! inA $end
$var wire 1 C! inB $end
$var wire 1 Q s $end
$var wire 1 e* wA $end
$var wire 1 f* wnotS $end
$var wire 1 g* wB $end

$scope module notA $end
$var wire 1 f* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 e* out $end
$var wire 1 3! in1 $end
$var wire 1 f* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 g* out $end
$var wire 1 C! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 a* out $end
$var wire 1 e* in1 $end
$var wire 1 g* in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 ^* out $end
$var wire 1 `* inA $end
$var wire 1 a* inB $end
$var wire 1 P s $end
$var wire 1 h* wA $end
$var wire 1 i* wnotS $end
$var wire 1 j* wB $end

$scope module notA $end
$var wire 1 i* out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 h* out $end
$var wire 1 `* in1 $end
$var wire 1 i* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 j* out $end
$var wire 1 a* in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 ^* out $end
$var wire 1 h* in1 $end
$var wire 1 j* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 _* out $end
$var wire 1 S! inA $end
$var wire 1 c! inB $end
$var wire 1 s! inC $end
$var wire 1 %" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 k* w1 $end
$var wire 1 l* w2 $end

$scope module mux_ab $end
$var wire 1 k* out $end
$var wire 1 S! inA $end
$var wire 1 c! inB $end
$var wire 1 Q s $end
$var wire 1 m* wA $end
$var wire 1 n* wnotS $end
$var wire 1 o* wB $end

$scope module notA $end
$var wire 1 n* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 m* out $end
$var wire 1 S! in1 $end
$var wire 1 n* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 o* out $end
$var wire 1 c! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 k* out $end
$var wire 1 m* in1 $end
$var wire 1 o* in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 l* out $end
$var wire 1 s! inA $end
$var wire 1 %" inB $end
$var wire 1 Q s $end
$var wire 1 p* wA $end
$var wire 1 q* wnotS $end
$var wire 1 r* wB $end

$scope module notA $end
$var wire 1 q* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 p* out $end
$var wire 1 s! in1 $end
$var wire 1 q* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 r* out $end
$var wire 1 %" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 l* out $end
$var wire 1 p* in1 $end
$var wire 1 r* in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 _* out $end
$var wire 1 k* inA $end
$var wire 1 l* inB $end
$var wire 1 P s $end
$var wire 1 s* wA $end
$var wire 1 t* wnotS $end
$var wire 1 u* wB $end

$scope module notA $end
$var wire 1 t* out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 s* out $end
$var wire 1 k* in1 $end
$var wire 1 t* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 u* out $end
$var wire 1 l* in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 _* out $end
$var wire 1 s* in1 $end
$var wire 1 u* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 4 out $end
$var wire 1 ^* inA $end
$var wire 1 _* inB $end
$var wire 1 O s $end
$var wire 1 v* wA $end
$var wire 1 w* wnotS $end
$var wire 1 x* wB $end

$scope module notA $end
$var wire 1 w* out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 v* out $end
$var wire 1 ^* in1 $end
$var wire 1 w* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 x* out $end
$var wire 1 _* in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 4 out $end
$var wire 1 v* in1 $end
$var wire 1 x* in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[11] $end
$var wire 1 5 out $end
$var wire 1 r inA $end
$var wire 1 $! inB $end
$var wire 1 4! inC $end
$var wire 1 D! inD $end
$var wire 1 T! inE $end
$var wire 1 d! inF $end
$var wire 1 t! inG $end
$var wire 1 &" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 y* outA $end
$var wire 1 z* outB $end

$scope module muxA $end
$var wire 1 y* out $end
$var wire 1 r inA $end
$var wire 1 $! inB $end
$var wire 1 4! inC $end
$var wire 1 D! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 {* w1 $end
$var wire 1 |* w2 $end

$scope module mux_ab $end
$var wire 1 {* out $end
$var wire 1 r inA $end
$var wire 1 $! inB $end
$var wire 1 Q s $end
$var wire 1 }* wA $end
$var wire 1 ~* wnotS $end
$var wire 1 !+ wB $end

$scope module notA $end
$var wire 1 ~* out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 }* out $end
$var wire 1 r in1 $end
$var wire 1 ~* in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 !+ out $end
$var wire 1 $! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 {* out $end
$var wire 1 }* in1 $end
$var wire 1 !+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 |* out $end
$var wire 1 4! inA $end
$var wire 1 D! inB $end
$var wire 1 Q s $end
$var wire 1 "+ wA $end
$var wire 1 #+ wnotS $end
$var wire 1 $+ wB $end

$scope module notA $end
$var wire 1 #+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 "+ out $end
$var wire 1 4! in1 $end
$var wire 1 #+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 $+ out $end
$var wire 1 D! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 |* out $end
$var wire 1 "+ in1 $end
$var wire 1 $+ in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 y* out $end
$var wire 1 {* inA $end
$var wire 1 |* inB $end
$var wire 1 P s $end
$var wire 1 %+ wA $end
$var wire 1 &+ wnotS $end
$var wire 1 '+ wB $end

$scope module notA $end
$var wire 1 &+ out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 %+ out $end
$var wire 1 {* in1 $end
$var wire 1 &+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 '+ out $end
$var wire 1 |* in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 y* out $end
$var wire 1 %+ in1 $end
$var wire 1 '+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 z* out $end
$var wire 1 T! inA $end
$var wire 1 d! inB $end
$var wire 1 t! inC $end
$var wire 1 &" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 (+ w1 $end
$var wire 1 )+ w2 $end

$scope module mux_ab $end
$var wire 1 (+ out $end
$var wire 1 T! inA $end
$var wire 1 d! inB $end
$var wire 1 Q s $end
$var wire 1 *+ wA $end
$var wire 1 ++ wnotS $end
$var wire 1 ,+ wB $end

$scope module notA $end
$var wire 1 ++ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 *+ out $end
$var wire 1 T! in1 $end
$var wire 1 ++ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ,+ out $end
$var wire 1 d! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 (+ out $end
$var wire 1 *+ in1 $end
$var wire 1 ,+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 )+ out $end
$var wire 1 t! inA $end
$var wire 1 &" inB $end
$var wire 1 Q s $end
$var wire 1 -+ wA $end
$var wire 1 .+ wnotS $end
$var wire 1 /+ wB $end

$scope module notA $end
$var wire 1 .+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 -+ out $end
$var wire 1 t! in1 $end
$var wire 1 .+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 /+ out $end
$var wire 1 &" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 )+ out $end
$var wire 1 -+ in1 $end
$var wire 1 /+ in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 z* out $end
$var wire 1 (+ inA $end
$var wire 1 )+ inB $end
$var wire 1 P s $end
$var wire 1 0+ wA $end
$var wire 1 1+ wnotS $end
$var wire 1 2+ wB $end

$scope module notA $end
$var wire 1 1+ out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 0+ out $end
$var wire 1 (+ in1 $end
$var wire 1 1+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 2+ out $end
$var wire 1 )+ in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 z* out $end
$var wire 1 0+ in1 $end
$var wire 1 2+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 5 out $end
$var wire 1 y* inA $end
$var wire 1 z* inB $end
$var wire 1 O s $end
$var wire 1 3+ wA $end
$var wire 1 4+ wnotS $end
$var wire 1 5+ wB $end

$scope module notA $end
$var wire 1 4+ out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 3+ out $end
$var wire 1 y* in1 $end
$var wire 1 4+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 5+ out $end
$var wire 1 z* in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 5 out $end
$var wire 1 3+ in1 $end
$var wire 1 5+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[10] $end
$var wire 1 6 out $end
$var wire 1 s inA $end
$var wire 1 %! inB $end
$var wire 1 5! inC $end
$var wire 1 E! inD $end
$var wire 1 U! inE $end
$var wire 1 e! inF $end
$var wire 1 u! inG $end
$var wire 1 '" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 6+ outA $end
$var wire 1 7+ outB $end

$scope module muxA $end
$var wire 1 6+ out $end
$var wire 1 s inA $end
$var wire 1 %! inB $end
$var wire 1 5! inC $end
$var wire 1 E! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 8+ w1 $end
$var wire 1 9+ w2 $end

$scope module mux_ab $end
$var wire 1 8+ out $end
$var wire 1 s inA $end
$var wire 1 %! inB $end
$var wire 1 Q s $end
$var wire 1 :+ wA $end
$var wire 1 ;+ wnotS $end
$var wire 1 <+ wB $end

$scope module notA $end
$var wire 1 ;+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 :+ out $end
$var wire 1 s in1 $end
$var wire 1 ;+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 <+ out $end
$var wire 1 %! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 8+ out $end
$var wire 1 :+ in1 $end
$var wire 1 <+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 9+ out $end
$var wire 1 5! inA $end
$var wire 1 E! inB $end
$var wire 1 Q s $end
$var wire 1 =+ wA $end
$var wire 1 >+ wnotS $end
$var wire 1 ?+ wB $end

$scope module notA $end
$var wire 1 >+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 =+ out $end
$var wire 1 5! in1 $end
$var wire 1 >+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ?+ out $end
$var wire 1 E! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 9+ out $end
$var wire 1 =+ in1 $end
$var wire 1 ?+ in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 6+ out $end
$var wire 1 8+ inA $end
$var wire 1 9+ inB $end
$var wire 1 P s $end
$var wire 1 @+ wA $end
$var wire 1 A+ wnotS $end
$var wire 1 B+ wB $end

$scope module notA $end
$var wire 1 A+ out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 @+ out $end
$var wire 1 8+ in1 $end
$var wire 1 A+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 B+ out $end
$var wire 1 9+ in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 6+ out $end
$var wire 1 @+ in1 $end
$var wire 1 B+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 7+ out $end
$var wire 1 U! inA $end
$var wire 1 e! inB $end
$var wire 1 u! inC $end
$var wire 1 '" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 C+ w1 $end
$var wire 1 D+ w2 $end

$scope module mux_ab $end
$var wire 1 C+ out $end
$var wire 1 U! inA $end
$var wire 1 e! inB $end
$var wire 1 Q s $end
$var wire 1 E+ wA $end
$var wire 1 F+ wnotS $end
$var wire 1 G+ wB $end

$scope module notA $end
$var wire 1 F+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 E+ out $end
$var wire 1 U! in1 $end
$var wire 1 F+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 G+ out $end
$var wire 1 e! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 C+ out $end
$var wire 1 E+ in1 $end
$var wire 1 G+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 D+ out $end
$var wire 1 u! inA $end
$var wire 1 '" inB $end
$var wire 1 Q s $end
$var wire 1 H+ wA $end
$var wire 1 I+ wnotS $end
$var wire 1 J+ wB $end

$scope module notA $end
$var wire 1 I+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 H+ out $end
$var wire 1 u! in1 $end
$var wire 1 I+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 J+ out $end
$var wire 1 '" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 D+ out $end
$var wire 1 H+ in1 $end
$var wire 1 J+ in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 7+ out $end
$var wire 1 C+ inA $end
$var wire 1 D+ inB $end
$var wire 1 P s $end
$var wire 1 K+ wA $end
$var wire 1 L+ wnotS $end
$var wire 1 M+ wB $end

$scope module notA $end
$var wire 1 L+ out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 K+ out $end
$var wire 1 C+ in1 $end
$var wire 1 L+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 M+ out $end
$var wire 1 D+ in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 7+ out $end
$var wire 1 K+ in1 $end
$var wire 1 M+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 6 out $end
$var wire 1 6+ inA $end
$var wire 1 7+ inB $end
$var wire 1 O s $end
$var wire 1 N+ wA $end
$var wire 1 O+ wnotS $end
$var wire 1 P+ wB $end

$scope module notA $end
$var wire 1 O+ out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 N+ out $end
$var wire 1 6+ in1 $end
$var wire 1 O+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 P+ out $end
$var wire 1 7+ in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 6 out $end
$var wire 1 N+ in1 $end
$var wire 1 P+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[9] $end
$var wire 1 7 out $end
$var wire 1 t inA $end
$var wire 1 &! inB $end
$var wire 1 6! inC $end
$var wire 1 F! inD $end
$var wire 1 V! inE $end
$var wire 1 f! inF $end
$var wire 1 v! inG $end
$var wire 1 (" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 Q+ outA $end
$var wire 1 R+ outB $end

$scope module muxA $end
$var wire 1 Q+ out $end
$var wire 1 t inA $end
$var wire 1 &! inB $end
$var wire 1 6! inC $end
$var wire 1 F! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 S+ w1 $end
$var wire 1 T+ w2 $end

$scope module mux_ab $end
$var wire 1 S+ out $end
$var wire 1 t inA $end
$var wire 1 &! inB $end
$var wire 1 Q s $end
$var wire 1 U+ wA $end
$var wire 1 V+ wnotS $end
$var wire 1 W+ wB $end

$scope module notA $end
$var wire 1 V+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 U+ out $end
$var wire 1 t in1 $end
$var wire 1 V+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 W+ out $end
$var wire 1 &! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 S+ out $end
$var wire 1 U+ in1 $end
$var wire 1 W+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 T+ out $end
$var wire 1 6! inA $end
$var wire 1 F! inB $end
$var wire 1 Q s $end
$var wire 1 X+ wA $end
$var wire 1 Y+ wnotS $end
$var wire 1 Z+ wB $end

$scope module notA $end
$var wire 1 Y+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 X+ out $end
$var wire 1 6! in1 $end
$var wire 1 Y+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 Z+ out $end
$var wire 1 F! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 T+ out $end
$var wire 1 X+ in1 $end
$var wire 1 Z+ in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 Q+ out $end
$var wire 1 S+ inA $end
$var wire 1 T+ inB $end
$var wire 1 P s $end
$var wire 1 [+ wA $end
$var wire 1 \+ wnotS $end
$var wire 1 ]+ wB $end

$scope module notA $end
$var wire 1 \+ out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 [+ out $end
$var wire 1 S+ in1 $end
$var wire 1 \+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ]+ out $end
$var wire 1 T+ in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 Q+ out $end
$var wire 1 [+ in1 $end
$var wire 1 ]+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 R+ out $end
$var wire 1 V! inA $end
$var wire 1 f! inB $end
$var wire 1 v! inC $end
$var wire 1 (" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 ^+ w1 $end
$var wire 1 _+ w2 $end

$scope module mux_ab $end
$var wire 1 ^+ out $end
$var wire 1 V! inA $end
$var wire 1 f! inB $end
$var wire 1 Q s $end
$var wire 1 `+ wA $end
$var wire 1 a+ wnotS $end
$var wire 1 b+ wB $end

$scope module notA $end
$var wire 1 a+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 `+ out $end
$var wire 1 V! in1 $end
$var wire 1 a+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 b+ out $end
$var wire 1 f! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 ^+ out $end
$var wire 1 `+ in1 $end
$var wire 1 b+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 _+ out $end
$var wire 1 v! inA $end
$var wire 1 (" inB $end
$var wire 1 Q s $end
$var wire 1 c+ wA $end
$var wire 1 d+ wnotS $end
$var wire 1 e+ wB $end

$scope module notA $end
$var wire 1 d+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 c+ out $end
$var wire 1 v! in1 $end
$var wire 1 d+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 e+ out $end
$var wire 1 (" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 _+ out $end
$var wire 1 c+ in1 $end
$var wire 1 e+ in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 R+ out $end
$var wire 1 ^+ inA $end
$var wire 1 _+ inB $end
$var wire 1 P s $end
$var wire 1 f+ wA $end
$var wire 1 g+ wnotS $end
$var wire 1 h+ wB $end

$scope module notA $end
$var wire 1 g+ out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 f+ out $end
$var wire 1 ^+ in1 $end
$var wire 1 g+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 h+ out $end
$var wire 1 _+ in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 R+ out $end
$var wire 1 f+ in1 $end
$var wire 1 h+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 7 out $end
$var wire 1 Q+ inA $end
$var wire 1 R+ inB $end
$var wire 1 O s $end
$var wire 1 i+ wA $end
$var wire 1 j+ wnotS $end
$var wire 1 k+ wB $end

$scope module notA $end
$var wire 1 j+ out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 i+ out $end
$var wire 1 Q+ in1 $end
$var wire 1 j+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 k+ out $end
$var wire 1 R+ in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 7 out $end
$var wire 1 i+ in1 $end
$var wire 1 k+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[8] $end
$var wire 1 8 out $end
$var wire 1 u inA $end
$var wire 1 '! inB $end
$var wire 1 7! inC $end
$var wire 1 G! inD $end
$var wire 1 W! inE $end
$var wire 1 g! inF $end
$var wire 1 w! inG $end
$var wire 1 )" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 l+ outA $end
$var wire 1 m+ outB $end

$scope module muxA $end
$var wire 1 l+ out $end
$var wire 1 u inA $end
$var wire 1 '! inB $end
$var wire 1 7! inC $end
$var wire 1 G! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 n+ w1 $end
$var wire 1 o+ w2 $end

$scope module mux_ab $end
$var wire 1 n+ out $end
$var wire 1 u inA $end
$var wire 1 '! inB $end
$var wire 1 Q s $end
$var wire 1 p+ wA $end
$var wire 1 q+ wnotS $end
$var wire 1 r+ wB $end

$scope module notA $end
$var wire 1 q+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 p+ out $end
$var wire 1 u in1 $end
$var wire 1 q+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 r+ out $end
$var wire 1 '! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 n+ out $end
$var wire 1 p+ in1 $end
$var wire 1 r+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 o+ out $end
$var wire 1 7! inA $end
$var wire 1 G! inB $end
$var wire 1 Q s $end
$var wire 1 s+ wA $end
$var wire 1 t+ wnotS $end
$var wire 1 u+ wB $end

$scope module notA $end
$var wire 1 t+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 s+ out $end
$var wire 1 7! in1 $end
$var wire 1 t+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 u+ out $end
$var wire 1 G! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 o+ out $end
$var wire 1 s+ in1 $end
$var wire 1 u+ in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 l+ out $end
$var wire 1 n+ inA $end
$var wire 1 o+ inB $end
$var wire 1 P s $end
$var wire 1 v+ wA $end
$var wire 1 w+ wnotS $end
$var wire 1 x+ wB $end

$scope module notA $end
$var wire 1 w+ out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 v+ out $end
$var wire 1 n+ in1 $end
$var wire 1 w+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 x+ out $end
$var wire 1 o+ in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 l+ out $end
$var wire 1 v+ in1 $end
$var wire 1 x+ in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 m+ out $end
$var wire 1 W! inA $end
$var wire 1 g! inB $end
$var wire 1 w! inC $end
$var wire 1 )" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 y+ w1 $end
$var wire 1 z+ w2 $end

$scope module mux_ab $end
$var wire 1 y+ out $end
$var wire 1 W! inA $end
$var wire 1 g! inB $end
$var wire 1 Q s $end
$var wire 1 {+ wA $end
$var wire 1 |+ wnotS $end
$var wire 1 }+ wB $end

$scope module notA $end
$var wire 1 |+ out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 {+ out $end
$var wire 1 W! in1 $end
$var wire 1 |+ in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 }+ out $end
$var wire 1 g! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 y+ out $end
$var wire 1 {+ in1 $end
$var wire 1 }+ in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 z+ out $end
$var wire 1 w! inA $end
$var wire 1 )" inB $end
$var wire 1 Q s $end
$var wire 1 ~+ wA $end
$var wire 1 !, wnotS $end
$var wire 1 ", wB $end

$scope module notA $end
$var wire 1 !, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ~+ out $end
$var wire 1 w! in1 $end
$var wire 1 !, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ", out $end
$var wire 1 )" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 z+ out $end
$var wire 1 ~+ in1 $end
$var wire 1 ", in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 m+ out $end
$var wire 1 y+ inA $end
$var wire 1 z+ inB $end
$var wire 1 P s $end
$var wire 1 #, wA $end
$var wire 1 $, wnotS $end
$var wire 1 %, wB $end

$scope module notA $end
$var wire 1 $, out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 #, out $end
$var wire 1 y+ in1 $end
$var wire 1 $, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 %, out $end
$var wire 1 z+ in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 m+ out $end
$var wire 1 #, in1 $end
$var wire 1 %, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 8 out $end
$var wire 1 l+ inA $end
$var wire 1 m+ inB $end
$var wire 1 O s $end
$var wire 1 &, wA $end
$var wire 1 ', wnotS $end
$var wire 1 (, wB $end

$scope module notA $end
$var wire 1 ', out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 &, out $end
$var wire 1 l+ in1 $end
$var wire 1 ', in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 (, out $end
$var wire 1 m+ in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 8 out $end
$var wire 1 &, in1 $end
$var wire 1 (, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[7] $end
$var wire 1 9 out $end
$var wire 1 v inA $end
$var wire 1 (! inB $end
$var wire 1 8! inC $end
$var wire 1 H! inD $end
$var wire 1 X! inE $end
$var wire 1 h! inF $end
$var wire 1 x! inG $end
$var wire 1 *" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 ), outA $end
$var wire 1 *, outB $end

$scope module muxA $end
$var wire 1 ), out $end
$var wire 1 v inA $end
$var wire 1 (! inB $end
$var wire 1 8! inC $end
$var wire 1 H! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 +, w1 $end
$var wire 1 ,, w2 $end

$scope module mux_ab $end
$var wire 1 +, out $end
$var wire 1 v inA $end
$var wire 1 (! inB $end
$var wire 1 Q s $end
$var wire 1 -, wA $end
$var wire 1 ., wnotS $end
$var wire 1 /, wB $end

$scope module notA $end
$var wire 1 ., out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 -, out $end
$var wire 1 v in1 $end
$var wire 1 ., in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 /, out $end
$var wire 1 (! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 +, out $end
$var wire 1 -, in1 $end
$var wire 1 /, in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 ,, out $end
$var wire 1 8! inA $end
$var wire 1 H! inB $end
$var wire 1 Q s $end
$var wire 1 0, wA $end
$var wire 1 1, wnotS $end
$var wire 1 2, wB $end

$scope module notA $end
$var wire 1 1, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 0, out $end
$var wire 1 8! in1 $end
$var wire 1 1, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 2, out $end
$var wire 1 H! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 ,, out $end
$var wire 1 0, in1 $end
$var wire 1 2, in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 ), out $end
$var wire 1 +, inA $end
$var wire 1 ,, inB $end
$var wire 1 P s $end
$var wire 1 3, wA $end
$var wire 1 4, wnotS $end
$var wire 1 5, wB $end

$scope module notA $end
$var wire 1 4, out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 3, out $end
$var wire 1 +, in1 $end
$var wire 1 4, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 5, out $end
$var wire 1 ,, in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 ), out $end
$var wire 1 3, in1 $end
$var wire 1 5, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 *, out $end
$var wire 1 X! inA $end
$var wire 1 h! inB $end
$var wire 1 x! inC $end
$var wire 1 *" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 6, w1 $end
$var wire 1 7, w2 $end

$scope module mux_ab $end
$var wire 1 6, out $end
$var wire 1 X! inA $end
$var wire 1 h! inB $end
$var wire 1 Q s $end
$var wire 1 8, wA $end
$var wire 1 9, wnotS $end
$var wire 1 :, wB $end

$scope module notA $end
$var wire 1 9, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 8, out $end
$var wire 1 X! in1 $end
$var wire 1 9, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 :, out $end
$var wire 1 h! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 6, out $end
$var wire 1 8, in1 $end
$var wire 1 :, in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 7, out $end
$var wire 1 x! inA $end
$var wire 1 *" inB $end
$var wire 1 Q s $end
$var wire 1 ;, wA $end
$var wire 1 <, wnotS $end
$var wire 1 =, wB $end

$scope module notA $end
$var wire 1 <, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ;, out $end
$var wire 1 x! in1 $end
$var wire 1 <, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 =, out $end
$var wire 1 *" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 7, out $end
$var wire 1 ;, in1 $end
$var wire 1 =, in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 *, out $end
$var wire 1 6, inA $end
$var wire 1 7, inB $end
$var wire 1 P s $end
$var wire 1 >, wA $end
$var wire 1 ?, wnotS $end
$var wire 1 @, wB $end

$scope module notA $end
$var wire 1 ?, out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 >, out $end
$var wire 1 6, in1 $end
$var wire 1 ?, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 @, out $end
$var wire 1 7, in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 *, out $end
$var wire 1 >, in1 $end
$var wire 1 @, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 9 out $end
$var wire 1 ), inA $end
$var wire 1 *, inB $end
$var wire 1 O s $end
$var wire 1 A, wA $end
$var wire 1 B, wnotS $end
$var wire 1 C, wB $end

$scope module notA $end
$var wire 1 B, out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 A, out $end
$var wire 1 ), in1 $end
$var wire 1 B, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 C, out $end
$var wire 1 *, in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 9 out $end
$var wire 1 A, in1 $end
$var wire 1 C, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[6] $end
$var wire 1 : out $end
$var wire 1 w inA $end
$var wire 1 )! inB $end
$var wire 1 9! inC $end
$var wire 1 I! inD $end
$var wire 1 Y! inE $end
$var wire 1 i! inF $end
$var wire 1 y! inG $end
$var wire 1 +" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 D, outA $end
$var wire 1 E, outB $end

$scope module muxA $end
$var wire 1 D, out $end
$var wire 1 w inA $end
$var wire 1 )! inB $end
$var wire 1 9! inC $end
$var wire 1 I! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 F, w1 $end
$var wire 1 G, w2 $end

$scope module mux_ab $end
$var wire 1 F, out $end
$var wire 1 w inA $end
$var wire 1 )! inB $end
$var wire 1 Q s $end
$var wire 1 H, wA $end
$var wire 1 I, wnotS $end
$var wire 1 J, wB $end

$scope module notA $end
$var wire 1 I, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 H, out $end
$var wire 1 w in1 $end
$var wire 1 I, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 J, out $end
$var wire 1 )! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 F, out $end
$var wire 1 H, in1 $end
$var wire 1 J, in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 G, out $end
$var wire 1 9! inA $end
$var wire 1 I! inB $end
$var wire 1 Q s $end
$var wire 1 K, wA $end
$var wire 1 L, wnotS $end
$var wire 1 M, wB $end

$scope module notA $end
$var wire 1 L, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 K, out $end
$var wire 1 9! in1 $end
$var wire 1 L, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 M, out $end
$var wire 1 I! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 G, out $end
$var wire 1 K, in1 $end
$var wire 1 M, in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 D, out $end
$var wire 1 F, inA $end
$var wire 1 G, inB $end
$var wire 1 P s $end
$var wire 1 N, wA $end
$var wire 1 O, wnotS $end
$var wire 1 P, wB $end

$scope module notA $end
$var wire 1 O, out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 N, out $end
$var wire 1 F, in1 $end
$var wire 1 O, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 P, out $end
$var wire 1 G, in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 D, out $end
$var wire 1 N, in1 $end
$var wire 1 P, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 E, out $end
$var wire 1 Y! inA $end
$var wire 1 i! inB $end
$var wire 1 y! inC $end
$var wire 1 +" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 Q, w1 $end
$var wire 1 R, w2 $end

$scope module mux_ab $end
$var wire 1 Q, out $end
$var wire 1 Y! inA $end
$var wire 1 i! inB $end
$var wire 1 Q s $end
$var wire 1 S, wA $end
$var wire 1 T, wnotS $end
$var wire 1 U, wB $end

$scope module notA $end
$var wire 1 T, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 S, out $end
$var wire 1 Y! in1 $end
$var wire 1 T, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 U, out $end
$var wire 1 i! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 Q, out $end
$var wire 1 S, in1 $end
$var wire 1 U, in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 R, out $end
$var wire 1 y! inA $end
$var wire 1 +" inB $end
$var wire 1 Q s $end
$var wire 1 V, wA $end
$var wire 1 W, wnotS $end
$var wire 1 X, wB $end

$scope module notA $end
$var wire 1 W, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 V, out $end
$var wire 1 y! in1 $end
$var wire 1 W, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 X, out $end
$var wire 1 +" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 R, out $end
$var wire 1 V, in1 $end
$var wire 1 X, in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 E, out $end
$var wire 1 Q, inA $end
$var wire 1 R, inB $end
$var wire 1 P s $end
$var wire 1 Y, wA $end
$var wire 1 Z, wnotS $end
$var wire 1 [, wB $end

$scope module notA $end
$var wire 1 Z, out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 Y, out $end
$var wire 1 Q, in1 $end
$var wire 1 Z, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 [, out $end
$var wire 1 R, in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 E, out $end
$var wire 1 Y, in1 $end
$var wire 1 [, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 : out $end
$var wire 1 D, inA $end
$var wire 1 E, inB $end
$var wire 1 O s $end
$var wire 1 \, wA $end
$var wire 1 ], wnotS $end
$var wire 1 ^, wB $end

$scope module notA $end
$var wire 1 ], out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 \, out $end
$var wire 1 D, in1 $end
$var wire 1 ], in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ^, out $end
$var wire 1 E, in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 : out $end
$var wire 1 \, in1 $end
$var wire 1 ^, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[5] $end
$var wire 1 ; out $end
$var wire 1 x inA $end
$var wire 1 *! inB $end
$var wire 1 :! inC $end
$var wire 1 J! inD $end
$var wire 1 Z! inE $end
$var wire 1 j! inF $end
$var wire 1 z! inG $end
$var wire 1 ," inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 _, outA $end
$var wire 1 `, outB $end

$scope module muxA $end
$var wire 1 _, out $end
$var wire 1 x inA $end
$var wire 1 *! inB $end
$var wire 1 :! inC $end
$var wire 1 J! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 a, w1 $end
$var wire 1 b, w2 $end

$scope module mux_ab $end
$var wire 1 a, out $end
$var wire 1 x inA $end
$var wire 1 *! inB $end
$var wire 1 Q s $end
$var wire 1 c, wA $end
$var wire 1 d, wnotS $end
$var wire 1 e, wB $end

$scope module notA $end
$var wire 1 d, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 c, out $end
$var wire 1 x in1 $end
$var wire 1 d, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 e, out $end
$var wire 1 *! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 a, out $end
$var wire 1 c, in1 $end
$var wire 1 e, in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 b, out $end
$var wire 1 :! inA $end
$var wire 1 J! inB $end
$var wire 1 Q s $end
$var wire 1 f, wA $end
$var wire 1 g, wnotS $end
$var wire 1 h, wB $end

$scope module notA $end
$var wire 1 g, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 f, out $end
$var wire 1 :! in1 $end
$var wire 1 g, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 h, out $end
$var wire 1 J! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 b, out $end
$var wire 1 f, in1 $end
$var wire 1 h, in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 _, out $end
$var wire 1 a, inA $end
$var wire 1 b, inB $end
$var wire 1 P s $end
$var wire 1 i, wA $end
$var wire 1 j, wnotS $end
$var wire 1 k, wB $end

$scope module notA $end
$var wire 1 j, out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 i, out $end
$var wire 1 a, in1 $end
$var wire 1 j, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 k, out $end
$var wire 1 b, in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 _, out $end
$var wire 1 i, in1 $end
$var wire 1 k, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 `, out $end
$var wire 1 Z! inA $end
$var wire 1 j! inB $end
$var wire 1 z! inC $end
$var wire 1 ," inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 l, w1 $end
$var wire 1 m, w2 $end

$scope module mux_ab $end
$var wire 1 l, out $end
$var wire 1 Z! inA $end
$var wire 1 j! inB $end
$var wire 1 Q s $end
$var wire 1 n, wA $end
$var wire 1 o, wnotS $end
$var wire 1 p, wB $end

$scope module notA $end
$var wire 1 o, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 n, out $end
$var wire 1 Z! in1 $end
$var wire 1 o, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 p, out $end
$var wire 1 j! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 l, out $end
$var wire 1 n, in1 $end
$var wire 1 p, in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 m, out $end
$var wire 1 z! inA $end
$var wire 1 ," inB $end
$var wire 1 Q s $end
$var wire 1 q, wA $end
$var wire 1 r, wnotS $end
$var wire 1 s, wB $end

$scope module notA $end
$var wire 1 r, out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 q, out $end
$var wire 1 z! in1 $end
$var wire 1 r, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 s, out $end
$var wire 1 ," in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 m, out $end
$var wire 1 q, in1 $end
$var wire 1 s, in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 `, out $end
$var wire 1 l, inA $end
$var wire 1 m, inB $end
$var wire 1 P s $end
$var wire 1 t, wA $end
$var wire 1 u, wnotS $end
$var wire 1 v, wB $end

$scope module notA $end
$var wire 1 u, out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 t, out $end
$var wire 1 l, in1 $end
$var wire 1 u, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 v, out $end
$var wire 1 m, in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 `, out $end
$var wire 1 t, in1 $end
$var wire 1 v, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 ; out $end
$var wire 1 _, inA $end
$var wire 1 `, inB $end
$var wire 1 O s $end
$var wire 1 w, wA $end
$var wire 1 x, wnotS $end
$var wire 1 y, wB $end

$scope module notA $end
$var wire 1 x, out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 w, out $end
$var wire 1 _, in1 $end
$var wire 1 x, in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 y, out $end
$var wire 1 `, in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 ; out $end
$var wire 1 w, in1 $end
$var wire 1 y, in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[4] $end
$var wire 1 < out $end
$var wire 1 y inA $end
$var wire 1 +! inB $end
$var wire 1 ;! inC $end
$var wire 1 K! inD $end
$var wire 1 [! inE $end
$var wire 1 k! inF $end
$var wire 1 {! inG $end
$var wire 1 -" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 z, outA $end
$var wire 1 {, outB $end

$scope module muxA $end
$var wire 1 z, out $end
$var wire 1 y inA $end
$var wire 1 +! inB $end
$var wire 1 ;! inC $end
$var wire 1 K! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 |, w1 $end
$var wire 1 }, w2 $end

$scope module mux_ab $end
$var wire 1 |, out $end
$var wire 1 y inA $end
$var wire 1 +! inB $end
$var wire 1 Q s $end
$var wire 1 ~, wA $end
$var wire 1 !- wnotS $end
$var wire 1 "- wB $end

$scope module notA $end
$var wire 1 !- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ~, out $end
$var wire 1 y in1 $end
$var wire 1 !- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 "- out $end
$var wire 1 +! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 |, out $end
$var wire 1 ~, in1 $end
$var wire 1 "- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 }, out $end
$var wire 1 ;! inA $end
$var wire 1 K! inB $end
$var wire 1 Q s $end
$var wire 1 #- wA $end
$var wire 1 $- wnotS $end
$var wire 1 %- wB $end

$scope module notA $end
$var wire 1 $- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 #- out $end
$var wire 1 ;! in1 $end
$var wire 1 $- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 %- out $end
$var wire 1 K! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 }, out $end
$var wire 1 #- in1 $end
$var wire 1 %- in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 z, out $end
$var wire 1 |, inA $end
$var wire 1 }, inB $end
$var wire 1 P s $end
$var wire 1 &- wA $end
$var wire 1 '- wnotS $end
$var wire 1 (- wB $end

$scope module notA $end
$var wire 1 '- out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 &- out $end
$var wire 1 |, in1 $end
$var wire 1 '- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 (- out $end
$var wire 1 }, in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 z, out $end
$var wire 1 &- in1 $end
$var wire 1 (- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 {, out $end
$var wire 1 [! inA $end
$var wire 1 k! inB $end
$var wire 1 {! inC $end
$var wire 1 -" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 )- w1 $end
$var wire 1 *- w2 $end

$scope module mux_ab $end
$var wire 1 )- out $end
$var wire 1 [! inA $end
$var wire 1 k! inB $end
$var wire 1 Q s $end
$var wire 1 +- wA $end
$var wire 1 ,- wnotS $end
$var wire 1 -- wB $end

$scope module notA $end
$var wire 1 ,- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 +- out $end
$var wire 1 [! in1 $end
$var wire 1 ,- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 -- out $end
$var wire 1 k! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 )- out $end
$var wire 1 +- in1 $end
$var wire 1 -- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 *- out $end
$var wire 1 {! inA $end
$var wire 1 -" inB $end
$var wire 1 Q s $end
$var wire 1 .- wA $end
$var wire 1 /- wnotS $end
$var wire 1 0- wB $end

$scope module notA $end
$var wire 1 /- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 .- out $end
$var wire 1 {! in1 $end
$var wire 1 /- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 0- out $end
$var wire 1 -" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 *- out $end
$var wire 1 .- in1 $end
$var wire 1 0- in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 {, out $end
$var wire 1 )- inA $end
$var wire 1 *- inB $end
$var wire 1 P s $end
$var wire 1 1- wA $end
$var wire 1 2- wnotS $end
$var wire 1 3- wB $end

$scope module notA $end
$var wire 1 2- out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 1- out $end
$var wire 1 )- in1 $end
$var wire 1 2- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 3- out $end
$var wire 1 *- in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 {, out $end
$var wire 1 1- in1 $end
$var wire 1 3- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 < out $end
$var wire 1 z, inA $end
$var wire 1 {, inB $end
$var wire 1 O s $end
$var wire 1 4- wA $end
$var wire 1 5- wnotS $end
$var wire 1 6- wB $end

$scope module notA $end
$var wire 1 5- out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 4- out $end
$var wire 1 z, in1 $end
$var wire 1 5- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 6- out $end
$var wire 1 {, in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 < out $end
$var wire 1 4- in1 $end
$var wire 1 6- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[3] $end
$var wire 1 = out $end
$var wire 1 z inA $end
$var wire 1 ,! inB $end
$var wire 1 <! inC $end
$var wire 1 L! inD $end
$var wire 1 \! inE $end
$var wire 1 l! inF $end
$var wire 1 |! inG $end
$var wire 1 ." inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 7- outA $end
$var wire 1 8- outB $end

$scope module muxA $end
$var wire 1 7- out $end
$var wire 1 z inA $end
$var wire 1 ,! inB $end
$var wire 1 <! inC $end
$var wire 1 L! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 9- w1 $end
$var wire 1 :- w2 $end

$scope module mux_ab $end
$var wire 1 9- out $end
$var wire 1 z inA $end
$var wire 1 ,! inB $end
$var wire 1 Q s $end
$var wire 1 ;- wA $end
$var wire 1 <- wnotS $end
$var wire 1 =- wB $end

$scope module notA $end
$var wire 1 <- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ;- out $end
$var wire 1 z in1 $end
$var wire 1 <- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 =- out $end
$var wire 1 ,! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 9- out $end
$var wire 1 ;- in1 $end
$var wire 1 =- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 :- out $end
$var wire 1 <! inA $end
$var wire 1 L! inB $end
$var wire 1 Q s $end
$var wire 1 >- wA $end
$var wire 1 ?- wnotS $end
$var wire 1 @- wB $end

$scope module notA $end
$var wire 1 ?- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 >- out $end
$var wire 1 <! in1 $end
$var wire 1 ?- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 @- out $end
$var wire 1 L! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 :- out $end
$var wire 1 >- in1 $end
$var wire 1 @- in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 7- out $end
$var wire 1 9- inA $end
$var wire 1 :- inB $end
$var wire 1 P s $end
$var wire 1 A- wA $end
$var wire 1 B- wnotS $end
$var wire 1 C- wB $end

$scope module notA $end
$var wire 1 B- out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 A- out $end
$var wire 1 9- in1 $end
$var wire 1 B- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 C- out $end
$var wire 1 :- in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 7- out $end
$var wire 1 A- in1 $end
$var wire 1 C- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 8- out $end
$var wire 1 \! inA $end
$var wire 1 l! inB $end
$var wire 1 |! inC $end
$var wire 1 ." inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 D- w1 $end
$var wire 1 E- w2 $end

$scope module mux_ab $end
$var wire 1 D- out $end
$var wire 1 \! inA $end
$var wire 1 l! inB $end
$var wire 1 Q s $end
$var wire 1 F- wA $end
$var wire 1 G- wnotS $end
$var wire 1 H- wB $end

$scope module notA $end
$var wire 1 G- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 F- out $end
$var wire 1 \! in1 $end
$var wire 1 G- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 H- out $end
$var wire 1 l! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 D- out $end
$var wire 1 F- in1 $end
$var wire 1 H- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 E- out $end
$var wire 1 |! inA $end
$var wire 1 ." inB $end
$var wire 1 Q s $end
$var wire 1 I- wA $end
$var wire 1 J- wnotS $end
$var wire 1 K- wB $end

$scope module notA $end
$var wire 1 J- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 I- out $end
$var wire 1 |! in1 $end
$var wire 1 J- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 K- out $end
$var wire 1 ." in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 E- out $end
$var wire 1 I- in1 $end
$var wire 1 K- in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 8- out $end
$var wire 1 D- inA $end
$var wire 1 E- inB $end
$var wire 1 P s $end
$var wire 1 L- wA $end
$var wire 1 M- wnotS $end
$var wire 1 N- wB $end

$scope module notA $end
$var wire 1 M- out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 L- out $end
$var wire 1 D- in1 $end
$var wire 1 M- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 N- out $end
$var wire 1 E- in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 8- out $end
$var wire 1 L- in1 $end
$var wire 1 N- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 = out $end
$var wire 1 7- inA $end
$var wire 1 8- inB $end
$var wire 1 O s $end
$var wire 1 O- wA $end
$var wire 1 P- wnotS $end
$var wire 1 Q- wB $end

$scope module notA $end
$var wire 1 P- out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 O- out $end
$var wire 1 7- in1 $end
$var wire 1 P- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 Q- out $end
$var wire 1 8- in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 = out $end
$var wire 1 O- in1 $end
$var wire 1 Q- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[2] $end
$var wire 1 > out $end
$var wire 1 { inA $end
$var wire 1 -! inB $end
$var wire 1 =! inC $end
$var wire 1 M! inD $end
$var wire 1 ]! inE $end
$var wire 1 m! inF $end
$var wire 1 }! inG $end
$var wire 1 /" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 R- outA $end
$var wire 1 S- outB $end

$scope module muxA $end
$var wire 1 R- out $end
$var wire 1 { inA $end
$var wire 1 -! inB $end
$var wire 1 =! inC $end
$var wire 1 M! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 T- w1 $end
$var wire 1 U- w2 $end

$scope module mux_ab $end
$var wire 1 T- out $end
$var wire 1 { inA $end
$var wire 1 -! inB $end
$var wire 1 Q s $end
$var wire 1 V- wA $end
$var wire 1 W- wnotS $end
$var wire 1 X- wB $end

$scope module notA $end
$var wire 1 W- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 V- out $end
$var wire 1 { in1 $end
$var wire 1 W- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 X- out $end
$var wire 1 -! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 T- out $end
$var wire 1 V- in1 $end
$var wire 1 X- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 U- out $end
$var wire 1 =! inA $end
$var wire 1 M! inB $end
$var wire 1 Q s $end
$var wire 1 Y- wA $end
$var wire 1 Z- wnotS $end
$var wire 1 [- wB $end

$scope module notA $end
$var wire 1 Z- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 Y- out $end
$var wire 1 =! in1 $end
$var wire 1 Z- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 [- out $end
$var wire 1 M! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 U- out $end
$var wire 1 Y- in1 $end
$var wire 1 [- in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 R- out $end
$var wire 1 T- inA $end
$var wire 1 U- inB $end
$var wire 1 P s $end
$var wire 1 \- wA $end
$var wire 1 ]- wnotS $end
$var wire 1 ^- wB $end

$scope module notA $end
$var wire 1 ]- out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 \- out $end
$var wire 1 T- in1 $end
$var wire 1 ]- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ^- out $end
$var wire 1 U- in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 R- out $end
$var wire 1 \- in1 $end
$var wire 1 ^- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 S- out $end
$var wire 1 ]! inA $end
$var wire 1 m! inB $end
$var wire 1 }! inC $end
$var wire 1 /" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 _- w1 $end
$var wire 1 `- w2 $end

$scope module mux_ab $end
$var wire 1 _- out $end
$var wire 1 ]! inA $end
$var wire 1 m! inB $end
$var wire 1 Q s $end
$var wire 1 a- wA $end
$var wire 1 b- wnotS $end
$var wire 1 c- wB $end

$scope module notA $end
$var wire 1 b- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 a- out $end
$var wire 1 ]! in1 $end
$var wire 1 b- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 c- out $end
$var wire 1 m! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 _- out $end
$var wire 1 a- in1 $end
$var wire 1 c- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 `- out $end
$var wire 1 }! inA $end
$var wire 1 /" inB $end
$var wire 1 Q s $end
$var wire 1 d- wA $end
$var wire 1 e- wnotS $end
$var wire 1 f- wB $end

$scope module notA $end
$var wire 1 e- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 d- out $end
$var wire 1 }! in1 $end
$var wire 1 e- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 f- out $end
$var wire 1 /" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 `- out $end
$var wire 1 d- in1 $end
$var wire 1 f- in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 S- out $end
$var wire 1 _- inA $end
$var wire 1 `- inB $end
$var wire 1 P s $end
$var wire 1 g- wA $end
$var wire 1 h- wnotS $end
$var wire 1 i- wB $end

$scope module notA $end
$var wire 1 h- out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 g- out $end
$var wire 1 _- in1 $end
$var wire 1 h- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 i- out $end
$var wire 1 `- in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 S- out $end
$var wire 1 g- in1 $end
$var wire 1 i- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 > out $end
$var wire 1 R- inA $end
$var wire 1 S- inB $end
$var wire 1 O s $end
$var wire 1 j- wA $end
$var wire 1 k- wnotS $end
$var wire 1 l- wB $end

$scope module notA $end
$var wire 1 k- out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 j- out $end
$var wire 1 R- in1 $end
$var wire 1 k- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 l- out $end
$var wire 1 S- in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 > out $end
$var wire 1 j- in1 $end
$var wire 1 l- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[1] $end
$var wire 1 ? out $end
$var wire 1 | inA $end
$var wire 1 .! inB $end
$var wire 1 >! inC $end
$var wire 1 N! inD $end
$var wire 1 ^! inE $end
$var wire 1 n! inF $end
$var wire 1 ~! inG $end
$var wire 1 0" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 m- outA $end
$var wire 1 n- outB $end

$scope module muxA $end
$var wire 1 m- out $end
$var wire 1 | inA $end
$var wire 1 .! inB $end
$var wire 1 >! inC $end
$var wire 1 N! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 o- w1 $end
$var wire 1 p- w2 $end

$scope module mux_ab $end
$var wire 1 o- out $end
$var wire 1 | inA $end
$var wire 1 .! inB $end
$var wire 1 Q s $end
$var wire 1 q- wA $end
$var wire 1 r- wnotS $end
$var wire 1 s- wB $end

$scope module notA $end
$var wire 1 r- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 q- out $end
$var wire 1 | in1 $end
$var wire 1 r- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 s- out $end
$var wire 1 .! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 o- out $end
$var wire 1 q- in1 $end
$var wire 1 s- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 p- out $end
$var wire 1 >! inA $end
$var wire 1 N! inB $end
$var wire 1 Q s $end
$var wire 1 t- wA $end
$var wire 1 u- wnotS $end
$var wire 1 v- wB $end

$scope module notA $end
$var wire 1 u- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 t- out $end
$var wire 1 >! in1 $end
$var wire 1 u- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 v- out $end
$var wire 1 N! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 p- out $end
$var wire 1 t- in1 $end
$var wire 1 v- in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 m- out $end
$var wire 1 o- inA $end
$var wire 1 p- inB $end
$var wire 1 P s $end
$var wire 1 w- wA $end
$var wire 1 x- wnotS $end
$var wire 1 y- wB $end

$scope module notA $end
$var wire 1 x- out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 w- out $end
$var wire 1 o- in1 $end
$var wire 1 x- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 y- out $end
$var wire 1 p- in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 m- out $end
$var wire 1 w- in1 $end
$var wire 1 y- in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 n- out $end
$var wire 1 ^! inA $end
$var wire 1 n! inB $end
$var wire 1 ~! inC $end
$var wire 1 0" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 z- w1 $end
$var wire 1 {- w2 $end

$scope module mux_ab $end
$var wire 1 z- out $end
$var wire 1 ^! inA $end
$var wire 1 n! inB $end
$var wire 1 Q s $end
$var wire 1 |- wA $end
$var wire 1 }- wnotS $end
$var wire 1 ~- wB $end

$scope module notA $end
$var wire 1 }- out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 |- out $end
$var wire 1 ^! in1 $end
$var wire 1 }- in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ~- out $end
$var wire 1 n! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 z- out $end
$var wire 1 |- in1 $end
$var wire 1 ~- in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 {- out $end
$var wire 1 ~! inA $end
$var wire 1 0" inB $end
$var wire 1 Q s $end
$var wire 1 !. wA $end
$var wire 1 ". wnotS $end
$var wire 1 #. wB $end

$scope module notA $end
$var wire 1 ". out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 !. out $end
$var wire 1 ~! in1 $end
$var wire 1 ". in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 #. out $end
$var wire 1 0" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 {- out $end
$var wire 1 !. in1 $end
$var wire 1 #. in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 n- out $end
$var wire 1 z- inA $end
$var wire 1 {- inB $end
$var wire 1 P s $end
$var wire 1 $. wA $end
$var wire 1 %. wnotS $end
$var wire 1 &. wB $end

$scope module notA $end
$var wire 1 %. out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 $. out $end
$var wire 1 z- in1 $end
$var wire 1 %. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 &. out $end
$var wire 1 {- in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 n- out $end
$var wire 1 $. in1 $end
$var wire 1 &. in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 ? out $end
$var wire 1 m- inA $end
$var wire 1 n- inB $end
$var wire 1 O s $end
$var wire 1 '. wA $end
$var wire 1 (. wnotS $end
$var wire 1 ). wB $end

$scope module notA $end
$var wire 1 (. out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 '. out $end
$var wire 1 m- in1 $end
$var wire 1 (. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ). out $end
$var wire 1 n- in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 ? out $end
$var wire 1 '. in1 $end
$var wire 1 ). in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module mux[0] $end
$var wire 1 @ out $end
$var wire 1 } inA $end
$var wire 1 /! inB $end
$var wire 1 ?! inC $end
$var wire 1 O! inD $end
$var wire 1 _! inE $end
$var wire 1 o! inF $end
$var wire 1 !" inG $end
$var wire 1 1" inH $end
$var wire 1 O s [2] $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 *. outA $end
$var wire 1 +. outB $end

$scope module muxA $end
$var wire 1 *. out $end
$var wire 1 } inA $end
$var wire 1 /! inB $end
$var wire 1 ?! inC $end
$var wire 1 O! inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 ,. w1 $end
$var wire 1 -. w2 $end

$scope module mux_ab $end
$var wire 1 ,. out $end
$var wire 1 } inA $end
$var wire 1 /! inB $end
$var wire 1 Q s $end
$var wire 1 .. wA $end
$var wire 1 /. wnotS $end
$var wire 1 0. wB $end

$scope module notA $end
$var wire 1 /. out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 .. out $end
$var wire 1 } in1 $end
$var wire 1 /. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 0. out $end
$var wire 1 /! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 ,. out $end
$var wire 1 .. in1 $end
$var wire 1 0. in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 -. out $end
$var wire 1 ?! inA $end
$var wire 1 O! inB $end
$var wire 1 Q s $end
$var wire 1 1. wA $end
$var wire 1 2. wnotS $end
$var wire 1 3. wB $end

$scope module notA $end
$var wire 1 2. out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 1. out $end
$var wire 1 ?! in1 $end
$var wire 1 2. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 3. out $end
$var wire 1 O! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 -. out $end
$var wire 1 1. in1 $end
$var wire 1 3. in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 *. out $end
$var wire 1 ,. inA $end
$var wire 1 -. inB $end
$var wire 1 P s $end
$var wire 1 4. wA $end
$var wire 1 5. wnotS $end
$var wire 1 6. wB $end

$scope module notA $end
$var wire 1 5. out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 4. out $end
$var wire 1 ,. in1 $end
$var wire 1 5. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 6. out $end
$var wire 1 -. in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 *. out $end
$var wire 1 4. in1 $end
$var wire 1 6. in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxB $end
$var wire 1 +. out $end
$var wire 1 _! inA $end
$var wire 1 o! inB $end
$var wire 1 !" inC $end
$var wire 1 1" inD $end
$var wire 1 P s [1] $end
$var wire 1 Q s [0] $end
$var wire 1 7. w1 $end
$var wire 1 8. w2 $end

$scope module mux_ab $end
$var wire 1 7. out $end
$var wire 1 _! inA $end
$var wire 1 o! inB $end
$var wire 1 Q s $end
$var wire 1 9. wA $end
$var wire 1 :. wnotS $end
$var wire 1 ;. wB $end

$scope module notA $end
$var wire 1 :. out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 9. out $end
$var wire 1 _! in1 $end
$var wire 1 :. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 ;. out $end
$var wire 1 o! in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 7. out $end
$var wire 1 9. in1 $end
$var wire 1 ;. in2 $end
$upscope $end
$upscope $end

$scope module mux_cd $end
$var wire 1 8. out $end
$var wire 1 !" inA $end
$var wire 1 1" inB $end
$var wire 1 Q s $end
$var wire 1 <. wA $end
$var wire 1 =. wnotS $end
$var wire 1 >. wB $end

$scope module notA $end
$var wire 1 =. out $end
$var wire 1 Q in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 <. out $end
$var wire 1 !" in1 $end
$var wire 1 =. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 >. out $end
$var wire 1 1" in1 $end
$var wire 1 Q in2 $end
$upscope $end

$scope module res $end
$var wire 1 8. out $end
$var wire 1 <. in1 $end
$var wire 1 >. in2 $end
$upscope $end
$upscope $end

$scope module mux_final $end
$var wire 1 +. out $end
$var wire 1 7. inA $end
$var wire 1 8. inB $end
$var wire 1 P s $end
$var wire 1 ?. wA $end
$var wire 1 @. wnotS $end
$var wire 1 A. wB $end

$scope module notA $end
$var wire 1 @. out $end
$var wire 1 P in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 ?. out $end
$var wire 1 7. in1 $end
$var wire 1 @. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 A. out $end
$var wire 1 8. in1 $end
$var wire 1 P in2 $end
$upscope $end

$scope module res $end
$var wire 1 +. out $end
$var wire 1 ?. in1 $end
$var wire 1 A. in2 $end
$upscope $end
$upscope $end
$upscope $end

$scope module muxC $end
$var wire 1 @ out $end
$var wire 1 *. inA $end
$var wire 1 +. inB $end
$var wire 1 O s $end
$var wire 1 B. wA $end
$var wire 1 C. wnotS $end
$var wire 1 D. wB $end

$scope module notA $end
$var wire 1 C. out $end
$var wire 1 O in1 $end
$upscope $end

$scope module nandA $end
$var wire 1 B. out $end
$var wire 1 *. in1 $end
$var wire 1 C. in2 $end
$upscope $end

$scope module nandB $end
$var wire 1 D. out $end
$var wire 1 +. in1 $end
$var wire 1 O in2 $end
$upscope $end

$scope module res $end
$var wire 1 @ out $end
$var wire 1 B. in1 $end
$var wire 1 D. in2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 J
b0 K
b100 A
b1 B
1C
b1101011000001001 D
b11 E
0I
1i
1j
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
00%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
0#%
0"%
0!%
b1000 l
b10000 m
b10000 ;"
b10000 ]"
b10000 !#
b10000 C#
b10000 e#
b10000 )$
b10000 K$
b10000 m$
b10000 1%
b10000 j)
b0 F
b1 k
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
1G
1H
1f
1g
xh
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xo!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
09"
08"
07"
16"
05"
04"
03"
02"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
1T#
0S#
0R#
1Q#
0P#
0O#
0N#
0M#
0L#
1K#
1J#
0I#
1H#
0G#
1F#
1E#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xO)
xP)
xQ)
xR)
xS)
1T)
1U)
xV)
1W)
1X)
xY)
1Z)
1[)
x\)
x])
x^)
1_)
1`)
xa)
1b)
1c)
xd)
1e)
1f)
1g)
0h)
xi)
x4)
x5)
x6)
x7)
x8)
19)
1:)
x;)
1<)
1=)
x>)
1?)
1@)
xA)
xB)
xC)
1D)
1E)
xF)
1G)
1H)
xI)
1J)
1K)
1L)
0M)
xN)
xw(
xx(
xy(
xz(
x{(
1|(
1}(
x~(
1!)
1")
x#)
1$)
1%)
x&)
x')
x()
1))
1*)
x+)
1,)
1-)
x.)
1/)
10)
11)
02)
x3)
x\(
x](
x^(
x_(
x`(
1a(
1b(
xc(
1d(
1e(
xf(
1g(
1h(
xi(
xj(
xk(
1l(
1m(
xn(
1o(
1p(
xq(
1r(
1s(
1t(
0u(
xv(
xA(
xB(
xC(
xD(
xE(
1F(
1G(
xH(
1I(
1J(
xK(
1L(
1M(
xN(
xO(
xP(
1Q(
1R(
xS(
1T(
1U(
xV(
1W(
1X(
1Y(
0Z(
x[(
x&(
x'(
x((
x)(
x*(
1+(
1,(
x-(
1.(
1/(
x0(
11(
12(
x3(
x4(
x5(
16(
17(
x8(
19(
1:(
x;(
1<(
1=(
1>(
0?(
x@(
xi'
xj'
xk'
xl'
xm'
1n'
1o'
xp'
1q'
1r'
xs'
1t'
1u'
xv'
xw'
xx'
1y'
1z'
x{'
1|'
1}'
x~'
1!(
1"(
1#(
0$(
x%(
xN'
xO'
xP'
xQ'
xR'
1S'
1T'
xU'
1V'
1W'
xX'
1Y'
1Z'
x['
x\'
x]'
1^'
1_'
x`'
1a'
1b'
xc'
1d'
1e'
1f'
0g'
xh'
x3'
x4'
x5'
x6'
x7'
18'
19'
x:'
1;'
1<'
x='
1>'
1?'
x@'
xA'
xB'
1C'
1D'
xE'
1F'
1G'
xH'
1I'
1J'
1K'
0L'
xM'
xv&
xw&
xx&
xy&
xz&
1{&
1|&
x}&
1~&
1!'
x"'
1#'
1$'
x%'
x&'
x''
1('
1)'
x*'
1+'
1,'
x-'
1.'
1/'
10'
01'
x2'
x[&
x\&
x]&
x^&
x_&
1`&
1a&
xb&
1c&
1d&
xe&
1f&
1g&
xh&
xi&
xj&
1k&
1l&
xm&
1n&
1o&
xp&
1q&
1r&
1s&
0t&
xu&
x@&
xA&
xB&
xC&
xD&
1E&
1F&
xG&
1H&
1I&
xJ&
1K&
1L&
xM&
xN&
xO&
1P&
1Q&
xR&
1S&
1T&
xU&
1V&
1W&
1X&
0Y&
xZ&
x%&
x&&
x'&
x(&
x)&
1*&
1+&
x,&
1-&
1.&
x/&
10&
11&
x2&
x3&
x4&
15&
16&
x7&
18&
19&
x:&
1;&
1<&
1=&
0>&
x?&
xh%
xi%
xj%
xk%
xl%
1m%
1n%
xo%
1p%
1q%
xr%
1s%
1t%
xu%
xv%
xw%
1x%
1y%
xz%
1{%
1|%
x}%
1~%
1!&
1"&
0#&
x$&
xM%
xN%
xO%
xP%
xQ%
1R%
1S%
xT%
1U%
1V%
xW%
1X%
1Y%
xZ%
x[%
x\%
1]%
1^%
x_%
1`%
1a%
xb%
1c%
1d%
1e%
0f%
xg%
x2%
x3%
x4%
x5%
x6%
17%
18%
x9%
1:%
1;%
x<%
1=%
1>%
x?%
x@%
xA%
1B%
1C%
xD%
1E%
1F%
xG%
1H%
1I%
1J%
0K%
xL%
x*.
x+.
x,.
x-.
1..
0/.
x0.
11.
02.
x3.
x4.
15.
16.
x7.
x8.
19.
0:.
x;.
1<.
0=.
x>.
x?.
1@.
1A.
xB.
1C.
1D.
xm-
xn-
xo-
xp-
1q-
0r-
xs-
1t-
0u-
xv-
xw-
1x-
1y-
xz-
x{-
1|-
0}-
x~-
1!.
0".
x#.
x$.
1%.
1&.
x'.
1(.
1).
xR-
xS-
xT-
xU-
1V-
0W-
xX-
1Y-
0Z-
x[-
x\-
1]-
1^-
x_-
x`-
1a-
0b-
xc-
1d-
0e-
xf-
xg-
1h-
1i-
xj-
1k-
1l-
x7-
x8-
x9-
x:-
1;-
0<-
x=-
1>-
0?-
x@-
xA-
1B-
1C-
xD-
xE-
1F-
0G-
xH-
1I-
0J-
xK-
xL-
1M-
1N-
xO-
1P-
1Q-
xz,
x{,
x|,
x},
1~,
0!-
x"-
1#-
0$-
x%-
x&-
1'-
1(-
x)-
x*-
1+-
0,-
x--
1.-
0/-
x0-
x1-
12-
13-
x4-
15-
16-
x_,
x`,
xa,
xb,
1c,
0d,
xe,
1f,
0g,
xh,
xi,
1j,
1k,
xl,
xm,
1n,
0o,
xp,
1q,
0r,
xs,
xt,
1u,
1v,
xw,
1x,
1y,
xD,
xE,
xF,
xG,
1H,
0I,
xJ,
1K,
0L,
xM,
xN,
1O,
1P,
xQ,
xR,
1S,
0T,
xU,
1V,
0W,
xX,
xY,
1Z,
1[,
x\,
1],
1^,
x),
x*,
x+,
x,,
1-,
0.,
x/,
10,
01,
x2,
x3,
14,
15,
x6,
x7,
18,
09,
x:,
1;,
0<,
x=,
x>,
1?,
1@,
xA,
1B,
1C,
xl+
xm+
xn+
xo+
1p+
0q+
xr+
1s+
0t+
xu+
xv+
1w+
1x+
xy+
xz+
1{+
0|+
x}+
1~+
0!,
x",
x#,
1$,
1%,
x&,
1',
1(,
xQ+
xR+
xS+
xT+
1U+
0V+
xW+
1X+
0Y+
xZ+
x[+
1\+
1]+
x^+
x_+
1`+
0a+
xb+
1c+
0d+
xe+
xf+
1g+
1h+
xi+
1j+
1k+
x6+
x7+
x8+
x9+
1:+
0;+
x<+
1=+
0>+
x?+
x@+
1A+
1B+
xC+
xD+
1E+
0F+
xG+
1H+
0I+
xJ+
xK+
1L+
1M+
xN+
1O+
1P+
xy*
xz*
x{*
x|*
1}*
0~*
x!+
1"+
0#+
x$+
x%+
1&+
1'+
x(+
x)+
1*+
0++
x,+
1-+
0.+
x/+
x0+
11+
12+
x3+
14+
15+
x^*
x_*
x`*
xa*
1b*
0c*
xd*
1e*
0f*
xg*
xh*
1i*
1j*
xk*
xl*
1m*
0n*
xo*
1p*
0q*
xr*
xs*
1t*
1u*
xv*
1w*
1x*
xC*
xD*
xE*
xF*
1G*
0H*
xI*
1J*
0K*
xL*
xM*
1N*
1O*
xP*
xQ*
1R*
0S*
xT*
1U*
0V*
xW*
xX*
1Y*
1Z*
x[*
1\*
1]*
x(*
x)*
x**
x+*
1,*
0-*
x.*
1/*
00*
x1*
x2*
13*
14*
x5*
x6*
17*
08*
x9*
1:*
0;*
x<*
x=*
1>*
1?*
x@*
1A*
1B*
xk)
xl)
xm)
xn)
1o)
0p)
xq)
1r)
0s)
xt)
xu)
1v)
1w)
xx)
xy)
1z)
0{)
x|)
1})
0~)
x!*
x"*
1#*
1$*
x%*
1&*
1'*
1e
1d
0c
0b
1a
0`
0_
0^
0]
0\
1[
1Z
0Y
1X
0W
1V
1U
1T
1S
0R
1Q
0P
0O
0N
0M
1L
0n$
0L$
0*$
0f#
1D#
0"#
0^"
0<"
1:"
$end
#1
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0."
0/"
00"
01"
0p!
0q!
0r!
0s!
0t!
0u!
0v!
0w!
0x!
0y!
0z!
0{!
0|!
0}!
0~!
0!"
0`!
0a!
0b!
0c!
0d!
0e!
0f!
0g!
0h!
0i!
0j!
0k!
0l!
0m!
0n!
0o!
0P!
0Q!
0R!
0S!
0T!
0U!
0V!
0W!
0X!
0Y!
0Z!
0[!
0\!
0]!
0^!
0_!
0@!
0A!
0B!
0C!
0D!
0E!
0F!
0G!
0H!
0I!
0J!
0K!
0L!
0M!
0N!
0O!
00!
01!
02!
03!
04!
05!
06!
07!
08!
09!
0:!
0;!
0<!
0=!
0>!
0?!
0~
0!!
0"!
0#!
0$!
0%!
0&!
0'!
0(!
0)!
0*!
0+!
0,!
0-!
0.!
0/!
0n
0o
0p
0q
0r
0s
0t
0u
0v
0w
0x
0y
0z
0{
0|
0}
1S)
18)
1{(
1`(
1E(
1*(
1m'
1R'
17'
1z&
1_&
1D&
1)&
1l%
1Q%
16%
10.
1s-
1X-
1=-
1"-
1e,
1J,
1/,
1r+
1W+
1<+
1!+
1d*
1I*
1.*
1q)
1V)
1;)
1~(
1c(
1H(
1-(
1p'
1U'
1:'
1}&
1b&
1G&
1,&
1o%
1T%
19%
13.
1v-
1[-
1@-
1%-
1h,
1M,
12,
1u+
1Z+
1?+
1$+
1g*
1L*
11*
1t)
1^)
1C)
1()
1k(
1P(
15(
1x'
1]'
1B'
1''
1j&
1O&
14&
1w%
1\%
1A%
1;.
1~-
1c-
1H-
1--
1p,
1U,
1:,
1}+
1b+
1G+
1,+
1o*
1T*
19*
1|)
1a)
1F)
1+)
1n(
1S(
18(
1{'
1`'
1E'
1*'
1m&
1R&
17&
1z%
1_%
1D%
1>.
1#.
1f-
1K-
10-
1s,
1X,
1=,
1",
1e+
1J+
1/+
1r*
1W*
1<*
1!*
0y)
06*
0Q*
0l*
0)+
0D+
0_+
0z+
07,
0R,
0m,
0*-
0E-
0`-
0{-
08.
0@%
0[%
0v%
03&
0N&
0i&
0&'
0A'
0\'
0w'
04(
0O(
0j(
0')
0B)
0])
0x)
05*
0P*
0k*
0(+
0C+
0^+
0y+
06,
0Q,
0l,
0)-
0D-
0_-
0z-
07.
0?%
0Z%
0u%
02&
0M&
0h&
0%'
0@'
0['
0v'
03(
0N(
0i(
0&)
0A)
0\)
0n)
0+*
0F*
0a*
0|*
09+
0T+
0o+
0,,
0G,
0b,
0},
0:-
0U-
0p-
0-.
05%
0P%
0k%
0(&
0C&
0^&
0y&
06'
0Q'
0l'
0)(
0D(
0_(
0z(
07)
0R)
0m)
0**
0E*
0`*
0{*
08+
0S+
0n+
0+,
0F,
0a,
0|,
09-
0T-
0o-
0,.
04%
0O%
0j%
0'&
0B&
0]&
0x&
05'
0P'
0k'
0((
0C(
0^(
0y(
06)
0Q)
1Y)
1>)
1#)
1f(
1K(
10(
1s'
1X'
1='
1"'
1e&
1J&
1/&
1r%
1W%
1<%
14.
1w-
1\-
1A-
1&-
1i,
1N,
13,
1v+
1[+
1@+
1%+
1h*
1M*
12*
1u)
1d)
1I)
1.)
1q(
1V(
1;(
1~'
1c'
1H'
1-'
1p&
1U&
1:&
1}%
1b%
1G%
1?.
1$.
1g-
1L-
11-
1t,
1Y,
1>,
1#,
1f+
1K+
10+
1s*
1X*
1=*
1"*
0l)
0)*
0D*
0_*
0z*
07+
0R+
0m+
0*,
0E,
0`,
0{,
08-
0S-
0n-
0+.
03%
0N%
0i%
0&&
0A&
0\&
0w&
04'
0O'
0j'
0'(
0B(
0](
0x(
05)
0P)
0k)
0(*
0C*
0^*
0y*
06+
0Q+
0l+
0),
0D,
0_,
0z,
07-
0R-
0m-
0*.
02%
0M%
0h%
0%&
0@&
0[&
0v&
03'
0N'
0i'
0&(
0A(
0\(
0w(
04)
0O)
1B.
1'.
1j-
1O-
14-
1w,
1\,
1A,
1&,
1i+
1N+
13+
1v*
1[*
1@*
1%*
1i)
1N)
13)
1v(
1[(
1@(
1%(
1h'
1M'
12'
1u&
1Z&
1?&
1$&
1g%
1L%
0!
0"
0#
0$
0%
0&
0'
0(
0)
0*
0+
0,
0-
0.
0/
00
01
02
03
04
05
06
07
08
09
0:
0;
0<
0=
0>
0?
0@
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
0M$
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
#10
b1 F
#50
0i
0G
0f
#100
1i
1G
1f
b101 A
b101 B
b101001000010010 D
b1 E
b10 k
0S
0d
1c
0a
1`
0Z
0U
1O
1N
0T)
0W)
0_)
0b)
09)
0<)
0D)
0G)
0|(
0!)
0))
0,)
0a(
0d(
0l(
0o(
0F(
0I(
0Q(
0T(
0+(
0.(
06(
09(
0n'
0q'
0y'
0|'
0S'
0V'
0^'
0a'
08'
0;'
0C'
0F'
0{&
0~&
0('
0+'
0`&
0c&
0k&
0n&
0E&
0H&
0P&
0S&
0*&
0-&
05&
08&
0m%
0p%
0x%
0{%
0R%
0U%
0]%
0`%
07%
0:%
0B%
0E%
0C.
0(.
0k-
0P-
05-
0x,
0],
0B,
0',
0j+
0O+
04+
0w*
0\*
0A*
0&*
18"
06"
0D#
1^"
1m"
1j"
1e"
1b"
1`"
0T#
0Q#
0K#
0J#
0H#
0F#
0E#
#110
b10 F
#150
0i
0G
0f
#200
1i
1G
1f
b110 A
b101011111101101 D
b100 E
b11 k
0T
1R
1d
0c
1b
1a
0`
1_
1^
1]
1\
1Z
0N
1M
0Z)
0e)
0?)
0J)
0$)
0/)
0g(
0r(
0L(
0W(
01(
0<(
0t'
0!(
0Y'
0d'
0>'
0I'
0#'
0.'
0f&
0q&
0K&
0V&
00&
0;&
0s%
0~%
0X%
0c%
0=%
0H%
1T)
1W)
1_)
1b)
19)
1<)
1D)
1G)
1|(
1!)
1))
1,)
1a(
1d(
1l(
1o(
1F(
1I(
1Q(
1T(
1+(
1.(
16(
19(
1n'
1q'
1y'
1|'
1S'
1V'
1^'
1a'
18'
1;'
1C'
1F'
1{&
1~&
1('
1+'
1`&
1c&
1k&
1n&
1E&
1H&
1P&
1S&
1*&
1-&
15&
18&
1m%
1p%
1x%
1{%
1R%
1U%
1]%
1`%
17%
1:%
1B%
1E%
0:"
15"
08"
0^"
1f#
0m"
0j"
0e"
0b"
0`"
1v#
1t#
1s#
1q#
1p#
1o#
1n#
1m#
1l#
1j#
1h#
#201
0j
0H
0g
#210
b11 F
#250
0i
0G
0f
#300
1i
1G
1f
1($
1&$
1%$
1#$
1"$
1!$
1~#
1}#
1|#
1z#
1x#
b1101001010101010 D
b101 E
b100 k
1T
0d
1c
0b
0^
0\
0Z
1U
05"
14"
1*$
0f#
0v#
0t#
0s#
0q#
0p#
0o#
0n#
0m#
0l#
0j#
0h#
19$
17$
15$
13$
11$
1.$
1,$
1+$
#301
1Q!
1S!
1U!
1V!
1W!
1X!
1Y!
1Z!
1\!
1]!
1_!
0^)
0()
0k(
05(
0x'
0]'
0B'
0''
0j&
04&
0\%
1Z%
12&
1h&
1%'
1@'
1['
1v'
13(
1i(
1&)
1\)
1v#
1t#
1s#
1q#
1p#
1o#
1n#
1m#
1l#
1j#
1h#
#310
b100 F
#350
0i
0G
0f
#400
1i
1G
1f
1I$
1G$
1E$
1C$
1A$
1>$
1<$
1;$
b10 A
b111 B
b110100111110010 D
b110 E
0C
b101 k
0T
1S
0a
1`
1^
1\
0[
1Y
0X
1W
0U
1P
0L
0e
0*$
1h)
1M)
12)
1u(
1Z(
1?(
1$(
1g'
1L'
11'
1t&
1Y&
1>&
1#&
1f%
1K%
05.
0@.
0x-
0%.
0]-
0h-
0B-
0M-
0'-
02-
0j,
0u,
0O,
0Z,
04,
0?,
0w+
0$,
0\+
0g+
0A+
0L+
0&+
01+
0i*
0t*
0N*
0Y*
03*
0>*
0v)
0#*
13"
04"
09$
07$
05$
03$
01$
0.$
0,$
0+$
#401
1`!
1a!
1c!
1f!
1h!
1j!
1l!
1n!
0~-
0H-
0p,
0:,
0b+
0o*
09*
0|)
1x)
15*
1k*
1^+
16,
1l,
1D-
1z-
19$
17$
15$
13$
11$
1.$
1,$
1+$
#410
b101 F
#450
0i
0G
0f
#500
1i
1G
1f
b101 A
b100 B
b10100010111101 D
b101 E
1C
b1101001010101010 J
b101011111101101 K
b110 k
1T
0S
1d
0c
1b
1a
0^
0\
0V
0Q
0P
1N
0M
1L
1e
1L$
0h)
0M)
02)
0u(
0Z(
0?(
0$(
0g'
0L'
01'
0t&
0Y&
0>&
0#&
0f%
0K%
1Z)
1e)
1?)
1J)
1$)
1/)
1g(
1r(
1L(
1W(
11(
1<(
1t'
1!(
1Y'
1d'
1>'
1I'
1#'
1.'
1f&
1q&
1K&
1V&
10&
1;&
1s%
1~%
1X%
1c%
1=%
1H%
0T)
0W)
0_)
0b)
09)
0<)
0D)
0E)
0G)
0|(
0!)
0))
0,)
0a(
0d(
0l(
0m(
0o(
0F(
0I(
0Q(
0T(
0+(
0.(
06(
07(
09(
0n'
0q'
0y'
0|'
0S'
0V'
0^'
0_'
0a'
08'
0;'
0C'
0F'
0{&
0~&
0('
0)'
0+'
0`&
0c&
0k&
0n&
0E&
0H&
0P&
0S&
0*&
0-&
05&
06&
08&
0m%
0p%
0x%
0{%
0R%
0U%
0]%
0^%
0`%
07%
0:%
0B%
0C%
0E%
15.
1@.
1x-
1%.
1]-
1h-
1B-
1M-
1'-
12-
1j,
1u,
1O,
1Z,
14,
1?,
1w+
1$,
1\+
1g+
1A+
1L+
1&+
11+
1i*
1t*
1N*
1Y*
13*
1>*
1v)
1#*
1/.
12.
1:.
1=.
1r-
1u-
1}-
1~-
1".
1W-
1Z-
1b-
1e-
1<-
1?-
1G-
1H-
1J-
1!-
1$-
1,-
1/-
1d,
1g,
1o,
1p,
1r,
1I,
1L,
1T,
1W,
1.,
11,
19,
1:,
1<,
1q+
1t+
1|+
1!,
1V+
1Y+
1a+
1b+
1d+
1;+
1>+
1F+
1I+
1~*
1#+
1++
1.+
1c*
1f*
1n*
1o*
1q*
1H*
1K*
1S*
1V*
1-*
10*
18*
19*
1;*
1p)
1s)
1{)
1|)
1~)
14"
03"
0L$
1*$
0x)
05*
07*
0k*
0m*
0E+
0^+
0`+
0{+
06,
08,
0S,
0l,
0n,
0D-
0F-
0a-
0z-
09.
1?%
1\%
14&
1j&
1''
1B'
1]'
1x'
15(
1k(
1()
1A)
1^)
0b%
0:&
0p&
0-'
0H'
0c'
0~'
0;(
0q(
0.)
0d)
1P)
1x(
1](
1'(
1j'
1O'
14'
1w&
1\&
1&&
1N%
0\)
0I)
0&)
0v'
0@'
0h&
0G%
17.
1_-
1D-
1l,
1Q,
16,
1y+
1^+
1C+
1k*
15*
0=*
0s*
0K+
0f+
0#,
0>,
0Y,
0t,
0L-
0g-
0?.
13%
1p&
1H'
1~'
1.)
15)
1d)
0g%
0?&
0u&
02'
0M'
0h'
0%(
0@(
0v(
03)
0i)
10
1.
1-
1+
1*
1)
1(
1'
1&
1$
1"
0P)
0N)
0x(
0j'
04'
0\&
0L%
1+.
1S-
18-
1`,
1E,
1*,
1m+
1R+
17+
1_*
1)*
0B*
0x*
0P+
0k+
0(,
0C,
0^,
0y,
0Q-
0l-
0D.
1!
1u&
1M'
1%(
13)
1/
1i)
00
0.
0*
0(
0&
1@
1>
1=
1;
1:
19
18
17
16
14
12
1:$
09$
18$
16$
01$
1/$
0.$
1-$
0,$
0+$
#510
b110 F
#550
0i
0G
0f
#600
1i
1G
1f
1J$
0I$
1H$
1F$
0A$
1?$
0>$
1=$
0<$
0;$
b11 A
b10 B
b10001010000000 D
b0 E
0C
b0 J
b0 K
b111 k
0T
0R
0d
0b
0a
0`
0_
1[
0Y
1P
0O
1M
0L
0e
0*$
1h)
1M)
1N)
12)
1u(
1v(
1Z(
1?(
1@(
1$(
1g'
1h'
1L'
11'
12'
1t&
1Y&
1>&
1?&
1#&
1f%
1g%
1K%
1L%
0Z)
0e)
0?)
0J)
0$)
0/)
0g(
0r(
0L(
0W(
01(
0<(
0t'
0!(
0Y'
0d'
0>'
0I'
0#'
0.'
0f&
0q&
0K&
0V&
00&
0;&
0s%
0~%
0X%
0c%
0=%
0H%
1C.
1D.
1(.
1k-
1l-
1P-
1Q-
15-
1x,
1y,
1],
1^,
1B,
1C,
1',
1(,
1j+
1k+
1O+
1P+
14+
1w*
1x*
1\*
1A*
1B*
1&*
05.
0@.
0x-
0%.
0]-
0h-
0B-
0M-
0'-
02-
0j,
0u,
0O,
0Z,
04,
0?,
0w+
0$,
0\+
0g+
0A+
0L+
0&+
01+
0i*
0t*
0N*
0Y*
03*
0>*
0v)
0#*
1:"
04"
19"
1=*
1s*
1K+
1f+
1#,
1>,
1Y,
1t,
1L-
1g-
1?.
02
04
06
07
08
09
0:
0;
0=
0>
0@
1G%
1b%
1:&
1-'
1c'
1;(
1q(
1I)
0!
0"
0$
0'
0)
0+
0-
0/
05)
0](
0'(
0O'
0w&
0&&
0N%
03%
0+.
0S-
08-
0`,
0E,
0*,
0m+
0R+
07+
0_*
0)*
0:$
19$
08$
06$
11$
0/$
1.$
0-$
1,$
1+$
#601
0`!
0a!
1b!
0c!
1d!
0f!
1k!
1m!
0n!
1o!
0`)
1E)
0*)
0R(
1)'
0Q&
16&
0y%
1^%
1C%
0?%
0Z%
1u%
02&
1M&
0%'
1N(
1&)
0A)
1\)
1:$
09$
18$
16$
01$
1/$
0.$
1-$
0,$
0+$
#610
b111 F
#650
0i
0G
0f
#700
1i
1G
1f
b101 A
b110 B
b1011100000010011 D
b101 E
1C
b10100010111101 J
b1000 k
1T
1R
1d
1c
1`
0]
0[
1Y
1X
1U
1O
0M
1L
1e
1<"
0h)
0M)
02)
0u(
0Z(
0?(
0$(
0g'
0L'
01'
0t&
0Y&
0>&
0#&
0f%
0K%
1Z)
1e)
1?)
1J)
1$)
1/)
1g(
1r(
1L(
1W(
11(
1<(
1t'
1!(
1Y'
1d'
1>'
1I'
1#'
1.'
1f&
1q&
1K&
1V&
10&
1;&
1s%
1~%
1X%
1c%
1=%
1H%
0C.
0(.
0k-
0P-
05-
0x,
0],
0B,
0',
0j+
0O+
04+
0w*
0\*
0A*
0&*
0:"
14"
09"
0<"
1*$
0}%
0U&
0c'
0;(
0V(
0q(
0.)
0d)
1P)
1x(
1](
1B(
1'(
1O'
1A&
1i%
0$&
0Z&
0h'
0@(
0[(
0v(
03)
0i)
10
1.
1-
1,
1+
1)
1%
1#
19$
08$
07$
05$
03$
1.$
1+$
#710
b1000 F
#750
0i
0G
0f
#800
1i
1G
1f
1I$
0H$
0G$
0E$
0C$
1>$
1;$
b11 A
b101 B
b100101000000010 D
b110 E
b0 J
b1011100000010011 K
b1001 k
0T
1S
0d
0`
1[
0X
0W
1V
0U
1Q
0P
1M
0L
1h)
1i)
1M)
12)
13)
1u(
1v(
1Z(
1[(
1?(
1@(
1$(
1g'
1h'
1L'
11'
1t&
1Y&
1Z&
1>&
1#&
1$&
1f%
1K%
0Z)
0e)
0?)
0J)
0$)
0/)
0g(
0r(
0L(
0W(
01(
0<(
0t'
0!(
0Y'
0d'
0>'
0I'
0#'
0.'
0f&
0q&
0K&
0V&
00&
0;&
0s%
0~%
0X%
0c%
0=%
0H%
15.
1@.
1x-
1%.
1]-
1h-
1B-
1M-
1'-
12-
1j,
1u,
1O,
1Z,
14,
1?,
1w+
1$,
1\+
1g+
1A+
1L+
1&+
11+
1i*
1t*
1N*
1Y*
13*
1>*
1v)
1#*
0/.
02.
0:.
0;.
0=.
0r-
0u-
0}-
0".
0W-
0Z-
0b-
0c-
0e-
0<-
0?-
0G-
0H-
0J-
0!-
0$-
0,-
0--
0/-
0d,
0g,
0o,
0p,
0r,
0I,
0L,
0T,
0W,
0.,
01,
09,
0:,
0<,
0q+
0t+
0|+
0!,
0V+
0Y+
0a+
0d+
0;+
0>+
0F+
0I+
0~*
0#+
0++
0,+
0.+
0c*
0f*
0n*
0q*
0H*
0K*
0S*
0T*
0V*
0-*
00*
08*
0;*
0p)
0s)
0{)
0~)
13"
04"
0*$
1L$
17*
1P*
1m*
1(+
1E+
1`+
1{+
18,
1S,
1n,
1)-
1F-
1a-
19.
0=*
0s*
0K+
0f+
0#,
0>,
0Y,
0t,
0L-
0g-
0?.
1}%
1U&
1c'
1;(
1V(
1q(
1.)
1d)
0#
0%
0)
0+
0,
0-
0.
00
0P)
0x(
0](
0B(
0'(
0O'
0A&
0i%
1+.
1S-
18-
1`,
1E,
1*,
1m+
1R+
17+
1_*
1)*
01-
0Q,
0y+
0^+
0C+
00+
0k*
0X*
05*
1=*
1D*
1s*
1z*
1K+
1f+
1#,
1Y,
1{,
0B*
0x*
0P+
0k+
0(,
0C,
0^,
0y,
0Q-
0l-
0D.
1@
1>
1=
1;
1:
19
18
17
16
14
12
06-
0E,
0m+
0R+
07+
05+
0_*
0]*
0)*
1B*
13
1x*
15
1P+
1k+
1(,
1^,
1<
0:
08
07
06
04
02
09$
18$
17$
15$
13$
0.$
0+$
1[$
1S$
1Q$
1N$
#801
1`!
1c!
0h!
0j!
0l!
0m!
1n!
0E)
0~-
1*)
1c-
1m(
1H-
17(
1p,
1_'
1:,
06&
0o*
0C%
0|)
1x)
1?%
1k*
12&
06,
0['
0l,
03(
0D-
0i(
0_-
0&)
1z-
1A)
0$.
1g-
1L-
1t,
1>,
0s*
0"*
1l)
1_*
0*,
0`,
08-
0S-
1n-
0).
1l-
1Q-
1y,
1C,
0x*
0'*
11
14
09
0;
0=
0>
1?
19$
08$
07$
05$
03$
1.$
1+$
#810
b1001 F
#850
0i
0G
0f
#900
1i
1G
1f
1k$
1c$
1a$
1^$
b111 A
b11 B
b110010100001010 D
b10 E
0C
b0 K
b1010 k
0R
1a
1\
0[
1Z
0Y
1W
1P
0O
1L
0e
0L$
0h)
0M)
02)
0u(
0Z(
0?(
0$(
0g'
0L'
01'
0t&
0Y&
0>&
0#&
0f%
0K%
1C.
1D.
1(.
1).
1k-
1P-
15-
16-
1x,
1],
1B,
1',
1j+
1O+
14+
15+
1w*
1x*
1\*
1]*
1A*
1&*
1'*
05.
0@.
0x-
0%.
0]-
0h-
0B-
0M-
0'-
02-
0j,
0u,
0O,
0Z,
04,
0?,
0w+
0$,
0\+
0g+
0A+
0L+
0&+
01+
0i*
0t*
0N*
0Y*
03*
0>*
0v)
0#*
1:"
03"
17"
1"*
1X*
1s*
10+
11-
1$.
1?.
01
03
04
05
0<
0?
0@
0+.
0n-
0{,
0z*
0_*
0D*
0l)
0[$
0S$
0Q$
0N$
#901
1q!
1t!
1v!
1~!
1[$
1S$
1Q$
1N$
#910
b1010 F
#950
0i
0G
0f
#1000
1i
1G
1f
b10 A
b10 B
b1011001101000001 D
b0 E
b1011 k
0S
1d
0c
0a
1^
1[
0Z
1X
0V
1U
0Q
0N
0L
1h)
1M)
12)
1u(
1Z(
1?(
1$(
1g'
1L'
11'
1t&
1Y&
1>&
1#&
1f%
1K%
1T)
1W)
1_)
1`)
1b)
19)
1<)
1D)
1E)
1G)
1|(
1!)
1))
1,)
1a(
1d(
1l(
1o(
1F(
1I(
1Q(
1R(
1T(
1+(
1.(
16(
19(
1n'
1q'
1y'
1|'
1S'
1V'
1^'
1a'
18'
1;'
1C'
1F'
1{&
1~&
1('
1+'
1`&
1c&
1k&
1n&
1E&
1H&
1P&
1Q&
1S&
1*&
1-&
15&
16&
18&
1m%
1p%
1x%
1y%
1{%
1R%
1U%
1]%
1`%
17%
1:%
1B%
1C%
1E%
1/.
12.
1:.
1;.
1=.
1r-
1u-
1}-
1~-
1".
1W-
1Z-
1b-
1e-
1<-
1?-
1G-
1J-
1!-
1$-
1,-
1--
1/-
1d,
1g,
1o,
1r,
1I,
1L,
1T,
1W,
1.,
11,
19,
1<,
1q+
1t+
1|+
1!,
1V+
1Y+
1a+
1d+
1;+
1>+
1F+
1I+
1~*
1#+
1++
1,+
1.+
1c*
1f*
1n*
1o*
1q*
1H*
1K*
1S*
1T*
1V*
1-*
10*
18*
1;*
1p)
1s)
1{)
1|)
1~)
19"
07"
0x)
0:*
07*
0P*
0k*
0m*
0-+
0(+
0E+
0c+
0`+
0{+
08,
0S,
0n,
0)-
0F-
0a-
0!.
0z-
07.
09.
0?%
0_%
0\%
0u%
02&
04&
0R&
0M&
0j&
0*'
0''
0B'
0]'
0x'
05(
0N(
0k(
0()
0F)
0A)
0\)
0^)
1\)
1B)
1&)
1i(
13(
1v'
1['
1@'
1%'
1&'
1h&
1N&
12&
1Z%
1[%
17.
1{-
1_-
1D-
1l,
1Q,
16,
1y+
1^+
1_+
1C+
1)+
1k*
15*
16*
0?*
02+
0h+
0&.
0d%
0W&
0/'
0K)
15)
1w&
1A&
1N%
1n-
1R+
1z*
1)*
#1010
b1011 F
#1050
0i
0G
0f
#1100
1i
1G
1f
b1 A
b11 B
b110010110110110 D
b110 E
b1100 k
1S
1R
0d
1c
1b
1`
1_
0^
1]
0[
1Z
0X
1V
0U
1Q
1N
0M
1Z)
1e)
1?)
1J)
1K)
1$)
1/)
1g(
1r(
1L(
1W(
11(
1<(
1t'
1!(
1Y'
1d'
1>'
1I'
1#'
1.'
1/'
1f&
1q&
1K&
1V&
1W&
10&
1;&
1s%
1~%
1X%
1c%
1d%
1=%
1H%
0T)
0W)
0_)
0`)
0b)
09)
0<)
0D)
0E)
0G)
0|(
0!)
0))
0,)
0a(
0d(
0l(
0o(
0F(
0I(
0Q(
0R(
0T(
0+(
0.(
06(
09(
0n'
0q'
0y'
0|'
0S'
0V'
0^'
0a'
08'
0;'
0C'
0F'
0{&
0~&
0('
0+'
0`&
0c&
0k&
0n&
0E&
0H&
0P&
0Q&
0S&
0*&
0-&
05&
06&
08&
0m%
0p%
0x%
0y%
0{%
0R%
0U%
0]%
0`%
07%
0:%
0B%
0C%
0E%
0/.
02.
0:.
0;.
0=.
0r-
0u-
0}-
0~-
0".
0W-
0Z-
0b-
0e-
0<-
0?-
0G-
0J-
0!-
0$-
0,-
0--
0/-
0d,
0g,
0o,
0r,
0I,
0L,
0T,
0W,
0.,
01,
09,
0<,
0q+
0t+
0|+
0!,
0V+
0Y+
0a+
0d+
0;+
0>+
0F+
0I+
0~*
0#+
0++
0,+
0.+
0c*
0f*
0n*
0o*
0q*
0H*
0K*
0S*
0T*
0V*
0-*
00*
08*
0;*
0p)
0s)
0{)
0|)
0~)
0:"
13"
09"
1x)
1:*
17*
1P*
1m*
1-+
1(+
1E+
1c+
1`+
1{+
18,
1S,
1n,
1)-
1F-
1a-
1!.
1z-
19.
1?%
1_%
1\%
1u%
14&
1R&
1M&
1j&
1*'
1''
1B'
1]'
1x'
15(
1N(
1k(
1()
1F)
1A)
1^)
0N%
0b%
0:&
0A&
0p&
0w&
0-'
0H'
0c'
0~'
0;(
0q(
0.)
05)
0d)
1P)
1x(
1](
1'(
1j'
1O'
14'
1w&
1\&
1&&
1N%
0I)
0B)
0&)
0i(
0V(
03(
0v'
0['
0@'
0%'
0&'
0h&
0U&
0N&
0}%
0Z%
0[%
0G%
0{-
0_-
0D-
0l,
0Q,
06,
0y+
0^+
0_+
0C+
0)+
05*
06*
1?*
12+
1h+
1&.
13%
1b%
1i%
1A&
1p&
1-'
1H'
1c'
1~'
1;(
1B(
1q(
1.)
15)
0x(
0](
0'(
0j'
0O'
04'
0w&
0\&
0N%
0n-
0R+
0z*
0)*
#1110
b1100 F
#1150
0i
0G
0f
#1200
1i
1G
1f
b100 A
b10 B
b1001101000001011 D
b1 E
1C
b101011111101101 J
b1101 k
1T
0S
0R
1d
0b
1a
0`
0_
0]
0\
1[
0Z
1Y
1X
0W
0V
1U
0Q
0N
1L
1e
1L$
0h)
0i)
0M)
0N)
02)
0u(
0Z(
0[(
0?(
0$(
0g'
0L'
01'
0t&
0Y&
0Z&
0>&
0?&
0#&
0$&
0f%
0K%
0L%
1T)
1W)
1_)
1`)
1b)
19)
1<)
1D)
1E)
1G)
1|(
1!)
1))
1,)
1a(
1d(
1l(
1o(
1F(
1I(
1Q(
1R(
1T(
1+(
1.(
16(
19(
1n'
1q'
1y'
1|'
1S'
1V'
1^'
1a'
18'
1;'
1C'
1F'
1{&
1~&
1('
1+'
1`&
1c&
1k&
1n&
1E&
1H&
1P&
1Q&
1S&
1*&
1-&
15&
16&
18&
1m%
1p%
1x%
1y%
1{%
1R%
1U%
1]%
1`%
17%
1:%
1B%
1C%
1E%
1/.
12.
1:.
1;.
1=.
1r-
1u-
1}-
1~-
1".
1W-
1Z-
1b-
1e-
1<-
1?-
1G-
1J-
1!-
1$-
1,-
1--
1/-
1d,
1g,
1o,
1r,
1I,
1L,
1T,
1W,
1.,
11,
19,
1<,
1q+
1t+
1|+
1!,
1V+
1Y+
1a+
1d+
1;+
1>+
1F+
1I+
1~*
1#+
1++
1,+
1.+
1c*
1f*
1n*
1o*
1q*
1H*
1K*
1S*
1T*
1V*
1-*
10*
18*
1;*
1p)
1s)
1{)
1|)
1~)
1:"
03"
0L$
18"
0x)
0:*
07*
0P*
0k*
0m*
0-+
0(+
0E+
0c+
0`+
0{+
08,
0S,
0n,
0)-
0F-
0a-
0!.
0z-
07.
09.
0?%
0_%
0\%
0u%
02&
04&
0R&
0M&
0j&
0*'
0''
0B'
0]'
0x'
05(
0N(
0k(
0()
0F)
0A)
0\)
0^)
1!
1#
1$
1%
1,
1/
10
1\)
1I)
1B)
1&)
1i(
1V(
13(
1v'
1['
1@'
1%'
1&'
1h&
1U&
1N&
12&
1}%
1Z%
1[%
1G%
17.
1{-
1_-
1D-
1l,
1Q,
16,
1y+
1^+
1_+
1C+
1)+
1k*
15*
16*
1^"
0?*
02+
0h+
0&.
03%
0b%
0i%
0A&
0p&
0-'
0H'
0c'
0~'
0;(
0B(
0q(
0.)
05)
1N)
1x(
1](
1[(
1'(
1j'
1O'
14'
1w&
1\&
1Z&
1$&
1N%
1L%
1n-
1R+
1z*
1)*
0!
0g%
0#
0%
0u&
02'
0M'
0h'
0%(
0@(
0,
0v(
03)
0/
1.
1-
1+
1*
1)
1(
1'
1&
1"
1n"
1m"
1k"
1e"
1c"
1b"
1_"
#1210
b1101 F
#1250
0i
0G
0f
#1300
1i
1G
1f
1~"
1}"
1{"
1u"
1s"
1r"
1o"
b111 A
b11 B
b11001100111010 D
b110 E
b0 J
b1110 k
0T
1S
1R
0d
1`
1_
1\
0Y
1W
0U
1Q
1N
1M
0Z)
0e)
0?)
0J)
0K)
0$)
0/)
0g(
0r(
0L(
0W(
01(
0<(
0t'
0!(
0Y'
0d'
0>'
0I'
0#'
0.'
0/'
0f&
0q&
0K&
0V&
0W&
00&
0;&
0s%
0~%
0X%
0c%
0d%
0=%
0H%
0T)
0W)
0_)
0`)
0b)
09)
0<)
0D)
0E)
0G)
0|(
0!)
0))
0,)
0a(
0d(
0l(
0o(
0F(
0I(
0Q(
0R(
0T(
0+(
0.(
06(
09(
0n'
0q'
0y'
0|'
0S'
0V'
0^'
0a'
08'
0;'
0C'
0F'
0{&
0~&
0('
0+'
0`&
0c&
0k&
0n&
0E&
0H&
0P&
0Q&
0S&
0*&
0-&
05&
06&
08&
0m%
0p%
0x%
0y%
0{%
0R%
0U%
0]%
0`%
07%
0:%
0B%
0C%
0E%
0/.
02.
0:.
0;.
0=.
0r-
0u-
0}-
0~-
0".
0W-
0Z-
0b-
0e-
0<-
0?-
0G-
0J-
0!-
0$-
0,-
0--
0/-
0d,
0g,
0o,
0r,
0I,
0L,
0T,
0W,
0.,
01,
09,
0<,
0q+
0t+
0|+
0!,
0V+
0Y+
0a+
0d+
0;+
0>+
0F+
0I+
0~*
0#+
0++
0,+
0.+
0c*
0f*
0n*
0o*
0q*
0H*
0K*
0S*
0T*
0V*
0-*
00*
08*
0;*
0p)
0s)
0{)
0|)
0~)
0:"
13"
08"
0^"
1L$
1x)
1:*
17*
1P*
1m*
1-+
1(+
1E+
1c+
1`+
1{+
18,
1S,
1n,
1)-
1F-
1a-
1!.
1z-
19.
1?%
1_%
1\%
1u%
14&
1R&
1M&
1j&
1*'
1''
1B'
1]'
1x'
15(
1N(
1k(
1()
1F)
1A)
1^)
1b%
1:&
1A&
1p&
1-'
1H'
1c'
1~'
1;(
1q(
1.)
15)
1d)
0P)
0N)
0x(
0](
0'(
0j'
0O'
04'
0\&
0Z&
0&&
0B)
0&)
0i(
03(
0v'
0['
0@'
0%'
0&'
0h&
0N&
0Z%
0[%
0{-
0_-
0D-
0l,
0Q,
06,
0y+
0^+
0_+
0C+
0)+
05*
06*
1?*
12+
1h+
1&.
1d%
1W&
1/'
1K)
1?&
1%
1u&
1M'
1h'
1%(
1@(
1v(
13)
1/
1i)
00
0.
0-
0+
0*
0)
0(
0&
0$
05)
0w&
0A&
0N%
0n-
0R+
0z*
0)*
1g%
1Z&
12'
1N)
0/
0'
0%
0"
0n"
0m"
0k"
0e"
0c"
0b"
0_"
1Y$
1X$
1W$
1T$
0Q$
1P$
1O$
0N$
#1301
1~
1#!
1$!
1&!
1,!
1.!
1/!
0U)
00.
0:)
0s-
0b(
0=-
0|&
0W+
0F&
0!+
0+&
0d*
08%
0q)
1m)
14%
1`*
1'&
1{*
1B&
1S+
1x&
19-
1^(
1o-
16)
1,.
1Q)
1n"
1m"
1k"
1e"
1c"
1b"
1_"
#1310
b1110 F
#1350
0i
0G
0f
#1400
1i
1G
1f
1i$
1h$
1g$
1d$
0a$
1`$
1_$
0^$
b1 A
b1 B
b11101100010 D
b100 E
b1001101000001011 J
b1001101000001011 K
b1111 k
0S
0a
0`
1^
1Z
0X
0W
0P
0M
0L
1h)
1M)
12)
1u(
1Z(
1?(
1$(
1g'
1L'
11'
1t&
1Y&
1>&
1#&
1f%
1K%
1Z)
1e)
1?)
1J)
1$)
1/)
1g(
1r(
1L(
1W(
11(
1<(
1t'
1!(
1Y'
1d'
1>'
1I'
1#'
1.'
1f&
1q&
1K&
1V&
10&
1;&
1s%
1~%
1X%
1c%
1=%
1H%
15.
1@.
1x-
1%.
1]-
1h-
1B-
1M-
1'-
12-
1j,
1u,
1O,
1Z,
14,
1?,
1w+
1$,
1\+
1g+
1A+
1L+
1&+
11+
1i*
1t*
1N*
1Y*
13*
1>*
1v)
1#*
15"
03"
0L$
1f#
0"*
0u)
0X*
0s*
0h*
00+
0%+
0[+
01-
0A-
0$.
0w-
0?.
04.
0G%
0<%
0}%
0:&
0/&
0U&
0J&
0"'
0V(
0f(
0I)
0>)
0d)
0Y)
1O)
1P)
14)
15)
1\(
1B(
1v&
1@&
1A&
1%&
1&&
1i%
12%
13%
1*.
1+.
1m-
1n-
17-
1{,
1Q+
1y*
1z*
1^*
1_*
1D*
1k)
1l)
0%*
0v*
03+
0i+
0O-
0'.
0B.
0J%
0=&
0X&
00'
0t(
0L)
0g)
10
1/
1-
1'
1%
1$
1!
1@
1?
1=
17
15
14
11
0v#
1u#
0t#
0s#
0o#
0j#
0h#
0Y$
0X$
0W$
0T$
1Q$
0P$
0O$
1N$
#1401
0q!
1r!
1s!
0t!
1w!
1z!
1{!
1|!
1Y$
1X$
1W$
1T$
0Q$
1P$
1O$
0N$
#1410
b1111 F
#1450
0i
0G
0f
#1500
1i
1G
1f
0($
1'$
0&$
0%$
0!$
0z#
0x#
b111 A
b0 B
b110000010110111 D
b111 E
0C
b0 J
b0 K
b10000 k
1T
1S
1d
1b
1`
0^
1]
0\
0[
0Z
1W
1V
0Q
1M
1L
0e
0f#
0h)
0i)
0M)
0N)
02)
0u(
0Z(
0[(
0?(
0$(
0g'
0L'
01'
0t&
0Y&
0Z&
0>&
0?&
0#&
0$&
0f%
0K%
0L%
0Z)
0e)
0?)
0J)
0$)
0/)
0g(
0r(
0L(
0W(
01(
0<(
0t'
0!(
0Y'
0d'
0>'
0I'
0#'
0.'
0f&
0q&
0K&
0V&
00&
0;&
0s%
0~%
0X%
0c%
0=%
0H%
1/.
10.
12.
1:.
1;.
1=.
1r-
1s-
1u-
1}-
1~-
1".
1W-
1Z-
1b-
1e-
1<-
1=-
1?-
1G-
1J-
1!-
1$-
1,-
1--
1/-
1d,
1g,
1o,
1r,
1I,
1L,
1T,
1W,
1.,
11,
19,
1<,
1q+
1t+
1|+
1!,
1V+
1W+
1Y+
1a+
1d+
1;+
1>+
1F+
1I+
1~*
1!+
1#+
1++
1,+
1.+
1c*
1d*
1f*
1n*
1o*
1q*
1H*
1K*
1S*
1T*
1V*
1-*
10*
18*
1;*
1p)
1q)
1s)
1{)
1|)
1~)
12"
05"
0x)
0m)
07*
0U*
0P*
0p*
0k*
0m*
0`*
0(+
0{*
0E+
0c+
0`+
0S+
0~+
0{+
08,
0S,
0q,
0n,
0.-
0)-
0I-
0F-
09-
0a-
0!.
0z-
0o-
07.
09.
0,.
1G%
1<%
1}%
1:&
1/&
1U&
1J&
1"'
1V(
1f(
1I)
1>)
1d)
1Y)
1J%
1#
1=&
1X&
10'
1,
1t(
1L)
1g)
0-
0'
0O)
0P)
04)
05)
0\(
0B(
0v&
0@&
0A&
0%&
0&&
0i%
02%
03%
14.
17.
1w-
1$.
1{-
1_-
1A-
1D-
1E-
11-
1*-
1l,
1m,
1Q,
16,
1y+
1z+
1[+
1^+
1_+
1C+
1%+
10+
1h*
1k*
1l*
1X*
1Q*
15*
1u)
1"*
0l)
0k)
0=*
0D*
0^*
0z*
0y*
0K+
0f+
0Q+
0#,
0>,
0Y,
0t,
0{,
0L-
07-
0g-
0n-
0m-
0*.
1L%
1$&
1?&
1Z&
1[(
1N)
1i)
00
0/
0,
0%
0$
0#
0!
1B.
1'.
1S-
1O-
18-
1`,
1E,
1*,
1m+
1i+
1R+
17+
13+
1v*
1)*
1%*
01
04
05
07
0=
0?
0@
1v#
0u#
1t#
1s#
1o#
1j#
1h#
#1501
0Q!
0S!
0X!
0\!
0]!
1^!
0_!
19.
0|-
1a-
1F-
18,
1m*
17*
05*
0k*
06,
0D-
0_-
1z-
07.
1?.
0$.
1g-
1L-
1>,
1s*
1=*
0)*
0_*
0*,
08-
0S-
1n-
0+.
0v#
1u#
0t#
0s#
0o#
0j#
0h#
#1510
b10000 F
#1550
0i
0G
0f
#1600
1i
1G
1f
b11 A
b1 B
b11001001001001 D
b0 E
1C
b1001101000001011 K
b10001 k
0T
0S
0R
0c
0b
1a
0`
0_
1^
0]
1[
1X
0V
1Q
0L
1e
1n$
1h)
1M)
12)
1u(
1Z(
1?(
1$(
1g'
1L'
11'
1t&
1Y&
1>&
1#&
1f%
1K%
0/.
00.
02.
0:.
0;.
0=.
0r-
0s-
0u-
0}-
0~-
0".
0W-
0Z-
0b-
0e-
0<-
0=-
0?-
0G-
0J-
0!-
0$-
0,-
0--
0/-
0d,
0g,
0o,
0r,
0I,
0L,
0T,
0W,
0.,
01,
09,
0<,
0q+
0t+
0|+
0!,
0V+
0W+
0Y+
0a+
0d+
0;+
0>+
0F+
0I+
0~*
0!+
0#+
0++
0,+
0.+
0c*
0d*
0f*
0n*
0o*
0q*
0H*
0K*
0S*
0T*
0V*
0-*
00*
08*
0;*
0p)
0q)
0s)
0{)
0|)
0~)
1:"
02"
0n$
19"
1x)
1m)
1U*
1P*
1p*
1k*
1`*
1(+
1{*
1E+
1c+
1`+
1S+
1~+
1{+
1S,
1q,
1n,
1.-
1)-
1I-
19-
1!.
1|-
1o-
17.
1,.
04.
0?.
0w-
0{-
0A-
0E-
01-
0*-
0l,
0m,
0Q,
0y+
0z+
0[+
0^+
0_+
0C+
0%+
00+
0h*
0s*
0l*
0X*
0Q*
0u)
0"*
1<"
1l)
1k)
1D*
1_*
1^*
1z*
1y*
1K+
1f+
1Q+
1#,
1Y,
1t,
1{,
17-
1m-
1+.
1*.
0B.
0'.
0O-
0`,
0E,
0m+
0i+
0R+
07+
03+
0v*
0%*
11
14
15
17
1=
1?
1@
1L"
1I"
1F"
1C"
1@"
1?"
#1610
b10001 F
#1650
0i
0G
0f
#1700
1i
1G
1f
1\"
1Y"
1V"
1S"
1P"
1O"
b1 A
b110 B
b111111100001100 D
b10 E
0C
b1001101000001011 J
b11001100111010 K
b10010 k
1S
0d
1b
0^
1\
1Z
1Y
1V
0Q
1P
1O
0M
0e
0<"
1Z)
1e)
1?)
1J)
1$)
1/)
1g(
1r(
1L(
1W(
11(
1<(
1t'
1!(
1Y'
1d'
1>'
1I'
1#'
1.'
1f&
1q&
1K&
1V&
10&
1;&
1s%
1~%
1X%
1c%
1=%
1H%
0C.
0D.
0(.
0).
0k-
0P-
05-
06-
0x,
0],
0B,
0',
0j+
0O+
04+
05+
0w*
0x*
0\*
0]*
0A*
0&*
0'*
05.
0@.
0x-
0%.
0]-
0h-
0B-
0M-
0'-
02-
0j,
0u,
0O,
0Z,
04,
0?,
0w+
0$,
0\+
0g+
0A+
0L+
0&+
01+
0i*
0t*
0N*
0Y*
03*
0>*
0v)
0#*
1/.
10.
12.
1:.
1;.
1=.
1r-
1s-
1u-
1}-
1~-
1".
1W-
1Z-
1b-
1e-
1<-
1=-
1?-
1G-
1J-
1!-
1$-
1,-
1--
1/-
1d,
1g,
1o,
1r,
1I,
1L,
1T,
1W,
1.,
11,
19,
1<,
1q+
1t+
1|+
1!,
1V+
1W+
1Y+
1a+
1d+
1;+
1>+
1F+
1I+
1~*
1!+
1#+
1++
1,+
1.+
1c*
1d*
1f*
1n*
1o*
1q*
1H*
1K*
1S*
1T*
1V*
1-*
10*
18*
1;*
1p)
1q)
1s)
1{)
1|)
1~)
09"
17"
0x)
0m)
0U*
0P*
0p*
0k*
0`*
0(+
0{*
0E+
0c+
0`+
0S+
0~+
0{+
0S,
0q,
0n,
0.-
0)-
0I-
09-
0!.
0z-
0|-
0o-
07.
0,.
1"*
1u)
1X*
1s*
1h*
10+
1%+
1[+
11-
1A-
1$.
1w-
1?.
14.
1%*
13
1v*
13+
1i+
1<
1O-
1'.
1B.
0G%
0<%
0}%
0:&
0/&
0U&
0J&
0"'
0V(
0f(
0I)
0>)
0d)
0Y)
1O)
1P)
14)
15)
1\(
1B(
1v&
1@&
1A&
1%&
1&&
1i%
12%
13%
0=
07
0*.
0+.
0m-
0n-
07-
0{,
0Q+
0y*
0z*
0^*
0_*
0D*
0k)
0l)
1z-
1{-
1E-
1*-
1l,
1m,
1Q,
1y+
1z+
1^+
1_+
1C+
1l*
1Q*
0Z*
0u*
0h+
0%,
0v,
03-
0N-
0&.
1'*
1]*
1x*
15+
16-
1).
1D.
0J%
0=&
0X&
00'
0t(
0L)
0g)
10
1/
1-
1'
1%
1$
1!
0@
0?
0<
05
04
03
01
1n-
18-
1{,
1`,
1m+
1R+
1_*
1D*
0]*
0x*
0k+
0(,
0y,
06-
0Q-
0).
1?
1=
1<
1;
18
17
14
13
0L"
0I"
0F"
0C"
0@"
0?"
#1701
1p
1q
1t
1w
1z
1}
0..
0;-
0H,
0U+
0b*
0G*
1E*
1`*
1S+
1F,
19-
1,.
1L"
1I"
1F"
1C"
1@"
1?"
#1710
b10010 F
#1750
0i
0G
0f
#1800
1i
1G
1f
b111 A
b101 B
b1101101100010010 D
b110 E
1C
b0 J
b1011100000010011 K
b10011 k
1R
1c
0b
0a
1`
0Z
0W
1U
1Q
0P
1M
1L
1e
1"#
0h)
0i)
0M)
0N)
02)
0u(
0Z(
0[(
0?(
0$(
0g'
0L'
01'
0t&
0Y&
0Z&
0>&
0?&
0#&
0$&
0f%
0K%
0L%
0Z)
0e)
0?)
0J)
0$)
0/)
0g(
0r(
0L(
0W(
01(
0<(
0t'
0!(
0Y'
0d'
0>'
0I'
0#'
0.'
0f&
0q&
0K&
0V&
00&
0;&
0s%
0~%
0X%
0c%
0=%
0H%
15.
1@.
1x-
1%.
1&.
1]-
1h-
1B-
1M-
1N-
1'-
12-
13-
1j,
1u,
1v,
1O,
1Z,
14,
1?,
1w+
1$,
1%,
1\+
1g+
1h+
1A+
1L+
1&+
11+
1i*
1t*
1u*
1N*
1Y*
1Z*
13*
1>*
1v)
1#*
0/.
00.
02.
0:.
0;.
0=.
0r-
0s-
0u-
0}-
0~-
0".
0W-
0Z-
0b-
0e-
0<-
0=-
0?-
0G-
0J-
0!-
0$-
0,-
0--
0/-
0d,
0g,
0o,
0r,
0I,
0L,
0T,
0W,
0.,
01,
09,
0<,
0q+
0t+
0|+
0!,
0V+
0W+
0Y+
0a+
0d+
0;+
0>+
0F+
0I+
0~*
0!+
0#+
0++
0,+
0.+
0c*
0d*
0f*
0n*
0o*
0q*
0H*
0K*
0S*
0T*
0V*
0-*
00*
08*
0;*
0p)
0q)
0s)
0{)
0|)
0~)
0:"
13"
1L$
07"
1x)
1m)
1U*
1P*
1G*
1p*
1k*
1b*
1(+
1{*
1E+
1c+
1`+
1U+
1~+
1{+
1S,
1H,
1q,
1n,
1.-
1)-
1I-
1;-
1!.
1|-
1o-
17.
1..
0D*
0M*
0_*
0h*
0K+
0R+
0f+
0[+
0m+
0#,
0Y,
0N,
0`,
0t,
0{,
08-
0A-
0n-
0$.
04.
1G%
1<%
1}%
1:&
1/&
1U&
1J&
1"'
1V(
1f(
1I)
1>)
1d)
1Y)
1J%
1#
1=&
1X&
10'
1,
1t(
1L)
1g)
0-
0'
0O)
0P)
04)
05)
0\(
0B(
0v&
0@&
0A&
0%&
0&&
0i%
02%
03%
1*.
1n-
17-
1Q-
16-
1`,
1D,
1E,
1m+
1Q+
1R+
17+
1^*
1x*
1C*
1]*
0?.
0w-
0{-
0E-
01-
0*-
0l,
0m,
0F,
0Q,
0y+
0z+
0^+
0_+
0C+
0%+
00+
0s*
0l*
0E*
0X*
0Q*
0u)
0"*
0"#
1l)
1k)
1D*
1M*
1_*
1z*
1y*
1K+
1f+
1#,
1Y,
1N,
1t,
1{,
1m-
1+.
03
04
0P+
0^,
0<
0=
1L%
1$&
1?&
1Z&
1[(
1N)
1i)
00
0/
0,
0%
0$
0#
0!
1:
16
0D.
06-
0`,
0D,
0E,
0m+
0R+
07+
05+
0x*
0C*
0]*
0'*
11
13
14
15
1P+
1k+
1(,
1^,
1y,
1<
1@
0;
0:
08
07
06
0Y$
0W$
1Q$
0O$
1N$
1M$
#1810
b10011 F
#1850
0i
0G
0f
#1900
1i
1G
1f
0i$
0g$
1a$
0_$
1^$
1]$
b1 A
b111 B
b1111011011010011 D
b101 E
0C
b1001101000001011 J
b0 K
b10100 k
1T
0S
1d
1^
1]
0\
1Z
0Y
1W
1P
0M
0L
0e
0L$
1h)
1M)
12)
1u(
1Z(
1?(
1$(
1g'
1L'
11'
1t&
1Y&
1>&
1#&
1f%
1K%
1Z)
1e)
1?)
1J)
1$)
1/)
1g(
1r(
1L(
1W(
11(
1<(
1t'
1!(
1Y'
1d'
1>'
1I'
1#'
1.'
1f&
1q&
1K&
1V&
10&
1;&
1s%
1~%
1X%
1c%
1=%
1H%
05.
0@.
0x-
0%.
0]-
0h-
0B-
0M-
0'-
02-
0j,
0u,
0O,
0Z,
04,
0?,
0w+
0$,
0\+
0g+
0A+
0L+
0&+
01+
0i*
0t*
0N*
0Y*
03*
0>*
0v)
0#*
14"
03"
1"*
1u)
1X*
1s*
1h*
10+
1%+
1[+
11-
1A-
1$.
1w-
1?.
14.
0G%
0<%
0}%
0:&
0/&
0U&
0J&
0"'
0V(
0f(
0I)
0>)
0d)
0Y)
1O)
1P)
14)
15)
1\(
1B(
1v&
1@&
1A&
1%&
1&&
1i%
12%
13%
0*.
0+.
0m-
0n-
07-
0{,
0Q+
0y*
0z*
0^*
0_*
0D*
0k)
0l)
1'*
1]*
1x*
15+
16-
1).
1D.
0J%
0=&
0X&
00'
0t(
0L)
0g)
10
1/
1-
1'
1%
1$
1!
0@
0?
0<
05
04
03
01
1Y$
1W$
0Q$
1O$
0N$
0M$
#1901
1p!
1q!
0r!
1t!
0z!
0|!
0Y$
0W$
1Q$
0O$
1N$
1M$
#1910
b10100 F
#1950
0i
0G
0f
#2000
1i
1G
1f
b11 A
b1 B
b1010111000111111 D
b10 E
b0 J
b1001101000001011 K
b10101 k
0T
1S
0R
1b
1a
1_
0^
0]
1Y
0X
0V
0P
0O
1M
0Z)
0e)
0?)
0J)
0$)
0/)
0g(
0r(
0L(
0W(
01(
0<(
0t'
0!(
0Y'
0d'
0>'
0I'
0#'
0.'
0f&
0q&
0K&
0V&
00&
0;&
0s%
0~%
0X%
0c%
0=%
0H%
1C.
1(.
1k-
1P-
15-
1x,
1],
1B,
1',
1j+
1O+
14+
1w*
1\*
1A*
1&*
15.
1@.
1x-
1%.
1]-
1h-
1B-
1M-
1'-
12-
1j,
1u,
1O,
1Z,
14,
1?,
1w+
1$,
1\+
1g+
1A+
1L+
1&+
11+
1i*
1t*
1N*
1Y*
13*
1>*
1v)
1#*
1:"
04"
17"
0"*
0u)
0X*
0s*
0h*
00+
0%+
0[+
01-
0A-
0$.
0w-
0?.
04.
1G%
1<%
1}%
1:&
1/&
1U&
1J&
1"'
1V(
1f(
1I)
1>)
1d)
1Y)
0O)
0P)
04)
05)
0\(
0B(
0v&
0@&
0A&
0%&
0&&
0i%
02%
03%
1*.
1+.
1m-
1n-
17-
1{,
1Q+
1y*
1z*
1^*
1_*
1D*
1k)
1l)
0%*
0v*
03+
0i+
0O-
0'.
0B.
1J%
1=&
1X&
10'
1t(
1L)
1g)
00
0/
0-
0'
0%
0$
0!
1@
1?
1=
17
15
14
11
#2010
b10101 F
#2050
0i
0G
0f
#2100
1i
1G
1f
b110 A
b110 B
b1111001010011100 D
b1101101100010010 J
b1101101100010010 K
b10110 k
0d
0c
0_
1]
0Z
0Y
1X
1V
0Q
1P
1O
0N
1L
0h)
0M)
02)
0u(
0Z(
0?(
0$(
0g'
0L'
01'
0t&
0Y&
0>&
0#&
0f%
0K%
1T)
1U)
1W)
1_)
1`)
1b)
19)
1:)
1<)
1D)
1E)
1G)
1|(
1!)
1))
1,)
1a(
1b(
1d(
1l(
1o(
1F(
1I(
1Q(
1R(
1T(
1+(
1.(
16(
19(
1n'
1q'
1y'
1|'
1S'
1V'
1^'
1a'
18'
1;'
1C'
1F'
1{&
1|&
1~&
1('
1+'
1`&
1c&
1k&
1n&
1E&
1F&
1H&
1P&
1Q&
1S&
1*&
1+&
1-&
15&
16&
18&
1m%
1p%
1x%
1y%
1{%
1R%
1U%
1]%
1`%
17%
18%
1:%
1B%
1C%
1E%
0C.
0D.
0(.
0).
0k-
0P-
05-
06-
0x,
0],
0B,
0',
0j+
0O+
04+
05+
0w*
0x*
0\*
0]*
0A*
0&*
0'*
05.
0@.
0x-
0%.
0]-
0h-
0B-
0M-
0'-
02-
0j,
0u,
0O,
0Z,
04,
0?,
0w+
0$,
0\+
0g+
0A+
0L+
0&+
01+
0i*
0t*
0N*
0Y*
03*
0>*
0v)
0#*
1/.
10.
12.
1:.
1;.
1=.
1r-
1s-
1u-
1}-
1~-
1".
1W-
1Z-
1b-
1e-
1<-
1=-
1?-
1G-
1J-
1!-
1$-
1,-
1--
1/-
1d,
1g,
1o,
1r,
1I,
1L,
1T,
1W,
1.,
11,
19,
1<,
1q+
1t+
1|+
1!,
1V+
1W+
1Y+
1a+
1d+
1;+
1>+
1F+
1I+
1~*
1!+
1#+
1++
1,+
1.+
1c*
1d*
1f*
1n*
1o*
1q*
1H*
1K*
1S*
1T*
1V*
1-*
10*
18*
1;*
1p)
1q)
1s)
1{)
1|)
1~)
0})
0x)
0m)
0:*
0P*
0G*
0p*
0k*
0`*
0b*
0-+
0(+
0{*
0E+
0c+
0`+
0S+
0U+
0~+
0{+
0S,
0H,
0n,
0.-
0)-
09-
0;-
0!.
0z-
0|-
0o-
07.
0,.
0..
1"*
1u)
1X*
1s*
1h*
10+
1%+
1[+
11-
1A-
1$.
1w-
1?.
14.
1%*
13
1v*
13+
1i+
1<
1O-
1'.
1B.
0D%
0?%
04%
0_%
0u%
0l%
07&
02&
0'&
0)&
0R&
0M&
0B&
0j&
0*'
0''
0x&
0z&
0E'
0B'
0x'
0m'
05(
0S(
0N(
0^(
0`(
0F)
0A)
0C)
06)
0\)
0Q)
0S)
1Q)
1A)
1B)
1^(
1O(
13(
1k'
1v'
1@'
1A'
1x&
1%'
1&'
1h&
1N&
1'&
13&
1j%
1[%
1@%
0=
07
0*.
0+.
0m-
0n-
07-
0{,
0Q+
0y*
0z*
0^*
0_*
0D*
0k)
0l)
1,.
1z-
1{-
19-
1*-
1l,
1F,
1Q,
1y+
1z+
1S+
1^+
1_+
1C+
1)+
1`*
1l*
1E*
16*
1y)
0$*
0?*
0u*
02+
0h+
0%,
03-
0&.
1'*
1]*
1x*
15+
16-
1).
1D.
0I%
0d%
0<&
0W&
0/'
0J'
0X(
0K)
15)
1B(
14'
1w&
1A&
1&&
1N%
13%
0@
0?
0<
05
04
03
01
1n-
1{,
1m+
1R+
1z*
1_*
1)*
1l)
0'*
0B*
0x*
05+
0k+
0(,
06-
0).
0L%
0g%
0?&
0Z&
02'
0M'
0[(
0N)
1/
1,
1(
1'
1%
1$
1"
1!
1?
1<
18
17
15
14
12
11
#2110
b10110 F
#2150
0i
0G
0f
#2200
1i
1G
1f
b11 A
b11 B
b1010100000101111 D
b11 E
1C
b0 J
b0 K
b10111 k
1T
1d
1c
0`
1_
0]
0[
1Y
0X
0V
1Q
0O
1N
0L
1e
1"#
1h)
1M)
1N)
12)
1u(
1Z(
1[(
1?(
1$(
1g'
1L'
1M'
11'
12'
1t&
1Y&
1Z&
1>&
1?&
1#&
1f%
1g%
1K%
1L%
0T)
0U)
0W)
0_)
0`)
0b)
09)
0:)
0<)
0D)
0E)
0G)
0|(
0!)
0))
0,)
0a(
0b(
0d(
0l(
0o(
0F(
0I(
0Q(
0R(
0T(
0+(
0.(
06(
09(
0n'
0q'
0y'
0|'
0S'
0V'
0^'
0a'
08'
0;'
0C'
0F'
0{&
0|&
0~&
0('
0+'
0`&
0c&
0k&
0n&
0E&
0F&
0H&
0P&
0Q&
0S&
0*&
0+&
0-&
05&
06&
08&
0m%
0p%
0x%
0y%
0{%
0R%
0U%
0]%
0`%
07%
08%
0:%
0B%
0C%
0E%
1C.
1(.
1).
1k-
1P-
15-
16-
1x,
1],
1B,
1',
1(,
1j+
1k+
1O+
14+
15+
1w*
1x*
1\*
1A*
1B*
1&*
1'*
0/.
00.
02.
0:.
0;.
0=.
0r-
0s-
0u-
0}-
0~-
0".
0W-
0Z-
0b-
0e-
0<-
0=-
0?-
0G-
0J-
0!-
0$-
0,-
0--
0/-
0d,
0g,
0o,
0r,
0I,
0L,
0T,
0W,
0.,
01,
09,
0<,
0q+
0t+
0|+
0!,
0V+
0W+
0Y+
0a+
0d+
0;+
0>+
0F+
0I+
0~*
0!+
0#+
0++
0,+
0.+
0c*
0d*
0f*
0n*
0o*
0q*
0H*
0K*
0S*
0T*
0V*
0-*
00*
08*
0;*
0p)
0q)
0s)
0{)
0|)
0~)
07"
16"
1D#
0"#
1})
1x)
1m)
1:*
1P*
1G*
1p*
1k*
1b*
1-+
1(+
1{*
1E+
1c+
1`+
1U+
1~+
1{+
1S,
1H,
1n,
1.-
1)-
1;-
1!.
1|-
1o-
17.
1..
01
02
04
05
07
08
0<
0?
1D%
1?%
14%
1_%
1u%
1l%
17&
12&
1)&
1R&
1M&
1B&
1j&
1*'
1''
1z&
1E'
1B'
1x'
1m'
15(
1S(
1N(
1`(
1F)
1C)
16)
1\)
1S)
0!
0"
0$
0%
0'
0(
0,
0/
0B)
0O(
03(
0k'
0v'
0@'
0A'
0%'
0&'
0h&
0N&
03&
0j%
0[%
0@%
0{-
0*-
0l,
0F,
0Q,
0y+
0z+
0^+
0_+
0C+
0)+
0l*
0E*
06*
0y)
1$*
1?*
1u*
12+
1h+
1%,
13-
1&.
1I%
1d%
1<&
1W&
1/'
1J'
1X(
1K)
05)
0B(
04'
0w&
0A&
0&&
0N%
03%
0n-
0{,
0m+
0R+
0z*
0_*
0)*
0l)
1T#
1S#
1R#
1Q#
1O#
1I#
1G#
1E#
#2210
b10111 F
#2250
0i
0G
0f
#2300
1i
1G
1f
1d#
1c#
1b#
1a#
1_#
1Y#
1W#
1U#
b100 A
b111 B
b11011011001011 D
b110 E
0C
b11101100010 J
b11000 k
0T
1R
0b
0_
1^
1]
1[
1Z
0Y
1X
0U
1O
0N
0M
1L
0e
0D#
0h)
0M)
02)
0u(
0Z(
0?(
0$(
0g'
0L'
01'
0t&
0Y&
0>&
0#&
0f%
0K%
1Z)
1e)
1?)
1J)
1$)
1/)
1g(
1r(
1L(
1W(
11(
1<(
1t'
1!(
1Y'
1d'
1>'
1I'
1#'
1.'
1f&
1q&
1K&
1V&
10&
1;&
1s%
1~%
1X%
1c%
1=%
1H%
1T)
1U)
1W)
1_)
1`)
1b)
19)
1:)
1<)
1D)
1E)
1G)
1|(
1!)
1))
1,)
1a(
1b(
1d(
1l(
1o(
1F(
1I(
1Q(
1R(
1T(
1+(
1.(
16(
19(
1n'
1q'
1y'
1|'
1S'
1V'
1^'
1a'
18'
1;'
1C'
1F'
1{&
1|&
1~&
1('
1+'
1`&
1c&
1k&
1n&
1E&
1F&
1H&
1P&
1Q&
1S&
1*&
1+&
1-&
15&
16&
18&
1m%
1p%
1x%
1y%
1{%
1R%
1U%
1]%
1`%
17%
18%
1:%
1B%
1C%
1E%
0C.
0(.
0k-
0P-
05-
0x,
0],
0B,
0',
0j+
0O+
04+
0w*
0\*
0A*
0&*
0:"
13"
06"
0D%
0?%
04%
0_%
0u%
0l%
07&
02&
0'&
0)&
0R&
0M&
0B&
0j&
0*'
0''
0x&
0z&
0E'
0B'
0x'
0m'
05(
0S(
0N(
0^(
0`(
0F)
0A)
0C)
06)
0\)
0Q)
0S)
1Q)
1A)
1B)
1^(
1O(
13(
1k'
1v'
1@'
1A'
1x&
1%'
1&'
1h&
1N&
1'&
13&
1j%
1[%
1@%
0r%
0/&
0p&
0-'
0"'
0H'
0~'
0s'
0;(
0f(
0I)
0Y)
1O)
15)
1\(
1'(
1i'
1j'
14'
1v&
1w&
1\&
1%&
1h%
0u&
02'
0M'
0%(
0@(
0N)
1/
1+
1*
1(
1'
1&
0T#
0S#
0R#
0Q#
0O#
0I#
0G#
0E#
#2301
1@!
1B!
1D!
1J!
1L!
1M!
1N!
1O!
03.
0v-
0[-
0@-
0h,
0$+
0L*
0t)
1n)
1F*
1|*
1b,
1:-
1U-
1p-
1-.
06.
0y-
0^-
0C-
0k,
0'+
0O*
0w)
1k)
1C*
1y*
1_,
17-
1R-
1m-
1*.
1T#
1S#
1R#
1Q#
1O#
1I#
1G#
1E#
#2310
b11000 F
#2350
0i
0G
0f
#2400
1i
1G
1f
b1 A
b101 B
b110110011011010 D
b101 E
1C
b1001101000001011 J
b1011100000010011 K
b11001 k
1T
0S
0d
1`
0[
1Y
0X
1V
0P
1N
0L
1e
1L$
1h)
1M)
1N)
12)
1u(
1Z(
1?(
1@(
1$(
1%(
1g'
1L'
1M'
11'
12'
1t&
1u&
1Y&
1>&
1#&
1f%
1K%
0T)
0U)
0W)
0X)
0_)
0`)
0b)
09)
0:)
0<)
0=)
0D)
0E)
0G)
0|(
0!)
0")
0))
0,)
0a(
0b(
0d(
0e(
0l(
0o(
0F(
0I(
0Q(
0R(
0T(
0+(
0.(
0/(
06(
09(
0n'
0q'
0y'
0|'
0S'
0V'
0^'
0a'
08'
0;'
0C'
0F'
0{&
0|&
0~&
0('
0+'
0`&
0c&
0k&
0n&
0E&
0F&
0H&
0I&
0P&
0Q&
0S&
0*&
0+&
0-&
05&
06&
08&
0m%
0p%
0q%
0x%
0y%
0{%
0R%
0U%
0]%
0`%
07%
08%
0:%
0;%
0B%
0C%
0E%
15.
16.
1@.
1x-
1y-
1%.
1]-
1^-
1h-
1B-
1C-
1M-
1'-
12-
1j,
1k,
1u,
1O,
1Z,
14,
1?,
1w+
1$,
1\+
1g+
1A+
1L+
1&+
1'+
11+
1i*
1t*
1N*
1O*
1Y*
13*
1>*
1v)
1w)
1#*
14"
03"
0L$
1*$
0"*
0k)
0u)
0X*
0C*
0s*
0h*
00+
0y*
0%+
0[+
0_,
01-
07-
0A-
0R-
0$.
0m-
0w-
0?.
0*.
04.
1D%
1?%
15%
14%
1_%
1u%
1k%
1l%
17&
12&
1)&
1R&
1M&
1C&
1B&
1j&
1*'
1''
1z&
1E'
1B'
1x'
1m'
15(
1)(
1S(
1N(
1_(
1`(
1z(
1F)
1C)
17)
16)
1\)
1R)
1S)
0"&
0=&
0&
0'
00'
0(
0*
0#(
0+
0t(
0/
0g)
10
1-
1*
1'
1$
1#
0d)
0>)
0B)
0V(
0O(
03(
0k'
0v'
0@'
0A'
0%'
0&'
0h&
0J&
0U&
0N&
0:&
03&
0j%
0}%
0[%
0<%
0G%
0@%
1*.
1+.
1m-
1n-
17-
1{,
1Q+
1y*
1z*
1^*
1_*
1D*
1k)
1l)
0'*
0]*
0x*
05+
06-
0).
0D.
13%
12%
1i%
1r%
1&&
1A&
1@&
1p&
1-'
1H'
1~'
1s'
1;(
1B(
14)
1P)
0L)
0'(
0i'
0j'
04'
0w&
0\&
0X&
0h%
0J%
1@
1?
1<
15
14
13
11
1!
1"&
1%
1#(
1/
0*
0#
0:$
17$
14$
13$
10$
0.$
1,$
0+$
#2410
b11001 F
#2450
0i
0G
0f
#2500
1i
1G
1f
0J$
1G$
1D$
1C$
1@$
0>$
1<$
0;$
b111 A
b1 B
b1111111101000100 D
b0 E
0C
b0 J
b1001101000001011 K
b11010 k
0T
0R
0c
1b
0a
0`
0]
1\
1[
1X
1U
0O
1M
1L
0e
0*$
0h)
0i)
0M)
0N)
02)
0u(
0Z(
0[(
0?(
0$(
0g'
0L'
01'
0t&
0Y&
0Z&
0>&
0?&
0#&
0$&
0f%
0K%
0L%
0Z)
0[)
0e)
0?)
0@)
0J)
0$)
0%)
0/)
0g(
0h(
0r(
0L(
0W(
01(
02(
0<(
0t'
0!(
0Y'
0d'
0>'
0I'
0#'
0.'
0f&
0q&
0K&
0L&
0V&
00&
0;&
0s%
0t%
0~%
0X%
0c%
0=%
0>%
0H%
1C.
1D.
1(.
1).
1k-
1P-
15-
16-
1x,
1],
1B,
1',
1j+
1O+
14+
15+
1w*
1x*
1\*
1]*
1A*
1&*
1'*
1:"
04"
19"
01
0%*
03
04
0v*
05
03+
0i+
0<
0O-
0?
0'.
0@
0B.
1G%
1<%
1}%
1h%
1:&
1/&
1U&
1J&
1"'
1&(
1V(
1f(
1w(
1I)
1>)
1d)
1Y)
1J%
1#
1=&
1X&
10'
1,
1t(
1L)
1g)
0-
0'
0P)
05)
0B(
0v&
0A&
0%&
0&&
0i%
03%
1@
1?
1=
17
15
14
11
1L%
1$&
1?&
1Z&
1[(
1N)
1i)
00
0/
0,
0%
0$
0#
0!
1:$
07$
04$
03$
00$
1.$
0,$
1+$
#2501
0`!
1a!
0c!
1e!
1h!
1i!
1l!
0o!
1`)
1;.
0m(
0H-
0z'
0U,
0_'
0:,
0l&
0G+
16&
1o*
0^%
09*
1C%
1|)
0x)
0?%
15*
1Z%
0k*
02&
1C+
1h&
16,
1['
1Q,
1v'
1D-
1i(
07.
0\)
1?.
0L-
0Y,
0>,
0K+
1s*
0=*
1"*
0l)
1)*
0_*
17+
1*,
1E,
18-
0+.
0:$
17$
14$
13$
10$
0.$
1,$
0+$
#2510
b11010 F
#2550
0i
0G
0f
#2600
1i
1G
1f
b11 A
b110 B
b1010110111011100 D
b10 E
1C
b1010100000101111 J
b1101101100010010 K
b11011 k
1S
1a
1`
1]
0[
0X
0V
0Q
1P
1O
0L
1e
1<"
1h)
1M)
12)
1u(
1Z(
1?(
1$(
1g'
1L'
11'
1t&
1Y&
1>&
1#&
1f%
1K%
0C.
0(.
0).
0k-
0P-
0Q-
05-
06-
0x,
0],
0^,
0B,
0C,
0',
0j+
0O+
0P+
04+
05+
0w*
0\*
0]*
0A*
0B*
0&*
05.
06.
0@.
0x-
0y-
0%.
0]-
0^-
0h-
0B-
0C-
0M-
0'-
02-
0j,
0k,
0u,
0O,
0Z,
04,
0?,
0w+
0$,
0\+
0g+
0A+
0L+
0&+
0'+
01+
0i*
0t*
0N*
0O*
0Y*
03*
0>*
0v)
0w)
0#*
1/.
10.
12.
13.
1:.
1=.
1r-
1s-
1u-
1v-
1}-
1~-
1".
1W-
1Z-
1[-
1b-
1e-
1<-
1=-
1?-
1@-
1G-
1H-
1J-
1!-
1$-
1,-
1--
1/-
1d,
1g,
1h,
1o,
1r,
1I,
1L,
1T,
1U,
1W,
1.,
11,
19,
1:,
1<,
1q+
1t+
1|+
1!,
1V+
1W+
1Y+
1a+
1d+
1;+
1>+
1F+
1G+
1I+
1~*
1!+
1#+
1$+
1++
1,+
1.+
1c*
1d*
1f*
1n*
1q*
1H*
1K*
1L*
1S*
1T*
1V*
1-*
10*
18*
19*
1;*
1p)
1q)
1s)
1t)
1{)
1~)
09"
17"
1"#
0<"
0})
0n)
0m)
0:*
05*
0P*
0F*
0G*
0p*
0`*
0b*
0-+
0(+
0|*
0{*
0C+
0E+
0c+
0`+
0S+
0U+
0~+
0{+
06,
0Q,
0S,
0H,
0n,
0b,
0.-
0)-
0D-
0:-
09-
0;-
0U-
0!.
0z-
0|-
0p-
0o-
0-.
0,.
0..
1u)
1=*
1X*
1C*
1h*
10+
1%+
1K+
1[+
1>,
1Y,
1_,
11-
1L-
1A-
1R-
1$.
1w-
14.
1%*
12
13
1v*
13+
16
1i+
19
1:
1<
1O-
1'.
1B.
0J%
0"&
0X&
0>(
0t(
01)
0L)
0g)
10
1/
1.
1-
1+
1%
1#
1!
0@
07
04
01
0n-
08-
0{,
0E,
0*,
0Q+
07+
0z*
0^*
0D*
0)*
1,.
16.
1y-
1z-
1{-
1^-
19-
1C-
1*-
1k,
1l,
1F,
1Q,
1y+
1z+
1S+
1^+
1_+
1C+
1'+
1)+
1`*
1l*
1E*
1O*
16*
1w)
1y)
0$*
0k)
0?*
0C*
0u*
02+
0y*
0h+
0%,
0_,
03-
07-
0R-
0&.
0m-
0*.
1B*
1]*
15+
1P+
1C,
1^,
16-
1Q-
1).
0?
0=
0<
0:
09
06
05
03
02
1n-
1{,
1m+
1R+
1z*
1_*
1)*
1l)
0'*
0B*
0x*
05+
0k+
0(,
06-
0).
1?
1<
18
17
15
14
12
11
10#
1/#
1.#
1,#
1+#
1*#
1(#
1'#
1%#
1##
#2610
b11011 F
#2650
0i
0G
0f
#2700
1i
1G
1f
1@#
1?#
1>#
1<#
1;#
1:#
18#
17#
15#
13#
b1110100101001110 D
b111 E
0C
b11100 k
1T
1R
1c
0`
0]
0Z
1V
0e
0"#
0:"
12"
07"
00#
0/#
0.#
0,#
0+#
0*#
0(#
0'#
0%#
0##
#2701
10!
12!
14!
15!
17!
18!
19!
1;!
1<!
1=!
0Y-
0>-
0#-
0K,
00,
0s+
0=+
0"+
0J*
0r)
1n)
1F*
1|*
19+
1o+
1,,
1G,
1},
1:-
1U-
0^-
0C-
0(-
0P,
05,
0x+
0B+
0'+
0O*
0w)
1k)
1C*
1y*
16+
1l+
1),
1D,
1z,
17-
1R-
10#
1/#
1.#
1,#
1+#
1*#
1(#
1'#
1%#
1##
#2710
b11100 F
#2750
0i
0G
0f
#2800
1i
1G
1f
b110 A
b0 B
b1000011101111001 D
b0 E
b1101101100010010 J
b11001001001001 K
b11101 k
0T
0S
0R
1d
0c
0b
1`
1_
1[
1Z
0Y
0W
0V
0P
0O
0N
1L
0h)
0M)
02)
0u(
0Z(
0?(
0$(
0g'
0L'
01'
0t&
0Y&
0>&
0#&
0f%
0K%
1T)
1U)
1W)
1X)
1_)
1b)
19)
1:)
1<)
1=)
1D)
1E)
1G)
1|(
1!)
1")
1))
1,)
1a(
1b(
1d(
1e(
1l(
1m(
1o(
1F(
1I(
1Q(
1R(
1T(
1+(
1.(
1/(
16(
19(
1n'
1q'
1y'
1z'
1|'
1S'
1V'
1^'
1_'
1a'
18'
1;'
1C'
1F'
1{&
1|&
1~&
1('
1+'
1`&
1c&
1k&
1l&
1n&
1E&
1F&
1H&
1I&
1P&
1Q&
1S&
1*&
1+&
1-&
15&
18&
1m%
1p%
1q%
1x%
1y%
1{%
1R%
1U%
1]%
1^%
1`%
17%
18%
1:%
1;%
1B%
1E%
1C.
1(.
1).
1k-
1P-
15-
16-
1x,
1],
1B,
1',
1(,
1j+
1k+
1O+
14+
15+
1w*
1x*
1\*
1A*
1B*
1&*
1'*
15.
1@.
1x-
1%.
1&.
1]-
1^-
1h-
1B-
1C-
1M-
1'-
1(-
12-
13-
1j,
1u,
1O,
1P,
1Z,
14,
15,
1?,
1w+
1x+
1$,
1%,
1\+
1g+
1h+
1A+
1B+
1L+
1&+
1'+
11+
12+
1i*
1t*
1u*
1N*
1O*
1Y*
13*
1>*
1?*
1v)
1w)
1#*
1$*
1:"
02"
19"
0l)
0k)
0)*
0C*
0M*
0_*
0h*
0z*
0y*
0K+
06+
0R+
0f+
0[+
0m+
0#,
0l+
0),
0Y,
0D,
0N,
0t,
0{,
0z,
07-
0A-
0R-
0n-
0$.
04.
01
02
04
05
07
08
0<
0?
0D%
05%
09%
04%
0_%
0Z%
0u%
0k%
0o%
0l%
07&
0'&
0)&
0R&
0M&
0C&
0G&
0B&
0h&
0j&
0b&
0*'
0''
0x&
0z&
0E'
0B'
0:'
0['
0U'
0v'
0x'
0p'
0m'
05(
0)(
0S(
0N(
0H(
0i(
0_(
0c(
0^(
0`(
0z(
0~(
0F)
0A)
0C)
07)
06)
0R)
0Q)
0S)
1J%
1"&
1X&
1>(
1t(
11)
1L)
1g)
00
0/
0.
0-
0+
0%
0#
0!
1Q)
1[)
1@)
1A)
1B)
1z(
1^(
1_(
1D(
1O(
12(
13(
1k'
1l'
1v'
1Q'
16'
1@'
1A'
1x&
1%'
1&'
1^&
1h&
1C&
1N&
1'&
13&
1j%
1k%
1[%
15%
1@%
1*.
1n-
17-
1`,
1D,
1E,
1m+
1Q+
1R+
17+
1^*
1C*
0[*
0v*
0i+
0\,
0O-
0B.
0I%
0d%
0<&
0W&
0g&
0/'
0J'
0?'
0Z'
0u'
0&(
0X(
0M(
0K)
04)
0O)
15)
1A(
1B(
1i'
1N'
13'
14'
1w&
1[&
1A&
1&&
1N%
13%
1@
1=
1:
17
14
13
0L%
0g%
0?&
0Z&
02'
0M'
0[(
0N)
1/
1,
1(
1'
1%
1$
1"
1!
#2810
b11101 F
#2850
0i
0G
0f
#2900
1i
1G
1f
b11 A
b100 B
b1100101001011001 D
b11 E
1C
b1010100000101111 J
b11101100010 K
b11110 k
1T
1S
0_
0\
0Z
1Y
1V
1O
1N
0L
1e
1<"
1h)
1M)
1N)
12)
1u(
1Z(
1[(
1?(
1$(
1g'
1L'
1M'
11'
12'
1t&
1Y&
1Z&
1>&
1?&
1#&
1f%
1g%
1K%
1L%
0T)
0U)
0W)
0X)
0_)
0b)
09)
0:)
0<)
0=)
0D)
0E)
0G)
0|(
0!)
0")
0))
0,)
0a(
0b(
0d(
0e(
0l(
0m(
0o(
0F(
0I(
0Q(
0R(
0T(
0+(
0.(
0/(
06(
09(
0n'
0q'
0y'
0z'
0|'
0S'
0V'
0^'
0_'
0a'
08'
0;'
0C'
0F'
0{&
0|&
0~&
0('
0+'
0`&
0c&
0k&
0l&
0n&
0E&
0F&
0H&
0I&
0P&
0Q&
0S&
0*&
0+&
0-&
05&
08&
0m%
0p%
0q%
0x%
0y%
0{%
0R%
0U%
0]%
0^%
0`%
07%
08%
0:%
0;%
0B%
0E%
0C.
0(.
0).
0k-
0P-
05-
0x,
0y,
0],
0^,
0B,
0',
0(,
0j+
0k+
0O+
0P+
04+
0w*
0\*
0A*
0&*
16"
09"
0<"
1D#
1[*
1v*
16
1i+
18
1\,
1;
1O-
1?
1B.
1D%
19%
14%
1_%
1Z%
1u%
1o%
1l%
17&
1)&
1R&
1M&
1G&
1B&
1j&
1b&
1*'
1''
1z&
1E'
1B'
1:'
1['
1U'
1x'
1p'
1m'
15(
1)(
1S(
1N(
1H(
1i(
1c(
1`(
1~(
1F)
1C)
17)
16)
1R)
1S)
0!
0J%
0"
0"&
0$
0%
0X&
0s&
0'
0(
0K'
0f'
0#(
0,
0Y(
0t(
01)
0/
1.
1-
1,
1*
1)
1(
1&
1%
1#
1!
0[)
0@)
0B)
0D(
0O(
02(
03(
0k'
0l'
0Q'
06'
0@'
0A'
0%'
0&'
0^&
0N&
03&
0j%
0[%
0@%
0@
0=
04
03
1I%
1d%
1<&
1W&
1g&
1/'
1J'
1?'
1Z'
1u'
1&(
1X(
1M(
1K)
14)
1O)
0g)
0L)
05)
0A(
0B(
0>(
0i'
0N'
03'
04'
0w&
0[&
0A&
0&&
0N%
03%
1s&
1K'
1f'
1#(
1+
1Y(
1/
10
0,
0*
0)
0(
0&
0S#
0R#
1P#
0O#
1N#
1K#
0G#
1F#
#2910
b11110 F
#2950
0i
0G
0f
#3000
1i
1G
1f
0c#
0b#
1`#
0_#
1^#
1[#
0W#
1V#
b1 A
b101 B
b1110001001110110 D
b10 E
0C
b1001101000001011 J
b110110011011010 K
b11111 k
0T
0d
1c
1b
0a
1_
0Y
1W
1Q
0M
0e
0D#
1Z)
1[)
1e)
1?)
1@)
1J)
1$)
1%)
1/)
1g(
1h(
1r(
1L(
1W(
11(
12(
1<(
1t'
1!(
1Y'
1d'
1>'
1I'
1#'
1.'
1f&
1q&
1K&
1L&
1V&
10&
1;&
1s%
1t%
1~%
1X%
1c%
1=%
1>%
1H%
0/.
00.
02.
03.
0:.
0=.
0r-
0s-
0u-
0v-
0}-
0~-
0".
0W-
0Z-
0[-
0b-
0e-
0<-
0=-
0?-
0@-
0G-
0H-
0J-
0!-
0$-
0,-
0--
0/-
0d,
0g,
0h,
0o,
0r,
0I,
0L,
0T,
0U,
0W,
0.,
01,
09,
0:,
0<,
0q+
0t+
0|+
0!,
0V+
0W+
0Y+
0a+
0d+
0;+
0>+
0F+
0G+
0I+
0~*
0!+
0#+
0$+
0++
0,+
0.+
0c*
0d*
0f*
0n*
0q*
0H*
0K*
0L*
0S*
0T*
0V*
0-*
00*
08*
09*
0;*
0p)
0q)
0s)
0t)
0{)
0~)
17"
06"
1})
1r)
1m)
1:*
15*
1P*
1J*
1G*
1p*
1b*
1-+
1(+
1"+
1{*
1E+
1=+
1c+
1`+
1U+
1~+
1{+
1s+
16,
10,
1S,
1K,
1H,
1n,
1b,
1.-
1)-
1#-
1D-
1>-
1;-
1Y-
1!.
1|-
1p-
1o-
1-.
1..
02%
0<%
0b%
0}%
0h%
0/&
0U&
0@&
0J&
0p&
0"'
0c'
0~'
0&(
0V(
0q(
0\(
0f(
0w(
0I)
04)
0>)
0O)
0Y)
1O)
14)
15)
11)
1\(
1](
1B(
1>(
1j'
1O'
1v&
1\&
1@&
1A&
1%&
1"&
1i%
1N%
12%
0w-
0{-
0L-
0},
01-
0*-
0l,
0F,
0G,
0,,
0>,
0o+
0y+
0z+
0^+
0_+
09+
0%+
00+
0)+
0l*
0E*
0X*
0=*
06*
0u)
0y)
1k)
1)*
1D*
1M*
1z*
1y*
1f+
1#,
1*,
1N,
1t,
1{,
18-
1m-
0#
0=&
00'
0+
0.
1'
1$
0Q-
06-
0`,
0D,
0C,
0m+
0R+
05+
0C*
0]*
0B*
12
13
15
1k+
1(,
19
1y,
1<
1=
0;
08
07
1S#
1R#
0P#
1O#
0N#
0K#
1G#
0F#
#3001
1A!
0B!
1F!
1I!
0J!
1K!
0M!
0N!
1=)
1v-
1")
1[-
0J(
0%-
1/(
1h,
0r'
0M,
0!'
0Z+
1q%
1L*
0V%
01*
1+*
1P%
0F*
0k%
1T+
1y&
1G,
1l'
0b,
0)(
1},
1D(
0U-
0z(
0p-
07)
0S#
0R#
1P#
0O#
1N#
1K#
0G#
1F#
#3010
b11111 F
#3050
0i
0G
0f
#3100
1i
1G
1f
b101 A
b110 B
b1001101100000100 D
b111 E
1C
b110110011011010 J
b1101101100010010 K
b100000 k
1T
1R
0c
0`
0_
0^
1\
1Y
1X
0W
0V
0Q
1P
1L
1e
1"#
0h)
0M)
0N)
02)
0u(
0v(
0Z(
0[(
0?(
0$(
0%(
0g'
0h'
0L'
01'
0t&
0u&
0Y&
0Z&
0>&
0#&
0$&
0f%
0g%
0K%
05.
06.
0@.
0x-
0%.
0]-
0h-
0B-
0C-
0M-
0'-
0(-
02-
0j,
0u,
0O,
0P,
0Z,
04,
0?,
0w+
0$,
0\+
0]+
0g+
0A+
0L+
0&+
0'+
01+
0i*
0t*
0N*
0Y*
03*
04*
0>*
0v)
0w)
0#*
1/.
10.
12.
13.
1:.
1=.
1r-
1s-
1u-
1}-
1~-
1".
1W-
1Z-
1b-
1e-
1<-
1=-
1?-
1@-
1G-
1H-
1J-
1!-
1$-
1%-
1,-
1--
1/-
1d,
1g,
1o,
1r,
1I,
1L,
1M,
1T,
1U,
1W,
1.,
11,
19,
1:,
1<,
1q+
1t+
1|+
1!,
1V+
1W+
1Y+
1Z+
1a+
1d+
1;+
1>+
1F+
1G+
1I+
1~*
1!+
1#+
1$+
1++
1,+
1.+
1c*
1d*
1f*
1n*
1q*
1H*
1K*
1S*
1T*
1V*
1-*
10*
11*
18*
19*
1;*
1p)
1q)
1s)
1t)
1{)
1~)
0:"
12"
07"
0"#
1n$
0})
0n)
0r)
0m)
0:*
05*
0+*
0P*
0J*
0G*
0p*
0`*
0b*
0-+
0(+
0|*
0"+
0{*
0C+
0E+
0=+
0c+
0`+
0T+
0S+
0U+
0~+
0{+
0s+
06,
00,
0Q,
0S,
0G,
0K,
0H,
0n,
0.-
0)-
0},
0#-
0D-
0:-
0>-
09-
0;-
0Y-
0!.
0z-
0|-
0o-
0-.
0,.
0..
1u)
1=*
1(*
1X*
1h*
10+
1%+
1K+
1[+
1>,
1Y,
1D,
11-
1z,
1L-
1A-
1$.
1w-
14.
1J%
1"
1#
1=&
1X&
1&
10'
1)
1*
1,
1t(
1L)
1g)
00
0'
0$
0!
0m-
0n-
08-
0{,
0E,
0*,
07+
0z*
0^*
0D*
0)*
1,.
16.
1z-
1{-
1U-
19-
1:-
1},
1*-
1l,
1F,
1G,
1Q,
1,,
1o+
1y+
1z+
1S+
1]+
1^+
1_+
19+
1C+
1|*
1)+
1`*
1l*
1E*
1F*
14*
16*
1n)
1y)
0$*
0?*
0(*
0O*
0u*
02+
0B+
0h+
0Q+
0%,
0x+
05,
03-
0^-
0&.
0*.
1B*
1]*
15+
1P+
1C,
1^,
16-
1Q-
1).
0?
0=
0<
0:
09
06
05
03
02
1n-
1R-
1{,
1),
1l+
1m+
1R+
16+
1z*
1_*
1C*
1)*
1l)
0'*
0B*
0x*
05+
0k+
0(,
06-
0).
1?
1<
18
17
15
14
12
11
1|$
1v$
1u$
1s$
1r$
1o$
#3110
b100000 F
#3150
0i
0G
0f
#3200
1i
1G
1f
1.%
1(%
1'%
1%%
1$%
1!%
b100 A
b0 B
b1101100100101000 D
b101 E
b11101100010 J
b11001001001001 K
b100001 k
0S
0b
1a
1_
0[
1V
0P
0O
0N
1T)
1U)
1W)
1X)
1_)
1b)
19)
1:)
1<)
1D)
1E)
1G)
1|(
1!)
1))
1,)
1a(
1b(
1d(
1e(
1l(
1m(
1o(
1F(
1I(
1J(
1Q(
1R(
1T(
1+(
1.(
16(
19(
1n'
1q'
1r'
1y'
1z'
1|'
1S'
1V'
1^'
1_'
1a'
18'
1;'
1C'
1F'
1{&
1|&
1~&
1!'
1('
1+'
1`&
1c&
1k&
1l&
1n&
1E&
1F&
1H&
1I&
1P&
1Q&
1S&
1*&
1+&
1-&
15&
18&
1m%
1p%
1x%
1y%
1{%
1R%
1U%
1V%
1]%
1^%
1`%
17%
18%
1:%
1;%
1B%
1E%
1C.
1(.
1).
1k-
1P-
15-
16-
1x,
1],
1B,
1',
1(,
1j+
1k+
1O+
14+
15+
1w*
1x*
1\*
1A*
1B*
1&*
1'*
15.
1@.
1x-
1%.
1&.
1]-
1^-
1h-
1B-
1C-
1M-
1'-
1(-
12-
13-
1j,
1u,
1O,
1P,
1Z,
14,
15,
1?,
1w+
1x+
1$,
1%,
1\+
1g+
1h+
1A+
1B+
1L+
1&+
1'+
11+
12+
1i*
1t*
1u*
1N*
1O*
1Y*
13*
1>*
1?*
1v)
1w)
1#*
1$*
14"
02"
0n$
1*$
0l)
0k)
0)*
0C*
0M*
0_*
0h*
0z*
0y*
0K+
06+
0R+
0f+
0[+
0m+
0#,
0l+
0),
0Y,
0D,
0N,
0t,
0{,
0z,
07-
0A-
0R-
0n-
0$.
04.
01
02
04
05
07
08
0<
0?
0D%
05%
09%
04%
0_%
0Z%
0P%
0u%
0o%
0l%
07&
0'&
0)&
0R&
0M&
0C&
0G&
0B&
0h&
0j&
0b&
0*'
0''
0y&
0x&
0z&
0E'
0B'
0:'
0['
0U'
0v'
0x'
0l'
0p'
0m'
05(
0S(
0N(
0D(
0H(
0i(
0_(
0c(
0^(
0`(
0~(
0F)
0A)
0C)
06)
0R)
0Q)
0S)
1Q)
1>)
1A)
1B)
1z(
1^(
1_(
1q(
1D(
1V(
1O(
13(
1k'
1l'
1v'
1Q'
1c'
16'
1@'
1A'
1x&
1%'
1&'
1^&
1h&
1J&
1C&
1U&
1N&
1'&
13&
1j%
1k%
1}%
1b%
1[%
1<%
15%
1@%
1*.
1n-
17-
1`,
1D,
1E,
1m+
1Q+
1R+
17+
1^*
1C*
0[*
0v*
0i+
0\,
0O-
0B.
02%
0N%
0i%
0r%
0A&
0@&
0-'
0H'
0O'
0s'
0;(
0B(
0](
04)
1v(
1[(
1'(
1i'
1h'
14'
1w&
1Z&
1h%
1$&
1g%
1@
1=
1:
17
14
13
0"
0#
0%
02'
0M'
0)
0@(
0,
0-
1+
1(
1'
09$
06$
15$
04$
03$
12$
00$
1.$
0-$
1+$
0|$
0v$
0u$
0s$
0r$
0o$
#3201
1""
1%"
1&"
1("
1)"
1/"
1|$
1v$
1u$
1s$
1r$
1o$
#3210
b100001 F
#3250
0i
0G
0f
#3300
1i
1G
1f
0I$
0F$
1E$
0D$
0C$
1B$
0@$
1>$
0=$
1;$
b110 A
b100010100011100 D
b1101101100010010 J
b100010 k
1b
1`
0_
1Z
0Y
0X
0U
1M
0Z)
0e)
0?)
0J)
0K)
0$)
0%)
0/)
0g(
0h(
0r(
0L(
0M(
0W(
0X(
01(
0<(
0t'
0u'
0!(
0Y'
0Z'
0d'
0>'
0?'
0I'
0J'
0#'
0.'
0/'
0f&
0g&
0q&
0K&
0L&
0V&
0W&
00&
0;&
0<&
0s%
0t%
0~%
0X%
0c%
0d%
0=%
0>%
0H%
0I%
13%
12%
1N%
1r%
1&&
1/&
1A&
1@&
1p&
1[&
1-'
1"'
1H'
13'
1N'
1~'
1s'
1;(
1B(
1A(
1f(
1w(
1I)
1Y)
0O)
0[(
0'(
0j'
0v&
0\&
0Z&
0%&
0?&
0g%
0L%
1!
1"
1$
1%
1u&
1%(
1@(
1,
0+
0*
0&
18$
16$
05$
10$
0/$
0.$
0+$
#3301
1`!
0b!
1c!
0e!
1g!
0h!
0i!
1j!
0k!
0n!
#3310
b100010 F
#3350
0i
0G
0f
#3400
1i
1G
1f
1H$
1F$
0E$
1@$
0?$
0>$
0;$
b100 A
b110 B
b100011011010 D
0C
b11101100010 J
b1101101100010010 K
b100011 k
1c
0b
1^
1]
0\
0Z
1Y
0V
1P
1O
0M
0e
0*$
1Z)
1e)
1?)
1J)
1K)
1$)
1%)
1/)
1g(
1h(
1r(
1L(
1M(
1W(
1X(
11(
1<(
1t'
1u'
1!(
1Y'
1Z'
1d'
1>'
1?'
1I'
1J'
1#'
1.'
1/'
1f&
1g&
1q&
1K&
1L&
1V&
1W&
10&
1;&
1<&
1s%
1t%
1~%
1X%
1c%
1d%
1=%
1>%
1H%
1I%
0C.
0(.
0).
0k-
0P-
05-
0x,
0y,
0],
0^,
0B,
0',
0(,
0j+
0k+
0O+
0P+
04+
0w*
0\*
0A*
0&*
05.
0@.
0x-
0%.
0&.
0]-
0^-
0h-
0B-
0C-
0M-
0'-
0(-
02-
03-
0j,
0u,
0O,
0P,
0Z,
04,
05,
0?,
0w+
0x+
0$,
0%,
0\+
0g+
0h+
0A+
0B+
0L+
0&+
0'+
01+
02+
0i*
0t*
0u*
0N*
0O*
0Y*
03*
0>*
0?*
0v)
0w)
0#*
0$*
1l)
1k)
1)*
1M*
1_*
1h*
1z*
1y*
1K+
16+
1f+
1[+
1#,
1l+
1),
1Y,
1N,
1t,
1{,
1z,
1A-
1R-
1$.
14.
1[*
1v*
16
1i+
18
1\,
1;
1O-
1?
1B.
03%
02%
0N%
0h%
0r%
0&&
0/&
0A&
0@&
0p&
0[&
0w&
0-'
0"'
04'
0H'
03'
0N'
0~'
0i'
0s'
0;(
0B(
0A(
0\(
0f(
0w(
05)
0I)
0Y)
1O)
15)
1\(
1[(
1'(
1i'
1j'
14'
1v&
1w&
1\&
1Z&
1%&
1?&
1h%
1g%
1L%
0@
0=
04
03
0*.
06-
0`,
0E,
0Q+
07+
05+
0^*
0x*
0B*
0'*
11
12
14
15
1P+
1^,
1y,
1<
0!
0"
0$
0%
0u&
0%(
0@(
0,
1+
1*
1&
0;
0:
06
08$
06$
15$
00$
1/$
1.$
1+$
#3401
0`!
0c!
0d!
1e!
0j!
1k!
1m!
18$
16$
05$
10$
0/$
0.$
0+$
#3410
b100011 F
#3450
0i
0G
0f
#3500
1i
1G
1f
b0 A
b11 B
b1001100110111010 D
b110 E
b11001001001001 J
b1100101001011001 K
b100100 k
0T
1S
1_
0^
1\
1X
1U
1Q
0O
0L
1h)
1M)
1N)
12)
1u(
1Z(
1?(
1@(
1$(
1%(
1g'
1L'
1M'
11'
12'
1t&
1u&
1Y&
1>&
1#&
1f%
1K%
1C.
1(.
1).
1k-
1P-
15-
16-
1x,
1],
1B,
1',
1(,
1j+
1k+
1O+
14+
15+
1w*
1x*
1\*
1A*
1B*
1&*
1'*
0/.
00.
02.
03.
0:.
0=.
0r-
0s-
0u-
0}-
0".
0W-
0Z-
0b-
0c-
0e-
0f-
0<-
0=-
0?-
0@-
0G-
0H-
0J-
0!-
0$-
0%-
0,-
0--
0/-
0d,
0g,
0o,
0r,
0I,
0L,
0M,
0T,
0W,
0.,
01,
09,
0<,
0q+
0t+
0|+
0}+
0!,
0",
0V+
0W+
0Y+
0Z+
0a+
0d+
0e+
0;+
0>+
0F+
0G+
0I+
0~*
0!+
0#+
0$+
0++
0.+
0/+
0c*
0d*
0f*
0n*
0q*
0r*
0H*
0K*
0S*
0V*
0-*
00*
01*
08*
09*
0;*
0p)
0q)
0s)
0t)
0{)
0~)
0!*
13"
04"
1})
1r)
1m)
1:*
15*
1+*
1J*
1G*
1p*
1b*
1-+
1"+
1{*
1E+
1=+
1c+
1`+
1T+
1U+
1~+
1{+
1s+
10,
1S,
1K,
1H,
1n,
1.-
1)-
1#-
1D-
1>-
1;-
1`-
1_-
1Y-
1!.
1|-
1o-
1-.
1..
01
0%*
02
0[*
04
05
03+
0N+
07
08
0&,
0A,
0\,
0<
04-
0O-
0j-
0?
0"&
0=&
0&
0'
00'
0(
0*
0#(
0+
0t(
0/
0g)
10
1-
1*
1'
1$
1#
1>
1=
1<
1:
19
18
16
15
13
11
06.
0z-
0{-
0U-
0i-
0*-
0l,
0F,
0Q,
0,,
0o+
0]+
0^+
09+
0E*
0F*
04*
06*
1?*
1(*
1O*
1B+
1Q+
1x+
15,
13-
1S-
1^-
1&.
1*.
0B.
0n-
0R-
0{,
0),
0l+
0i+
06+
0C*
0@*
0)*
12
1[*
1N+
17
1&,
1A,
1j-
1@
0>
09
08
06
03
#3510
b100100 F
#3550
0i
0G
0f
#3600
1i
1G
1f
b101 A
b10 B
b10111001 D
b111 E
b100010100011100 J
b1010110111011100 K
b100101 k
1T
1d
0c
0\
0Y
0X
0U
0Q
1N
1L
0h)
0M)
0N)
02)
0u(
0Z(
0?(
0@(
0$(
0%(
0g'
0L'
0M'
01'
02'
0t&
0u&
0Y&
0>&
0#&
0f%
0K%
0T)
0U)
0W)
0X)
0_)
0b)
09)
0:)
0<)
0D)
0G)
0|(
0!)
0))
0*)
0,)
0-)
0a(
0b(
0d(
0e(
0l(
0m(
0o(
0F(
0I(
0J(
0Q(
0R(
0T(
0+(
0.(
06(
09(
0n'
0q'
0r'
0y'
0|'
0S'
0V'
0^'
0a'
08'
0;'
0C'
0D'
0F'
0G'
0{&
0|&
0~&
0!'
0('
0+'
0,'
0`&
0c&
0k&
0l&
0n&
0E&
0F&
0H&
0I&
0P&
0S&
0T&
0*&
0+&
0-&
05&
08&
09&
0m%
0p%
0x%
0{%
0R%
0U%
0V%
0]%
0^%
0`%
07%
08%
0:%
0;%
0B%
0E%
0F%
1/.
10.
12.
13.
1:.
1=.
1r-
1s-
1u-
1}-
1".
1W-
1Z-
1b-
1c-
1e-
1f-
1<-
1=-
1?-
1@-
1G-
1H-
1J-
1!-
1$-
1%-
1,-
1--
1/-
1d,
1g,
1o,
1r,
1I,
1L,
1M,
1T,
1W,
1.,
11,
19,
1<,
1q+
1t+
1|+
1}+
1!,
1",
1V+
1W+
1Y+
1Z+
1a+
1d+
1e+
1;+
1>+
1F+
1G+
1I+
1~*
1!+
1#+
1$+
1++
1.+
1/+
1c*
1d*
1f*
1n*
1q*
1r*
1H*
1K*
1S*
1V*
1-*
10*
11*
18*
19*
1;*
1p)
1q)
1s)
1t)
1{)
1~)
1!*
03"
12"
0y)
0})
0n)
0r)
0m)
0:*
05*
0+*
0J*
0G*
0l*
0p*
0`*
0b*
0)+
0-+
0|*
0"+
0{*
0C+
0E+
0=+
0_+
0c+
0`+
0T+
0S+
0U+
0z+
0~+
0y+
0{+
0s+
00,
0S,
0G,
0K,
0H,
0n,
0.-
0)-
0},
0#-
0D-
0:-
0>-
09-
0;-
0`-
0_-
0Y-
0!.
0|-
0o-
0-.
0,.
0..
1D%
19%
14%
1_%
1Z%
1P%
1o%
1l%
17&
1)&
1R&
1G&
1B&
1j&
1b&
1*'
1''
1y&
1z&
1E'
1B'
1:'
1U'
1x'
1p'
1m'
15(
1S(
1N(
1H(
1i(
1c(
1`(
1')
1&)
1~(
1F)
1C)
16)
1R)
1S)
1"&
1=&
1&
10'
1(
1#(
1+
1t(
1/
1g)
00
0-
0$
0#
0>)
0A)
0B)
0z(
0.)
0q(
0V(
0O(
03(
0k'
0v'
0Q'
06'
0%'
0^&
0J&
0j%
0k%
0b%
0[%
0<%
1,.
16.
1z-
1{-
1U-
1i-
19-
1:-
1},
1*-
1l,
1F,
1G,
1Q,
1,,
1o+
1y+
1z+
1S+
1]+
1^+
1_+
19+
1C+
1|*
1)+
1`*
1l*
1E*
1F*
14*
16*
1n)
1y)
0?*
0(*
0O*
0B+
0Q+
0x+
05,
03-
0S-
0^-
0&.
0*.
12%
1N%
1r%
1@&
1-'
1~'
1s'
1;(
1B(
1](
1x(
1I)
14)
05)
03)
0v(
0[(
0'(
0i'
0j'
0w&
0h%
0g%
1B.
1n-
1R-
1{,
1),
1l+
1i+
16+
1C*
1@*
1)*
02
0[*
0N+
07
0&,
0A,
0j-
0@
1"
12'
1%(
1@(
1,
1-
1.
1N)
0/
0+
0*
0'
1>
19
18
16
13
#3610
b100101 F
#3650
0i
0G
0f
#3700
1i
1G
1f
b0 A
b110 B
b1101010110110 D
b101 E
b11001001001001 J
b1101101100010010 K
b100110 k
0S
0d
1c
1b
0a
1[
1Y
1X
1O
0N
0L
1h)
1M)
12)
13)
1u(
1v(
1Z(
1[(
1?(
1$(
1g'
1L'
1M'
11'
1t&
1u&
1Y&
1>&
1#&
1f%
1g%
1K%
1T)
1U)
1W)
1X)
1_)
1b)
19)
1:)
1<)
1D)
1G)
1|(
1!)
1))
1*)
1,)
1-)
1a(
1b(
1d(
1e(
1l(
1m(
1o(
1F(
1I(
1J(
1Q(
1R(
1T(
1+(
1.(
16(
19(
1n'
1q'
1r'
1y'
1|'
1S'
1V'
1^'
1a'
18'
1;'
1C'
1D'
1F'
1G'
1{&
1|&
1~&
1!'
1('
1+'
1,'
1`&
1c&
1k&
1l&
1n&
1E&
1F&
1H&
1I&
1P&
1S&
1T&
1*&
1+&
1-&
15&
18&
19&
1m%
1p%
1x%
1{%
1R%
1U%
1V%
1]%
1^%
1`%
17%
18%
1:%
1;%
1B%
1E%
1F%
0C.
0(.
0).
0k-
0P-
05-
06-
0x,
0],
0B,
0',
0(,
0j+
0k+
0O+
04+
05+
0w*
0x*
0\*
0A*
0B*
0&*
0'*
14"
02"
1%*
12
1[*
14
13+
1N+
17
1&,
1A,
1\,
14-
1O-
1j-
1?
0@%
0D%
05%
09%
04%
0_%
0Z%
0P%
0o%
0l%
03&
07&
0'&
0)&
0N&
0R&
0C&
0G&
0B&
0h&
0j&
0b&
0&'
0*'
0''
0y&
0x&
0z&
0A'
0E'
0@'
0B'
0:'
0U'
0x'
0l'
0p'
0m'
05(
0S(
0N(
0D(
0H(
0i(
0_(
0c(
0^(
0`(
0')
0&)
0~(
0F)
0C)
06)
0R)
0Q)
0S)
0J%
0"
0=&
0X&
0&
00'
0(
0,
0-
0t(
0.
0L)
0g)
10
1/
1-
1'
1%
1$
1!
1Q)
1>)
1A)
1B)
1z(
1.)
1^(
1_(
1q(
1D(
1V(
1O(
13(
1k'
1l'
1v'
1Q'
16'
1@'
1A'
1x&
1%'
1&'
1^&
1h&
1J&
1C&
1N&
1'&
13&
1j%
1k%
1b%
1[%
1<%
15%
1@%
0>
0=
0:
09
06
03
02%
0N%
0r%
0@&
0-'
0~'
0s'
0;(
0B(
0](
0x(
0I)
04)
1L)
15)
1'(
1i'
1j'
1w&
1X&
1h%
1J%
0!
0"&
0%
0#(
0/
1*
1#
#3710
b100110 F
#3750
0i
0G
0f
#3800
1i
1G
1f
b110 A
b0 B
b1001101101111110 D
b11 E
1C
b1101101100010010 J
b11001001001001 K
b100111 k
1S
0R
1a
1^
0]
1\
1U
0P
0O
1M
1L
1e
1*$
0h)
0M)
0N)
02)
0u(
0Z(
0?(
0@(
0$(
0%(
0g'
0L'
0M'
01'
02'
0t&
0u&
0Y&
0>&
0#&
0f%
0K%
0Z)
0e)
0?)
0J)
0K)
0$)
0%)
0/)
0g(
0h(
0r(
0L(
0M(
0W(
0X(
01(
0<(
0t'
0u'
0!(
0Y'
0Z'
0d'
0>'
0?'
0I'
0J'
0#'
0.'
0/'
0f&
0g&
0q&
0K&
0L&
0V&
0W&
00&
0;&
0<&
0s%
0t%
0~%
0X%
0c%
0d%
0=%
0>%
0H%
0I%
1C.
1(.
1).
1k-
1P-
15-
16-
1x,
1],
1B,
1',
1(,
1j+
1k+
1O+
14+
15+
1w*
1x*
1\*
1A*
1B*
1&*
1'*
15.
1@.
1x-
1%.
1&.
1]-
1^-
1h-
1B-
1C-
1M-
1'-
1(-
12-
13-
1j,
1u,
1O,
1P,
1Z,
14,
15,
1?,
1w+
1x+
1$,
1%,
1\+
1g+
1h+
1A+
1B+
1L+
1&+
1'+
11+
12+
1i*
1t*
1u*
1N*
1O*
1Y*
13*
1>*
1?*
1v)
1w)
1#*
1$*
1:"
04"
0*$
16"
0l)
0k)
0)*
0C*
0M*
0_*
0h*
0z*
0y*
0K+
06+
0R+
0f+
0[+
0m+
0#,
0l+
0),
0Y,
0D,
0N,
0t,
0{,
0z,
07-
0A-
0R-
0n-
0$.
04.
01
02
04
05
07
08
0<
0?
13%
12%
1N%
1r%
1&&
1/&
1A&
1@&
1p&
1[&
1-'
1"'
1H'
13'
1N'
1~'
1s'
1;(
1B(
1A(
1f(
1w(
1I)
1Y)
1"&
1=&
1&
10'
1(
1#(
1+
1t(
1/
1g)
00
0-
0$
0#
0O)
0[(
0'(
0j'
0v&
0\&
0Z&
0%&
0?&
0g%
0L%
1*.
1n-
17-
1`,
1D,
1E,
1m+
1Q+
1R+
17+
1^*
1C*
1D#
0[*
0v*
0i+
0\,
0O-
0B.
1!
1"
1$
1%
1u&
1%(
1@(
1,
0+
0*
0&
1@
1=
1:
17
14
13
0T#
1S#
1R#
1O#
1L#
1H#
0F#
#3810
b100111 F
#3850
0i
0G
0f
#3900
1i
1G
1f
0d#
1c#
1b#
1_#
1\#
1X#
0V#
b1 A
b10 B
b1110111001100001 D
b111 E
b1001101000001011 J
b1010110111011100 K
b101000 k
1R
1d
0c
0b
0a
0`
0\
1Z
0X
1W
1V
1P
1N
0M
0L
1h)
1M)
1N)
12)
1u(
1Z(
1[(
1?(
1$(
1g'
1L'
1M'
11'
12'
1t&
1Y&
1Z&
1>&
1?&
1#&
1f%
1g%
1K%
1L%
1Z)
1e)
1?)
1J)
1K)
1$)
1%)
1/)
1g(
1h(
1r(
1L(
1M(
1W(
1X(
11(
1<(
1t'
1u'
1!(
1Y'
1Z'
1d'
1>'
1?'
1I'
1J'
1#'
1.'
1/'
1f&
1g&
1q&
1K&
1L&
1V&
1W&
10&
1;&
1<&
1s%
1t%
1~%
1X%
1c%
1d%
1=%
1>%
1H%
1I%
0T)
0U)
0W)
0X)
0_)
0b)
09)
0:)
0<)
0D)
0G)
0|(
0!)
0))
0*)
0,)
0-)
0a(
0b(
0d(
0e(
0l(
0m(
0o(
0F(
0I(
0J(
0Q(
0R(
0T(
0+(
0.(
06(
09(
0n'
0q'
0r'
0y'
0|'
0S'
0V'
0^'
0a'
08'
0;'
0C'
0D'
0F'
0G'
0{&
0|&
0~&
0!'
0('
0+'
0,'
0`&
0c&
0k&
0l&
0n&
0E&
0F&
0H&
0I&
0P&
0S&
0T&
0*&
0+&
0-&
05&
08&
09&
0m%
0p%
0x%
0{%
0R%
0U%
0V%
0]%
0^%
0`%
07%
08%
0:%
0;%
0B%
0E%
0F%
05.
0@.
0x-
0%.
0&.
0]-
0^-
0h-
0B-
0C-
0M-
0'-
0(-
02-
03-
0j,
0u,
0O,
0P,
0Z,
04,
05,
0?,
0w+
0x+
0$,
0%,
0\+
0g+
0h+
0A+
0B+
0L+
0&+
0'+
01+
02+
0i*
0t*
0u*
0N*
0O*
0Y*
03*
0>*
0?*
0v)
0w)
0#*
0$*
0:"
12"
1n$
06"
1l)
1k)
1)*
1M*
1_*
1h*
1z*
1y*
1K+
16+
1f+
1[+
1#,
1l+
1),
1Y,
1N,
1t,
1{,
1z,
1A-
1R-
1$.
14.
1D%
19%
14%
1_%
1Z%
1P%
1o%
1l%
17&
1)&
1R&
1G&
1B&
1j&
1b&
1*'
1''
1y&
1z&
1E'
1B'
1:'
1U'
1x'
1p'
1m'
15(
1S(
1N(
1H(
1i(
1c(
1`(
1')
1&)
1~(
1F)
1C)
16)
1R)
1S)
03%
02%
0N%
0h%
0r%
0&&
0/&
0A&
0@&
0p&
0[&
0w&
0-'
0"'
04'
0H'
03'
0N'
0~'
0i'
0s'
0;(
0B(
0A(
0\(
0f(
0w(
05)
0I)
0Y)
0!
0"
0$
0%
0'
0(
0,
0/
1O)
15)
1\(
1'(
1i'
1j'
14'
1v&
1w&
1\&
1%&
1h%
0>)
0A)
0B)
0z(
0.)
0q(
0V(
0O(
03(
0k'
0v'
0Q'
06'
0%'
0^&
0J&
0j%
0k%
0b%
0[%
0<%
0*.
0j-
04-
0`,
0E,
0A,
0&,
0Q+
0N+
07+
03+
0^*
0%*
0D#
11
1v*
15
16
1i+
18
19
1<
1>
1B.
12%
1N%
1r%
1@&
1-'
1~'
1s'
1;(
1B(
1](
1x(
1I)
14)
0"&
0=&
00'
0#(
0t(
0g)
10
1-
1*
1'
1$
1#
0L)
05)
0'(
0i'
0j'
0w&
0X&
0h%
0J%
0@
07
04
1!
1"&
1%
1#(
1/
0*
0#
1T#
0S#
0R#
0O#
0L#
0H#
1F#
1~$
0|$
1y$
1x$
0v$
1t$
0r$
1q$
1p$
#3901
0A!
1C!
1G!
1J!
1M!
1N!
0O!
1X)
0=)
0")
0/(
0<'
0.&
1V%
0P%
1(&
16'
1)(
1z(
17)
0R)
0T#
1S#
1R#
1O#
1L#
1H#
0F#
#3910
b101000 F
#3950
0i
0G
0f
#4000
1i
1G
1f
10%
0.%
1+%
1*%
0(%
1&%
0$%
1#%
1"%
b110 A
b0 B
b101100111110101 D
b101 E
b1101101100010010 J
b11001001001001 K
b101001 k
0S
1b
1`
1]
1\
0[
0Z
1X
0W
0U
0P
0N
1M
1L
0h)
0M)
02)
03)
0u(
0v(
0Z(
0[(
0?(
0$(
0g'
0L'
0M'
01'
0t&
0u&
0Y&
0>&
0#&
0f%
0g%
0K%
0Z)
0e)
0?)
0@)
0J)
0$)
0%)
0/)
00)
0g(
0h(
0r(
0L(
0M(
0W(
01(
02(
0<(
0t'
0u'
0!(
0Y'
0d'
0>'
0?'
0I'
0J'
0#'
0$'
0.'
0/'
0f&
0q&
0K&
0L&
0V&
0W&
00&
01&
0;&
0<&
0s%
0~%
0X%
0c%
0=%
0>%
0H%
0I%
1T)
1U)
1W)
1_)
1b)
19)
1:)
1<)
1=)
1D)
1G)
1|(
1!)
1")
1))
1*)
1,)
1-)
1a(
1b(
1d(
1e(
1l(
1m(
1o(
1F(
1I(
1J(
1Q(
1R(
1T(
1+(
1.(
1/(
16(
19(
1n'
1q'
1r'
1y'
1|'
1S'
1V'
1^'
1a'
18'
1;'
1<'
1C'
1D'
1F'
1G'
1{&
1|&
1~&
1!'
1('
1+'
1,'
1`&
1c&
1k&
1l&
1n&
1E&
1F&
1H&
1I&
1P&
1S&
1T&
1*&
1+&
1-&
1.&
15&
18&
19&
1m%
1p%
1x%
1{%
1R%
1U%
1]%
1^%
1`%
17%
18%
1:%
1;%
1B%
1E%
1F%
15.
1@.
1x-
1%.
1&.
1]-
1^-
1h-
1B-
1C-
1M-
1'-
1(-
12-
13-
1j,
1u,
1O,
1P,
1Z,
14,
15,
1?,
1w+
1x+
1$,
1%,
1\+
1g+
1h+
1A+
1B+
1L+
1&+
1'+
11+
12+
1i*
1t*
1u*
1N*
1O*
1Y*
13*
1>*
1?*
1v)
1w)
1#*
1$*
14"
02"
0n$
1*$
0l)
0k)
0)*
0C*
0M*
0_*
0h*
0z*
0y*
0K+
06+
0R+
0f+
0[+
0m+
0#,
0l+
0),
0Y,
0D,
0N,
0t,
0{,
0z,
07-
0A-
0R-
0n-
0$.
04.
0@%
0D%
05%
09%
04%
0_%
0Z%
0o%
0l%
03&
07&
0(&
0'&
0)&
0N&
0R&
0C&
0G&
0B&
0h&
0j&
0b&
0&'
0*'
0''
0y&
0x&
0z&
0A'
0E'
0@'
0B'
06'
0:'
0U'
0x'
0l'
0p'
0m'
05(
0)(
0S(
0N(
0D(
0H(
0i(
0_(
0c(
0^(
0`(
0')
0&)
0z(
0~(
0F)
0C)
07)
06)
0Q)
0S)
13%
1<%
1b%
1&&
1/&
1A&
1J&
1p&
1w&
1"'
1H'
13'
1i'
1&(
1V(
1A(
1q(
1f(
1.)
1w(
1>)
1Y)
1J%
1"
1=&
1X&
1&
10'
1(
1,
1t(
1.
1L)
1g)
00
0/
0'
0%
0$
0!
0O)
0](
0B(
02'
0\&
0Z&
0?&
0N%
0L%
1Q)
1@)
1A)
1B)
1z(
10)
1^(
1_(
1D(
1O(
12(
13(
1k'
1l'
1v'
1Q'
16'
1@'
1A'
1x&
1$'
1%'
1&'
1^&
1h&
1C&
1N&
1'&
11&
13&
1j%
1k%
1[%
15%
1@%
1*.
1n-
1j-
17-
14-
1`,
1D,
1E,
1A,
1&,
1m+
1Q+
1R+
1N+
17+
13+
1^*
1C*
1%*
01
0v*
05
06
0i+
08
09
0<
0>
0B.
0d%
0t%
0%&
0g&
0v&
0Z'
0&(
0X(
0x(
0K)
04)
1!
1g%
1$
1%
1u&
1'
1[(
1v(
0-
0,
0&
0"
15)
13)
1B(
1N'
1[&
1h%
1N%
1@
17
14
0g%
0[(
0.
0N)
1/
1,
1"
1:$
07$
15$
14$
13$
00$
1/$
1.$
0~$
1|$
0y$
0x$
1v$
0t$
1r$
0q$
0p$
#4001
1#"
1$"
0%"
1'"
0)"
1+"
1,"
0/"
11"
1~$
0|$
1y$
1x$
0v$
1t$
0r$
1q$
1p$
#4010
b101001 F
#4050
0i
0G
0f
#4100
1i
1G
1f
1J$
0G$
1E$
1D$
1C$
0@$
1?$
1>$
b1 A
b101 B
b1011010010011000 D
b11 E
b1001101000001011 J
b101100111110101 K
b101010 k
1S
0R
0d
0b
1a
0_
0^
0\
1Z
0Y
1W
0V
1U
1Q
1O
1N
0M
0L
1h)
1M)
1N)
12)
1u(
1Z(
1[(
1?(
1$(
1g'
1L'
1M'
11'
12'
1t&
1Y&
1Z&
1>&
1?&
1#&
1f%
1g%
1K%
1L%
1Z)
1e)
1?)
1J)
1K)
1$)
1%)
1/)
1g(
1h(
1r(
1L(
1M(
1W(
1X(
11(
1<(
1t'
1u'
1!(
1Y'
1Z'
1d'
1>'
1?'
1I'
1J'
1#'
1.'
1/'
1f&
1g&
1q&
1K&
1L&
1V&
1W&
10&
1;&
1<&
1s%
1t%
1~%
1X%
1c%
1d%
1=%
1>%
1H%
1I%
0T)
0U)
0W)
0_)
0b)
0c)
09)
0:)
0<)
0=)
0D)
0G)
0|(
0!)
0")
0))
0*)
0,)
0a(
0b(
0d(
0e(
0l(
0m(
0o(
0F(
0I(
0J(
0Q(
0R(
0T(
0+(
0.(
0/(
06(
09(
0:(
0n'
0q'
0r'
0y'
0|'
0}'
0S'
0V'
0^'
0a'
08'
0;'
0<'
0C'
0D'
0F'
0{&
0|&
0~&
0!'
0('
0+'
0,'
0`&
0c&
0k&
0l&
0n&
0o&
0E&
0F&
0H&
0I&
0P&
0S&
0T&
0*&
0+&
0-&
0.&
05&
08&
0m%
0p%
0x%
0{%
0|%
0R%
0U%
0]%
0^%
0`%
0a%
07%
08%
0:%
0;%
0B%
0E%
0F%
0C.
0(.
0).
0k-
0P-
05-
0x,
0y,
0],
0^,
0B,
0',
0(,
0j+
0k+
0O+
0P+
04+
0w*
0\*
0A*
0&*
0/.
00.
02.
0:.
0=.
0>.
0r-
0s-
0u-
0v-
0}-
0".
0W-
0Z-
0[-
0b-
0c-
0e-
0<-
0=-
0?-
0@-
0G-
0H-
0J-
0!-
0$-
0%-
0,-
0--
0/-
0d,
0g,
0h,
0o,
0r,
0s,
0I,
0L,
0M,
0T,
0W,
0X,
0.,
01,
09,
0<,
0q+
0t+
0u+
0|+
0}+
0!,
0V+
0W+
0Y+
0Z+
0a+
0d+
0e+
0;+
0>+
0F+
0G+
0I+
0J+
0~*
0!+
0#+
0$+
0++
0.+
0/+
0c*
0d*
0f*
0g*
0n*
0q*
0H*
0K*
0S*
0V*
0W*
0-*
00*
08*
09*
0;*
0<*
0p)
0q)
0s)
0t)
0{)
0~)
0!*
1:"
04"
0*$
16"
1})
1r)
1m)
1:*
15*
1Q*
1J*
1G*
1p*
1a*
1b*
1-+
1"+
1{*
1D+
1E+
1=+
1c+
1`+
1T+
1U+
1~+
1{+
1s+
10,
1R,
1S,
1K,
1H,
1m,
1n,
1b,
1.-
1)-
1#-
1D-
1>-
1;-
1_-
1Y-
1!.
1|-
1p-
1o-
18.
1..
1[*
1v*
16
1i+
18
1\,
1;
1O-
1?
1B.
1D%
19%
14%
1_%
1Z%
1v%
1o%
1l%
17&
1(&
1)&
1R&
1G&
1B&
1i&
1j&
1b&
1*'
1''
1y&
1z&
1E'
1B'
1:'
1U'
1w'
1x'
1p'
1m'
14(
15(
1)(
1S(
1N(
1H(
1i(
1c(
1`(
1&)
1~(
1F)
1C)
17)
16)
1])
1S)
03%
02%
0N%
0h%
0r%
0&&
0/&
0A&
0@&
0p&
0[&
0w&
0-'
0"'
04'
0H'
03'
0N'
0~'
0i'
0s'
0;(
0B(
0A(
0\(
0f(
0w(
05)
0I)
0Y)
0!
0"
0$
0%
0'
0(
0,
0/
1O)
15)
1\(
1'(
1i'
1j'
14'
1v&
1w&
1\&
1%&
1h%
0>)
0A)
0B)
0.)
0q(
0V(
0O(
03(
0k'
0v'
0Q'
0A'
0%'
0^&
0J&
03&
0j%
0k%
0b%
0<%
0@
0=
04
03
0w-
0z-
0{-
0g-
0L-
01-
0*-
0l,
0F,
0Q,
0,,
0z+
0^+
09+
0%+
0l*
0E*
0F*
0=*
0u)
1D#
1k)
1)*
1M*
1y*
1f+
1Y,
1N,
1t,
1{,
18-
1S-
1$.
1m-
12%
1N%
1r%
1@&
1-'
1~'
1s'
1;(
1B(
1](
1x(
1I)
14)
0"&
0=&
00'
0#(
0t(
0g)
10
1-
1*
1'
1$
1#
0L)
05)
0'(
0i'
0j'
0w&
0X&
0h%
0J%
0n-
0l-
0Q-
06-
0`,
0D,
0E,
0R+
0C*
0B*
12
1k+
1^,
1y,
1<
1=
1>
1).
1!
1"&
1%
1#(
1/
0*
0#
0?
0;
0:
07
0S#
0R#
0O#
0N#
1M#
0L#
0K#
1J#
0I#
1G#
0:$
17$
05$
04$
03$
10$
0/$
0.$
#4101
1c!
1d!
0e!
1h!
1i!
1j!
0l!
1o!
0`)
0;.
1m(
1H-
07(
0p,
0z'
0U,
0_'
0:,
1l&
1G+
0Q&
0,+
06&
0o*
1k*
12&
1(+
1M&
0C+
0h&
16,
1['
1Q,
1v'
1l,
13(
0D-
0i(
17.
1\)
0d)
0?.
1q(
1L-
0;(
0t,
0~'
0Y,
0c'
0>,
1p&
1K+
0U&
00+
0:&
0s*
1_*
1&&
1z*
1A&
07+
0\&
1*,
1O'
1E,
1j'
1`,
1'(
08-
0](
1+.
1P)
0D.
1Q-
0y,
0^,
0C,
1P+
05+
0x*
14
15
06
19
1:
1;
0=
1@
1:$
07$
15$
14$
13$
00$
1/$
1.$
#4110
b101010 F
#4150
0i
0G
0f
#4200
1i
1G
1f
0c#
0b#
0_#
0^#
1]#
0\#
0[#
1Z#
0Y#
1W#
b100 A
b10 B
b1101000101001110 D
b0 E
b11101100010 J
b1010110111011100 K
b101011 k
0T
0S
1c
1b
0`
1^
0]
1\
0Z
0W
1V
0Q
1P
0O
0N
1L
0h)
0i)
0M)
02)
03)
0u(
0Z(
0[(
0?(
0@(
0$(
0%(
0g'
0h'
0L'
0M'
01'
0t&
0Y&
0Z&
0>&
0?&
0#&
0f%
0g%
0K%
1T)
1U)
1W)
1_)
1`)
1b)
1c)
19)
1:)
1<)
1=)
1D)
1G)
1|(
1!)
1")
1))
1*)
1,)
1a(
1b(
1d(
1e(
1l(
1o(
1F(
1I(
1J(
1Q(
1R(
1T(
1+(
1.(
1/(
16(
17(
19(
1:(
1n'
1q'
1r'
1y'
1z'
1|'
1}'
1S'
1V'
1^'
1_'
1a'
18'
1;'
1<'
1C'
1D'
1F'
1{&
1|&
1~&
1!'
1('
1+'
1,'
1`&
1c&
1k&
1n&
1o&
1E&
1F&
1H&
1I&
1P&
1Q&
1S&
1T&
1*&
1+&
1-&
1.&
15&
16&
18&
1m%
1p%
1x%
1{%
1|%
1R%
1U%
1]%
1^%
1`%
1a%
17%
18%
1:%
1;%
1B%
1E%
1F%
1C.
1D.
1(.
1k-
1l-
1P-
15-
16-
1x,
1y,
1],
1^,
1B,
1C,
1',
1(,
1j+
1O+
14+
15+
1w*
1x*
1\*
1A*
1B*
1&*
05.
0@.
0A.
0x-
0y-
0%.
0]-
0^-
0h-
0B-
0C-
0M-
0'-
0(-
02-
0j,
0k,
0u,
0v,
0O,
0P,
0Z,
0[,
04,
0?,
0w+
0x+
0$,
0\+
0]+
0g+
0h+
0A+
0L+
0M+
0&+
0'+
01+
02+
0i*
0j*
0t*
0N*
0Y*
0Z*
03*
0>*
0?*
0v)
0w)
0#*
0$*
1/.
10.
12.
1:.
1;.
1=.
1>.
1r-
1s-
1u-
1v-
1}-
1".
1W-
1Z-
1[-
1b-
1c-
1e-
1<-
1=-
1?-
1@-
1G-
1J-
1!-
1$-
1%-
1,-
1--
1/-
1d,
1g,
1h,
1o,
1p,
1r,
1s,
1I,
1L,
1M,
1T,
1U,
1W,
1X,
1.,
11,
19,
1:,
1<,
1q+
1t+
1u+
1|+
1}+
1!,
1V+
1W+
1Y+
1Z+
1a+
1d+
1e+
1;+
1>+
1F+
1I+
1J+
1~*
1!+
1#+
1$+
1++
1,+
1.+
1/+
1c*
1d*
1f*
1g*
1n*
1o*
1q*
1H*
1K*
1S*
1V*
1W*
1-*
10*
18*
19*
1;*
1<*
1p)
1q)
1s)
1t)
1{)
1~)
1!*
19"
06"
0D#
1<"
0y)
0})
0n)
0r)
0m)
06*
0:*
05*
0Q*
0J*
0G*
0p*
0k*
0a*
0`*
0b*
0)+
0-+
0(+
0|*
0"+
0{*
0D+
0E+
0=+
0_+
0c+
0`+
0T+
0S+
0U+
0~+
0y+
0{+
0o+
0s+
06,
00,
0R,
0Q,
0S,
0G,
0K,
0H,
0m,
0l,
0n,
0b,
0.-
0)-
0},
0#-
0:-
0>-
09-
0;-
0_-
0U-
0Y-
0!.
0|-
0p-
0o-
08.
07.
0,.
0..
1l)
1u)
1=*
1D*
1s*
1h*
10+
1%+
17+
1R+
1[+
1#,
1l+
1>,
1Y,
1D,
1t,
1_,
11-
1z,
1A-
1g-
1R-
1w-
1?.
14.
0%*
02
04
0v*
05
03+
0i+
08
09
0:
0;
0<
0O-
0>
0'.
0@
0B.
0@%
0D%
05%
09%
04%
0[%
0_%
0Z%
0v%
0o%
0l%
07&
02&
0(&
0'&
0)&
0N&
0R&
0M&
0C&
0G&
0B&
0i&
0j&
0b&
0&'
0*'
0''
0y&
0x&
0z&
0E'
0@'
0B'
06'
0:'
0['
0U'
0w'
0v'
0x'
0l'
0p'
0m'
04(
03(
05(
0)(
0S(
0N(
0D(
0H(
0_(
0c(
0^(
0`(
0&)
0z(
0~(
0F)
0C)
07)
06)
0])
0\)
0Q)
0S)
1J%
1"
1=&
1X&
10'
1(
1)
1*
1+
1,
1t(
1.
1L)
1g)
0/
0-
0'
0!
1Q)
1d)
1>)
1A)
1B)
1z(
1.)
1^(
1_(
1D(
1V(
1O(
13(
1k'
1l'
1v'
1Q'
1c'
16'
1@'
1A'
1x&
1%'
1&'
1^&
1h&
1J&
1C&
1U&
1N&
1'&
1:&
13&
1j%
1k%
1b%
1[%
1<%
15%
1@%
1@
1?
1=
17
15
14
11
0*.
0j-
0S-
04-
0{,
0w,
0\,
0*,
0&,
0m+
0_*
1,.
1A.
1y-
1z-
1{-
1U-
19-
1:-
1},
1*-
1k,
1l,
1v,
1F,
1G,
1Q,
1[,
1,,
1o+
1y+
1z+
1S+
1]+
1^+
1_+
19+
1C+
1M+
1|*
1)+
1`*
1j*
1l*
1E*
1F*
1Z*
16*
1n)
1y)
0D*
0O*
0u*
0^*
07+
0B+
0Q+
0%,
05,
0E,
0`,
0_,
03-
0&.
0m-
0+.
18
1:
1;
1<
1>
1B.
02%
0N%
0r%
0&&
0A&
0@&
0p&
0-'
0O'
0s'
0B(
0x(
0I)
04)
0P)
1i)
15)
13)
1[(
1i'
1h'
1w&
1\&
1Z&
1?&
1h%
1g%
0@
1'.
1n-
1{,
1w,
1),
1m+
1i+
16+
1v*
1_*
1C*
0[*
04
0N+
07
0A,
0;
0?
0"
0$
0%
0u&
02'
0)
0,
0.
0N)
00
1/
1'
1&
19
16
13
0L"
1K"
1J"
1D"
0C"
0?"
1>"
1="
1S#
1R#
1O#
1N#
0M#
1L#
1K#
0J#
1I#
0G#
#4201
1B!
0D!
1E!
0F!
0G!
1H!
0I!
0J!
0M!
0N!
0S#
0R#
0O#
0N#
1M#
0L#
0K#
1J#
0I#
1G#
#4210
b101011 F
#4250
0i
0G
0f
#4300
1i
1G
1f
0\"
1["
1Z"
1T"
0S"
0O"
1N"
1M"
b1 A
b110 B
b110011011100110 D
b111 E
0C
b1001101000001011 J
b1101101100010010 K
b101100 k
1T
1S
1R
0a
1_
1]
0\
1[
1Z
0X
1W
0U
1O
1N
0L
0e
0<"
1h)
1M)
1N)
12)
1u(
1Z(
1?(
1@(
1$(
1%(
1g'
1L'
1M'
11'
12'
1t&
1u&
1Y&
1>&
1#&
1f%
1K%
0T)
0U)
0W)
0_)
0`)
0b)
0c)
09)
0:)
0<)
0D)
0G)
0|(
0!)
0))
0*)
0,)
0a(
0b(
0d(
0e(
0l(
0o(
0F(
0I(
0J(
0Q(
0R(
0T(
0+(
0.(
06(
07(
09(
0:(
0n'
0q'
0y'
0z'
0|'
0}'
0S'
0V'
0W'
0^'
0_'
0a'
08'
0;'
0C'
0D'
0F'
0{&
0|&
0~&
0('
0+'
0,'
0`&
0c&
0d&
0k&
0n&
0o&
0E&
0F&
0H&
0P&
0Q&
0S&
0T&
0*&
0+&
0-&
0.&
05&
06&
08&
0m%
0p%
0q%
0x%
0{%
0|%
0R%
0U%
0]%
0^%
0`%
0a%
07%
08%
0:%
0;%
0B%
0E%
0F%
0C.
0(.
0).
0k-
0P-
05-
06-
0x,
0],
0B,
0',
0(,
0j+
0k+
0O+
04+
05+
0w*
0x*
0\*
0A*
0B*
0&*
0'*
0:"
12"
09"
1%*
12
1[*
14
13+
1N+
17
1&,
1A,
1\,
14-
1O-
1j-
1?
1D%
19%
14%
1_%
1Z%
1v%
1o%
1l%
17&
12&
1(&
1)&
1R&
1M&
1G&
1B&
1i&
1j&
1b&
1*'
1''
1z&
1E'
1B'
1:'
1['
1U'
1w'
1x'
1p'
1m'
14(
15(
1S(
1N(
1H(
1c(
1`(
1&)
1~(
1F)
1C)
16)
1])
1\)
1S)
0"&
0=&
0&
0'
00'
0(
0*
0#(
0+
0t(
0/
0g)
10
1-
1*
1'
1$
1#
0d)
0>)
0A)
0B)
0z(
0.)
0V(
0O(
0k'
0l'
0c'
06'
0A'
0%'
0h&
0J&
0C&
0U&
0:&
03&
0j%
0b%
0<%
0>
0=
0:
09
06
03
12%
1N%
1r%
1&&
1A&
1@&
1p&
1-'
1O'
1s'
1B(
1x(
1I)
14)
1P)
0L)
05)
0i'
0w&
0\&
0X&
0h%
0J%
1!
1"&
1%
1#(
1/
0*
0#
1L"
0K"
0J"
0D"
1C"
1?"
0>"
0="
#4301
1n
1o
0p
0t
1u
1{
1|
0}
1..
0q-
0V-
0p+
1U+
1G*
0,*
0o)
1m)
1**
0E*
0S+
1n+
1T-
1o-
0,.
0L"
1K"
1J"
1D"
0C"
0?"
1>"
1="
#4310
b101100 F
#4350
0i
0G
0f
#4400
1i
1G
1f
b10 A
b101 B
b1111111110011110 D
b0 E
1C
b1010110111011100 J
b101100111110101 K
b101101 k
0T
0S
0R
1a
1`
0_
0^
1\
1Y
1X
1U
1Q
0P
0N
1M
1e
1n$
0Z)
0e)
0f)
0?)
0J)
0$)
0/)
0g(
0h(
0r(
0L(
0M(
0W(
01(
0<(
0=(
0t'
0!(
0"(
0Y'
0Z'
0d'
0>'
0I'
0#'
0.'
0/'
0f&
0g&
0q&
0r&
0K&
0V&
0W&
00&
01&
0;&
0s%
0t%
0~%
0!&
0X%
0c%
0d%
0=%
0>%
0H%
0I%
1T)
1U)
1W)
1_)
1`)
1b)
1c)
19)
1:)
1<)
1D)
1G)
1|(
1!)
1))
1*)
1,)
1a(
1b(
1d(
1e(
1l(
1o(
1F(
1I(
1J(
1Q(
1R(
1T(
1+(
1.(
16(
17(
19(
1:(
1n'
1q'
1y'
1z'
1|'
1}'
1S'
1V'
1W'
1^'
1_'
1a'
18'
1;'
1C'
1D'
1F'
1{&
1|&
1~&
1('
1+'
1,'
1`&
1c&
1d&
1k&
1n&
1o&
1E&
1F&
1H&
1P&
1Q&
1S&
1T&
1*&
1+&
1-&
1.&
15&
16&
18&
1m%
1p%
1q%
1x%
1{%
1|%
1R%
1U%
1]%
1^%
1`%
1a%
17%
18%
1:%
1;%
1B%
1E%
1F%
15.
1@.
1x-
1%.
1&.
1]-
1^-
1h-
1B-
1C-
1M-
1'-
1(-
12-
13-
1j,
1u,
1O,
1P,
1Z,
14,
15,
1?,
1w+
1x+
1$,
1%,
1\+
1g+
1h+
1A+
1B+
1L+
1&+
1'+
11+
12+
1i*
1t*
1u*
1N*
1O*
1Y*
13*
1>*
1?*
1v)
1w)
1#*
1$*
0/.
00.
02.
0:.
0;.
0=.
0>.
0r-
0s-
0u-
0}-
0".
0W-
0Z-
0b-
0c-
0e-
0<-
0=-
0?-
0@-
0G-
0J-
0!-
0$-
0%-
0,-
0--
0/-
0d,
0g,
0o,
0p,
0r,
0s,
0I,
0L,
0T,
0U,
0W,
0X,
0.,
01,
02,
09,
0:,
0<,
0q+
0t+
0|+
0}+
0!,
0V+
0W+
0Y+
0a+
0d+
0e+
0;+
0>+
0?+
0F+
0I+
0J+
0~*
0!+
0#+
0++
0,+
0.+
0/+
0c*
0d*
0f*
0g*
0n*
0o*
0q*
0H*
0K*
0L*
0S*
0V*
0W*
0-*
00*
08*
09*
0;*
0<*
0p)
0q)
0s)
0t)
0{)
0~)
0!*
1:"
02"
0n$
19"
1})
1r)
1o)
1:*
15*
1,*
1Q*
1J*
1p*
1k*
1a*
1b*
1-+
1(+
1"+
1{*
1D+
1E+
1=+
1c+
1`+
1S+
1~+
1{+
1s+
1p+
16,
10,
1R,
1S,
1K,
1H,
1m,
1n,
1.-
1)-
1#-
1>-
1;-
1_-
1Y-
1V-
1!.
1|-
1q-
18.
17.
1,.
0l)
0k)
0u)
0)*
02*
0C*
0_*
0h*
0z*
0y*
0K+
06+
0R+
0f+
0m+
0#,
0l+
0v+
0),
0Y,
0D,
0N,
0t,
0{,
0z,
07-
0A-
0R-
0\-
0n-
0$.
0w-
0@%
0D%
05%
09%
04%
06%
0[%
0_%
0Z%
0Q%
0v%
0k%
0o%
07&
02&
0(&
0'&
0)&
0N&
0R&
0M&
0G&
0B&
0i&
0j&
0^&
0b&
0&'
0*'
0''
0x&
0E'
0@'
0B'
0:'
07'
0['
0Q'
0U'
0w'
0v'
0x'
0p'
0m'
04(
03(
05(
0S(
0N(
0D(
0H(
0_(
0c(
0^(
0`(
0&)
0~(
0{(
0F)
0C)
06)
08)
0])
0\)
0Q)
13%
1<%
1b%
1i%
1h%
1:&
1/&
1U&
1J&
1\&
1[&
1w&
1"'
1H'
1c'
1N'
1~'
1;(
1V(
1A(
1f(
1.)
1>)
1d)
1Y)
0O)
04)
0x(
0Y(
0B(
0f'
0O'
04'
0v&
0s&
0@&
0&&
0"&
1f)
16)
1A)
1B)
1y(
1z(
1^(
1_(
1D(
1O(
13(
1=(
1k'
1l'
1v'
1"(
1Q'
15'
16'
1@'
1A'
1%'
1&'
1^&
1h&
1r&
1C&
1N&
1'&
11&
13&
1k%
1!&
1O%
1[%
14%
15%
1@%
1m-
1n-
1R-
17-
16-
1`,
1D,
1E,
1l+
1m+
1R+
17+
15+
1^*
1x*
1(*
1B*
1k)
1'*
04.
0?.
0z-
0{-
0T-
0U-
0g-
01-
0*-
0F,
0G,
0>,
0n+
0o+
0z+
0[+
0^+
0C+
0%+
0|*
00+
0s*
0l*
0**
0=*
1<"
1)*
12*
1_*
1z*
1y*
1K+
1f+
1Q+
1v+
1*,
1N,
1{,
1S-
1\-
1$.
1+.
1*.
01
02
04
05
0P+
0^,
0y,
0<
0i%
0<&
0%&
0L&
0\&
0J'
0?'
0j'
0u'
0'(
0X(
0%)
0K)
0P)
1#
1X&
1&
10'
1)
1,
1L)
1g)
00
0/
0'
0%
15)
1w(
1B(
1i'
13'
14'
1@&
1=&
1&&
1;
1:
16
0D.
0n-
0R-
0l-
06-
0D,
0C,
0l+
0R+
07+
05+
0x*
0(*
0B*
12
14
15
1P+
1k+
19
1<
1>
1).
1@
0$
0X&
0K'
0#(
01)
1.
1*
1(
1%
0?
07
06
1H"
0F"
1E"
1C"
1B"
1A"
1?"
#4410
b101101 F
#4450
0i
0G
0f
#4500
1i
1G
1f
1X"
0V"
1U"
1S"
1R"
1Q"
1O"
b0 A
b10 B
b100000100010011 D
b11 E
b1111111110011110 J
b1010110111011100 K
b101110 k
1T
1S
1d
0b
0a
0]
0[
0Z
0Y
0X
0W
0U
0Q
1P
0O
0M
1Z)
1e)
1?)
1J)
1K)
1$)
1%)
1/)
1g(
1h(
1r(
1L(
1M(
1W(
1X(
11(
1<(
1t'
1u'
1!(
1Y'
1Z'
1d'
1>'
1?'
1I'
1J'
1#'
1.'
1/'
1f&
1g&
1q&
1K&
1L&
1V&
1W&
10&
1;&
1<&
1s%
1t%
1~%
1X%
1c%
1d%
1=%
1>%
1H%
1I%
1C.
1D.
1(.
1k-
1l-
1P-
15-
16-
1x,
1y,
1],
1^,
1B,
1C,
1',
1(,
1j+
1O+
14+
15+
1w*
1x*
1\*
1A*
1B*
1&*
05.
0@.
0A.
0x-
0%.
0]-
0h-
0B-
0C-
0M-
0'-
0(-
02-
0j,
0u,
0v,
0O,
0Z,
0[,
04,
05,
0?,
0w+
0$,
0\+
0g+
0h+
0A+
0B+
0L+
0M+
0&+
01+
02+
0i*
0j*
0t*
0N*
0O*
0Y*
0Z*
03*
0>*
0?*
0v)
0w)
0#*
0$*
1/.
10.
12.
1:.
1;.
1=.
1>.
1r-
1s-
1u-
1}-
1".
1W-
1Z-
1b-
1c-
1e-
1<-
1=-
1?-
1@-
1G-
1J-
1!-
1$-
1%-
1,-
1--
1/-
1d,
1g,
1o,
1p,
1r,
1s,
1I,
1L,
1T,
1U,
1W,
1X,
1.,
11,
12,
19,
1:,
1<,
1q+
1t+
1|+
1}+
1!,
1V+
1W+
1Y+
1a+
1d+
1e+
1;+
1>+
1?+
1F+
1I+
1J+
1~*
1!+
1#+
1++
1,+
1.+
1/+
1c*
1d*
1f*
1g*
1n*
1o*
1q*
1H*
1K*
1L*
1S*
1V*
1W*
1-*
10*
18*
19*
1;*
1<*
1p)
1q)
1s)
1t)
1{)
1~)
1!*
16"
09"
0<"
1D#
0y)
0})
0n)
0r)
0m)
0o)
06*
0:*
05*
0,*
0Q*
0F*
0J*
0p*
0k*
0a*
0`*
0b*
0)+
0-+
0(+
0"+
0{*
0D+
0E+
09+
0=+
0_+
0c+
0`+
0S+
0~+
0y+
0{+
0s+
0p+
06,
0,,
00,
0R,
0Q,
0S,
0K,
0H,
0m,
0l,
0n,
0.-
0)-
0},
0#-
0:-
0>-
09-
0;-
0_-
0Y-
0V-
0!.
0|-
0o-
0q-
08.
07.
0,.
1l)
1u)
1=*
1D*
1C*
1s*
1h*
10+
1%+
17+
16+
1R+
1[+
1#,
1>,
1),
1Y,
1t,
11-
1z,
1A-
1g-
1w-
1?.
14.
0%*
02
04
0v*
05
03+
0i+
08
09
0:
0;
0<
0O-
0>
0'.
0@
0B.
03%
02%
0<%
0N%
0W%
0h%
0&&
0/&
0A&
0@&
0p&
0[&
0w&
0-'
04'
0H'
03'
0='
0N'
0~'
0i'
0s'
0;(
0B(
0A(
0\(
0f(
0w(
0#)
05)
0I)
0>)
14)
15)
1w(
1\(
1Y(
1'(
1i'
1j'
1f'
13'
14'
1w&
1s&
1\&
1X&
1%&
1"&
1M%
12%
1@
1?
1=
17
15
14
11
0*.
0m-
0S-
04-
0{,
0A,
0*,
0m+
0Q+
0N+
0y*
0_*
0[*
1A.
1o-
1z-
1{-
1T-
1U-
19-
1:-
1},
1*-
1l,
1v,
1F,
1G,
1Q,
1[,
1,,
1n+
1o+
1y+
1z+
1^+
1_+
19+
1C+
1M+
1|*
1)+
1`*
1j*
1l*
1F*
1Z*
1**
16*
1m)
1n)
1y)
0D*
0u*
0^*
0'+
07+
0%,
0x+
0E,
0P,
0`,
03-
0^-
0&.
0+.
13
13+
16
1i+
19
1<
1'.
1B.
0e%
0#
0=&
0%
0&
0)
0,
0L)
1/
1$
1"
0@
0?
07
05
1n-
1R-
1{,
1D,
1l+
1m+
1y*
1v*
1_*
04
03+
0&,
0\,
0j-
1>
1:
18
15
0H"
1F"
0E"
0C"
0B"
0A"
0?"
1T#
1S#
0Q#
0M#
1L#
0J#
0H#
0G#
1F#
0E#
#4501
1p
1r
1s
1t
1v
0w
1y
0E(
0~,
1m'
1H,
0R'
0-,
0z&
0U+
0_&
0:+
0D&
0}*
0l%
0G*
1E*
1j%
1{*
1B&
18+
1]&
1S+
1x&
1+,
1P'
0F,
0k'
1|,
1C(
0K(
1s'
0X'
0"'
0e&
0J&
0r%
1h%
1@&
1[&
1v&
1N'
0i'
1A(
0Y(
1#(
0f'
00'
0s&
0X&
0"&
1#
1%
1&
1'
1)
0*
1,
1H"
0F"
1E"
1C"
1B"
1A"
1?"
#4510
b101110 F
#4550
0i
0G
0f
#4600
1i
1G
1f
1d#
1c#
0a#
0]#
1\#
0Z#
0X#
0W#
1V#
0U#
b110 A
b1010101111000100 D
b1 E
0C
b1101101100010010 J
b101111 k
0S
0d
0c
1b
0`
1^
1]
1[
1Y
1W
0V
1U
1M
1L
0e
0D#
0h)
0M)
0N)
02)
0u(
0Z(
0?(
0@(
0$(
0%(
0g'
0L'
0M'
01'
02'
0t&
0u&
0Y&
0>&
0#&
0f%
0K%
0Z)
0e)
0?)
0J)
0K)
0$)
0%)
0/)
0g(
0h(
0r(
0L(
0M(
0W(
0X(
01(
0<(
0t'
0u'
0!(
0Y'
0Z'
0d'
0>'
0?'
0I'
0J'
0#'
0.'
0/'
0f&
0g&
0q&
0K&
0L&
0V&
0W&
00&
0;&
0<&
0s%
0t%
0~%
0X%
0c%
0d%
0=%
0>%
0H%
0I%
18"
06"
13%
1<%
1N%
1W%
1r%
1&&
1/&
1A&
1J&
1p&
1e&
1-'
1"'
1H'
1='
1X'
1~'
1i'
1;(
1B(
1K(
1f(
1#)
1I)
1>)
1J%
1e%
1"&
1=&
1X&
1s&
10'
1K'
1f'
1*
1+
1Y(
1t(
11)
1L)
0.
0-
0,
0)
0%
0$
0#
0"
0!
04)
0[(
0'(
0j'
0v&
0\&
0Z&
0%&
0?&
0M%
0g%
0L%
1!
1"
1$
1%
1u&
1%(
1@(
1,
0+
0*
0&
0T#
0S#
1Q#
1M#
0L#
1J#
1H#
1G#
0F#
1E#
#4601
0@!
1A!
0B!
0C!
0E!
1G!
0H!
0L!
1N!
1O!
1T#
1S#
0Q#
0M#
1L#
0J#
0H#
0G#
1F#
0E#
#4610
b101111 F
#4650
0i
0G
0f
#4700
1i
1G
1f
b100 A
b111 B
b1001000010000110 D
b10 E
b11101100010 J
b1110111001100001 K
b110000 k
0T
1S
1c
0^
0\
0[
0Y
1X
0W
1Q
1O
0M
1Z)
1e)
1?)
1J)
1K)
1$)
1%)
1/)
1g(
1h(
1r(
1L(
1M(
1W(
1X(
11(
1<(
1t'
1u'
1!(
1Y'
1Z'
1d'
1>'
1?'
1I'
1J'
1#'
1.'
1/'
1f&
1g&
1q&
1K&
1L&
1V&
1W&
10&
1;&
1<&
1s%
1t%
1~%
1X%
1c%
1d%
1=%
1>%
1H%
1I%
0C.
0(.
0).
0k-
0P-
05-
06-
0x,
0],
0B,
0',
0(,
0j+
0k+
0O+
04+
05+
0w*
0x*
0\*
0A*
0B*
0&*
0'*
0/.
00.
02.
03.
0:.
0;.
0=.
0>.
0r-
0s-
0u-
0v-
0}-
0".
0W-
0Z-
0b-
0c-
0e-
0<-
0=-
0?-
0G-
0J-
0!-
0$-
0%-
0,-
0--
0/-
0d,
0g,
0o,
0p,
0r,
0s,
0I,
0L,
0T,
0U,
0W,
0X,
0.,
01,
09,
0:,
0<,
0q+
0t+
0u+
0|+
0}+
0!,
0V+
0W+
0Y+
0a+
0d+
0e+
0;+
0>+
0F+
0I+
0J+
0~*
0!+
0#+
0++
0,+
0.+
0/+
0c*
0d*
0f*
0n*
0o*
0q*
0H*
0K*
0S*
0V*
0W*
0-*
00*
01*
08*
09*
0;*
0<*
0p)
0q)
0s)
0{)
0~)
0!*
17"
08"
1})
1r)
1o)
1:*
15*
1+*
1,*
1Q*
1J*
1G*
1p*
1k*
1b*
1-+
1(+
1"+
1}*
1D+
1E+
1=+
1:+
1c+
1`+
1U+
1~+
1{+
1s+
1p+
16,
10,
1-,
1R,
1S,
1K,
1m,
1n,
1.-
1)-
1#-
1~,
1>-
1;-
1_-
1Y-
1V-
1!.
1|-
1p-
1q-
18.
17.
1-.
1,.
1%*
12
1[*
14
13+
1N+
17
1&,
1A,
1\,
14-
1O-
1j-
1?
03%
02%
0<%
0N%
0W%
0h%
0r%
0&&
0/&
0A&
0@&
0J&
0p&
0[&
0e&
0w&
0-'
0"'
04'
0H'
03'
0='
0N'
0X'
0~'
0i'
0;(
0B(
0A(
0K(
0\(
0f(
0w(
0#)
05)
0I)
0>)
14)
15)
1w(
1\(
1A(
1[(
1'(
1j'
1N'
13'
14'
1v&
1w&
1[&
1\&
1@&
1Z&
1%&
1?&
1h%
1M%
1g%
12%
1L%
0>
0=
0:
09
06
03
06.
0A.
0y-
0z-
0{-
0T-
0U-
0:-
0|,
0*-
0v,
0G,
0[,
0+,
0,,
0n+
0z+
0^+
08+
09+
0C+
0M+
0|*
0l*
0E*
0F*
0Z*
0**
04*
0n)
1w)
1(*
1D*
1O*
1u*
1'+
17+
1B+
1%,
15,
1E,
1P,
1`,
13-
1C-
1^-
1&.
1m-
1+.
1*.
0!
0"
0$
0%
0u&
0%(
0@(
0,
1+
1*
1&
0D.
0n-
0R-
07-
0{,
0y,
0D,
0^,
0),
0m+
06+
0P+
0y*
0_*
0C*
0]*
0k)
13
1x*
16
1(,
1:
1;
16-
1).
1@
0?
0<
08
04
#4710
b110000 F
#4750
0i
0G
0f
#4800
1i
1G
1f
b10 A
b101 B
b1100110110000100 D
b100 E
b1010110111011100 J
b101100111110101 K
b110001 k
0S
1R
0c
1\
1Z
1Y
0X
1V
0P
1M
0L
1h)
1M)
1N)
12)
1u(
1Z(
1?(
1@(
1$(
1%(
1g'
1L'
1M'
11'
12'
1t&
1u&
1Y&
1>&
1#&
1f%
1K%
0Z)
0e)
0?)
0J)
0K)
0$)
0%)
0/)
0g(
0h(
0r(
0L(
0M(
0W(
0X(
01(
0<(
0t'
0u'
0!(
0Y'
0Z'
0d'
0>'
0?'
0I'
0J'
0#'
0.'
0/'
0f&
0g&
0q&
0K&
0L&
0V&
0W&
00&
0;&
0<&
0s%
0t%
0~%
0X%
0c%
0d%
0=%
0>%
0H%
0I%
15.
16.
1@.
1A.
1x-
1y-
1%.
1]-
1h-
1B-
1M-
1'-
1(-
12-
1j,
1u,
1v,
1O,
1Z,
1[,
14,
1?,
1w+
1x+
1$,
1\+
1g+
1h+
1A+
1L+
1M+
1&+
11+
12+
1i*
1t*
1N*
1Y*
1Z*
13*
14*
1>*
1?*
1v)
1#*
1$*
0:"
15"
07"
0l)
0u)
0)*
0=*
0(*
0D*
0s*
0h*
0z*
00+
0%+
07+
0R+
0[+
0#,
0l+
0>,
0E,
0Y,
0`,
0t,
01-
0z,
0A-
0g-
0m-
0w-
0+.
0?.
0*.
04.
13%
1<%
1N%
1W%
1r%
1&&
1/&
1A&
1J&
1p&
1e&
1-'
1"'
1H'
1='
1X'
1~'
1i'
1;(
1B(
1K(
1f(
1#)
1I)
1>)
0J%
0e%
0"&
0=&
0X&
0&
0s&
0'
00'
0(
0K'
0f'
0*
0+
0Y(
0t(
01)
0/
0L)
1/
1.
1-
1,
1)
1(
1'
1&
1%
1$
1#
1"
1!
04)
0'(
0#(
0j'
0v&
0\&
0%&
0M%
1*.
1+.
1m-
1S-
17-
1{,
1`,
1E,
1*,
1m+
1Q+
1k+
1P+
1y*
1z*
1^*
1_*
1]*
1)*
1k)
1'*
01
03
0x*
06
07
0(,
0C,
06-
0l-
1e%
1=&
10'
1*
1L)
0/
0'
0$
0"
1>
1<
19
18
14
#4810
b110001 F
#4850
0i
0G
0f
#4900
1i
1G
1f
b1 A
b1 B
b1010100110001110 D
b11 E
1C
b1001101000001011 J
b1001101000001011 K
b110010 k
1T
1S
0R
1c
1a
0Z
1W
0V
0O
1N
0M
1e
1f#
1Z)
1e)
1?)
1J)
1K)
1$)
1%)
1/)
1g(
1h(
1r(
1L(
1M(
1W(
1X(
11(
1<(
1t'
1u'
1!(
1Y'
1Z'
1d'
1>'
1?'
1I'
1J'
1#'
1.'
1/'
1f&
1g&
1q&
1K&
1L&
1V&
1W&
10&
1;&
1<&
1s%
1t%
1~%
1X%
1c%
1d%
1=%
1>%
1H%
1I%
0T)
0U)
0W)
0X)
0_)
0`)
0b)
0c)
09)
0:)
0<)
0=)
0D)
0G)
0|(
0!)
0))
0*)
0,)
0a(
0b(
0d(
0l(
0o(
0F(
0I(
0J(
0Q(
0R(
0T(
0+(
0.(
06(
07(
09(
0:(
0n'
0q'
0y'
0z'
0|'
0}'
0S'
0V'
0^'
0_'
0a'
08'
0;'
0<'
0C'
0D'
0F'
0{&
0|&
0~&
0('
0+'
0,'
0`&
0c&
0k&
0n&
0o&
0E&
0F&
0H&
0P&
0Q&
0S&
0T&
0*&
0+&
0-&
05&
06&
08&
0m%
0p%
0x%
0{%
0|%
0R%
0U%
0V%
0]%
0^%
0`%
0a%
07%
08%
0:%
0B%
0E%
0F%
1C.
1D.
1(.
1k-
1l-
1P-
15-
16-
1x,
1y,
1],
1^,
1B,
1C,
1',
1(,
1j+
1O+
14+
15+
1w*
1x*
1\*
1A*
1B*
1&*
1:"
05"
0f#
16"
0%*
02
04
0v*
05
03+
0i+
08
09
0:
0;
0<
0O-
0>
0'.
0@
0B.
1D%
19%
16%
1_%
1Z%
1P%
1Q%
1v%
1o%
1l%
17&
12&
1)&
1R&
1M&
1G&
1D&
1i&
1j&
1b&
1_&
1*'
1''
1z&
1E'
1B'
1:'
17'
1['
1U'
1R'
1w'
1x'
1p'
14(
15(
1S(
1N(
1H(
1E(
1c(
1`(
1&)
1~(
1{(
1F)
1C)
17)
18)
1])
1\)
1R)
1Q)
03%
02%
0<%
0N%
0W%
0h%
0r%
0&&
0/&
0A&
0@&
0J&
0p&
0[&
0e&
0w&
0-'
0"'
04'
0H'
03'
0='
0N'
0X'
0~'
0i'
0;(
0B(
0A(
0K(
0\(
0f(
0w(
0#)
05)
0I)
0>)
14)
15)
1w(
1\(
1A(
1'(
1#(
1j'
1N'
13'
14'
1v&
1w&
1[&
1\&
1@&
1%&
1h%
1M%
12%
0Y)
0d)
0A)
0B)
0y(
0z(
0.)
0_(
0C(
0V(
0O(
0l'
0P'
0Q'
0c'
05'
0A'
0%'
0]&
0^&
0h&
0C&
0U&
0:&
03&
0j%
0k%
0O%
0b%
05%
1@
1?
1=
17
15
14
11
1D#
1N%
1W%
1r%
1&&
1A&
1p&
1e&
1-'
1='
1O'
1X'
1B(
1K(
1x(
1#)
1I)
1P)
1O)
0e%
0=&
00'
0*
0L)
1/
1'
1$
1"
0g)
05)
0w(
0A(
0N'
03'
0w&
0[&
0\&
0h%
0M%
1e%
1"&
1s&
1K'
1f'
1Y(
11)
10
0.
0,
0)
0(
0&
0#
0"
0T#
1R#
1Q#
0P#
1M#
1I#
1G#
0F#
1E#
#4910
b110010 F
#4950
0i
0G
0f
#5000
1i
1G
1f
0d#
1b#
1a#
0`#
1]#
1Y#
1W#
0V#
1U#
b111 A
b1110010100110110 D
b101 E
b1110111001100001 J
b110011 k
0S
1R
0a
1`
1_
0]
1Z
0Y
1V
1M
1L
0h)
0i)
0M)
02)
03)
0u(
0Z(
0[(
0?(
0@(
0$(
0%(
0g'
0h'
0L'
0M'
01'
0t&
0Y&
0Z&
0>&
0?&
0#&
0f%
0g%
0K%
0Z)
0[)
0e)
0f)
0?)
0@)
0J)
0$)
0/)
0g(
0r(
0L(
0M(
0W(
01(
0<(
0=(
0t'
0!(
0"(
0Y'
0d'
0>'
0?'
0I'
0#'
0.'
0/'
0f&
0q&
0r&
0K&
0V&
0W&
00&
0;&
0s%
0~%
0!&
0X%
0Y%
0c%
0d%
0=%
0H%
0I%
0:"
14"
06"
0D#
1*$
13%
1<%
1b%
1M%
1i%
1:&
1/&
1U&
1J&
1\&
1w&
1"'
1H'
13'
1c'
1~'
1;(
1V(
1A(
1f(
1.)
1>)
1d)
1Y)
1J%
1"
1=&
1X&
10'
1(
1)
1*
1+
1,
1t(
1.
1L)
1g)
0/
0-
0'
0!
0x(
0\(
0B(
0O'
04'
0v&
02'
0u&
0@&
0%&
0&&
0$&
02%
0L%
1!
1#
1?&
1&
1'
1M'
1h'
1[(
13)
0.
0,
0)
0(
0$
1T#
0R#
0Q#
1P#
0M#
0I#
0G#
1F#
0E#
0:$
19$
04$
03$
10$
0/$
0.$
1-$
1+$
#5001
1@!
0A!
1B!
1D!
1H!
0K!
1L!
1M!
0O!
1X)
13.
0")
0[-
0e(
0@-
1J(
1%-
0W'
02,
0I&
0$+
0q%
0L*
1V%
11*
0;%
0t)
1n)
15%
0+*
0P%
1F*
1k%
1|*
1C&
1,,
1Q'
0},
0D(
1:-
1_(
1U-
1z(
0-.
0R)
1[)
0%)
0h(
1M(
0Z'
0L&
0t%
1Y%
0>%
12%
0M%
1h%
1@&
1N'
0A(
1\(
1w(
0O)
0T#
1R#
1Q#
0P#
1M#
1I#
1G#
0F#
1E#
#5010
b110011 F
